
mqtt_lwip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048fc  0800fc9c  0800fc9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014598  08014598  00016070  2**0
                  CONTENTS
  4 .ARM          00000008  08014598  08014598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080145a0  080145a0  00016070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080145a0  080145a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080145a4  080145a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080145a8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016070  2**0
                  CONTENTS
 10 .bss          00008910  20000070  20000070  00016070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008980  20008980  00016070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee3e  00000000  00000000  000160a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005454  00000000  00000000  00034ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f0  00000000  00000000  0003a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001409  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002be78  00000000  00000000  0003d031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029c83  00000000  00000000  00068ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3377  00000000  00000000  00092b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00175ea3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007064  00000000  00000000  00175ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003b  00000000  00000000  0017cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fc84 	.word	0x0800fc84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800fc84 	.word	0x0800fc84

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f931 	bl	8000820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	200f      	movs	r0, #15
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f00e f96e 	bl	800e8a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f93b 	bl	800086e <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f911 	bl	8000836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000010 	.word	0x20000010
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	2000008c 	.word	0x2000008c

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000008c 	.word	0x2000008c

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <HAL_Delay+0x44>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000004 	.word	0x20000004

080006bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ee:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	60d3      	str	r3, [r2, #12]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__NVIC_GetPriorityGrouping+0x18>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	f003 0307 	and.w	r3, r3, #7
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	db0a      	blt.n	800074a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	490c      	ldr	r1, [pc, #48]	@ (800076c <__NVIC_SetPriority+0x4c>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	0112      	lsls	r2, r2, #4
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	440b      	add	r3, r1
 8000744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000748:	e00a      	b.n	8000760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4908      	ldr	r1, [pc, #32]	@ (8000770 <__NVIC_SetPriority+0x50>)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	3b04      	subs	r3, #4
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	440b      	add	r3, r1
 800075e:	761a      	strb	r2, [r3, #24]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	@ 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	f1c3 0307 	rsb	r3, r3, #7
 800078e:	2b04      	cmp	r3, #4
 8000790:	bf28      	it	cs
 8000792:	2304      	movcs	r3, #4
 8000794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3304      	adds	r3, #4
 800079a:	2b06      	cmp	r3, #6
 800079c:	d902      	bls.n	80007a4 <NVIC_EncodePriority+0x30>
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3b03      	subs	r3, #3
 80007a2:	e000      	b.n	80007a6 <NVIC_EncodePriority+0x32>
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43da      	mvns	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	401a      	ands	r2, r3
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007bc:	f04f 31ff 	mov.w	r1, #4294967295
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43d9      	mvns	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	4313      	orrs	r3, r2
         );
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3724      	adds	r7, #36	@ 0x24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007ec:	d301      	bcc.n	80007f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ee:	2301      	movs	r3, #1
 80007f0:	e00f      	b.n	8000812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <SysTick_Config+0x40>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fa:	210f      	movs	r1, #15
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f7ff ff8e 	bl	8000720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <SysTick_Config+0x40>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <SysTick_Config+0x40>)
 800080c:	2207      	movs	r2, #7
 800080e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	e000e010 	.word	0xe000e010

08000820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff47 	bl	80006bc <__NVIC_SetPriorityGrouping>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000848:	f7ff ff5c 	bl	8000704 <__NVIC_GetPriorityGrouping>
 800084c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	68b9      	ldr	r1, [r7, #8]
 8000852:	6978      	ldr	r0, [r7, #20]
 8000854:	f7ff ff8e 	bl	8000774 <NVIC_EncodePriority>
 8000858:	4602      	mov	r2, r0
 800085a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff5d 	bl	8000720 <__NVIC_SetPriority>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ffb0 	bl	80007dc <SysTick_Config>
 800087c:	4603      	mov	r3, r0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d101      	bne.n	800089a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	e06c      	b.n	8000974 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d106      	bne.n	80008b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2223      	movs	r2, #35	@ 0x23
 80008a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f869 	bl	8000984 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b31      	ldr	r3, [pc, #196]	@ (800097c <HAL_ETH_Init+0xf4>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	4a30      	ldr	r2, [pc, #192]	@ (800097c <HAL_ETH_Init+0xf4>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c2:	4b2e      	ldr	r3, [pc, #184]	@ (800097c <HAL_ETH_Init+0xf4>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <HAL_ETH_Init+0xf8>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000980 <HAL_ETH_Init+0xf8>)
 80008d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80008d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008da:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <HAL_ETH_Init+0xf8>)
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	4927      	ldr	r1, [pc, #156]	@ (8000980 <HAL_ETH_Init+0xf8>)
 80008e4:	4313      	orrs	r3, r2
 80008e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80008e8:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <HAL_ETH_Init+0xf8>)
 80008ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6812      	ldr	r2, [r2, #0]
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000902:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000904:	f7ff feaa 	bl	800065c <HAL_GetTick>
 8000908:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800090a:	e011      	b.n	8000930 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800090c:	f7ff fea6 	bl	800065c <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800091a:	d909      	bls.n	8000930 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2204      	movs	r2, #4
 8000920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	22e0      	movs	r2, #224	@ 0xe0
 8000928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	e021      	b.n	8000974 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1e4      	bne.n	800090c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 fb3a 	bl	8000fbc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 fbe1 	bl	8001110 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 fc37 	bl	80011c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	461a      	mov	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f000 fb9f 	bl	80010a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2210      	movs	r2, #16
 800096e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40013800 	.word	0x40013800

08000984 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d109      	bne.n	80009be <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b0:	f043 0201 	orr.w	r2, r3, #1
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e07c      	b.n	8000ab8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80009c4:	2b23      	cmp	r3, #35	@ 0x23
 80009c6:	d176      	bne.n	8000ab6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80009c8:	2200      	movs	r2, #0
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f000 fc65 	bl	800129c <ETH_Prepare_Tx_Descriptors>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d009      	beq.n	80009ec <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009de:	f043 0202 	orr.w	r2, r3, #2
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e065      	b.n	8000ab8 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009ec:	f3bf 8f4f 	dsb	sy
}
 80009f0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3206      	adds	r2, #6
 80009fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009fe:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d904      	bls.n	8000a1c <HAL_ETH_Transmit+0x84>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a16:	1f1a      	subs	r2, r3, #4
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3106      	adds	r1, #6
 8000a28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000a30:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8000a32:	f7ff fe13 	bl	800065c <HAL_GetTick>
 8000a36:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000a38:	e037      	b.n	8000aaa <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d011      	beq.n	8000a70 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a52:	f043 0208 	orr.w	r2, r3, #8
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a64:	695a      	ldr	r2, [r3, #20]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e023      	b.n	8000ab8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a76:	d018      	beq.n	8000aaa <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000a78:	f7ff fdf0 	bl	800065c <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d302      	bcc.n	8000a8e <HAL_ETH_Transmit+0xf6>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10d      	bne.n	8000aaa <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a94:	f043 0204 	orr.w	r2, r3, #4
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000aa4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e006      	b.n	8000ab8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	dbc3      	blt.n	8000a3a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
  }
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d109      	bne.n	8000aec <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	f043 0201 	orr.w	r2, r3, #1
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e0a8      	b.n	8000c3e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000af2:	2b23      	cmp	r3, #35	@ 0x23
 8000af4:	d001      	beq.n	8000afa <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e0a1      	b.n	8000c3e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000afe:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	3212      	adds	r2, #18
 8000b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b0a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000b10:	f1c3 0304 	rsb	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8000b16:	e06a      	b.n	8000bee <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d007      	beq.n	8000b34 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	69da      	ldr	r2, [r3, #28]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	699a      	ldr	r2, [r3, #24]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <HAL_ETH_ReadData+0x88>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d040      	beq.n	8000bca <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d00c      	beq.n	8000b8c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	0c1b      	lsrs	r3, r3, #16
 8000b78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b7c:	3b04      	subs	r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f00d fba5 	bl	800e2f8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	441a      	add	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d902      	bls.n	8000bdc <HAL_ETH_ReadData+0x11c>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b04      	subs	r3, #4
 8000bda:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	3212      	adds	r2, #18
 8000be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3301      	adds	r3, #1
 8000bec:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db06      	blt.n	8000c04 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d202      	bcs.n	8000c04 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d089      	beq.n	8000b18 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	441a      	add	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f000 f815 	bl	8000c48 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69fa      	ldr	r2, [r7, #28]
 8000c22:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d108      	bne.n	8000c3c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e000      	b.n	8000c3e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8000c54:	2301      	movs	r3, #1
 8000c56:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000c5c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69fa      	ldr	r2, [r7, #28]
 8000c62:	3212      	adds	r2, #18
 8000c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c68:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000c6e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8000c70:	e03d      	b.n	8000cee <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	6a1b      	ldr	r3, [r3, #32]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d112      	bne.n	8000ca0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f00d fb0a 	bl	800e298 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	74fb      	strb	r3, [r7, #19]
 8000c8e:	e007      	b.n	8000ca0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	461a      	mov	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8000ca0:	7cfb      	ldrb	r3, [r7, #19]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d023      	beq.n	8000cee <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	4a24      	ldr	r2, [pc, #144]	@ (8000d44 <ETH_UpdateDescriptor+0xfc>)
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	e003      	b.n	8000cbe <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8000cbc:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d902      	bls.n	8000cdc <ETH_UpdateDescriptor+0x94>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b04      	subs	r3, #4
 8000cda:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	3212      	adds	r2, #18
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	617b      	str	r3, [r7, #20]
      desccount--;
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <ETH_UpdateDescriptor+0xb2>
 8000cf4:	7cfb      	ldrb	r3, [r7, #19]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1bb      	bne.n	8000c72 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d01a      	beq.n	8000d3a <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	3301      	adds	r3, #1
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d0e:	f3bf 8f5f 	dmb	sy
}
 8000d12:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6919      	ldr	r1, [r3, #16]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	18ca      	adds	r2, r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d2c:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	80004600 	.word	0x80004600

08000d48 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4b51      	ldr	r3, [pc, #324]	@ (8000ea4 <ETH_SetMACConfig+0x15c>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	7c1b      	ldrb	r3, [r3, #16]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <ETH_SetMACConfig+0x28>
 8000d6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d6e:	e000      	b.n	8000d72 <ETH_SetMACConfig+0x2a>
 8000d70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	7c5b      	ldrb	r3, [r3, #17]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d102      	bne.n	8000d80 <ETH_SetMACConfig+0x38>
 8000d7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d7e:	e000      	b.n	8000d82 <ETH_SetMACConfig+0x3a>
 8000d80:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8000d82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8000d88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	7fdb      	ldrb	r3, [r3, #31]
 8000d8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8000d90:	431a      	orrs	r2, r3
                        macconf->Speed |
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8000d96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	7f92      	ldrb	r2, [r2, #30]
 8000d9c:	2a00      	cmp	r2, #0
 8000d9e:	d102      	bne.n	8000da6 <ETH_SetMACConfig+0x5e>
 8000da0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000da4:	e000      	b.n	8000da8 <ETH_SetMACConfig+0x60>
 8000da6:	2200      	movs	r2, #0
                        macconf->Speed |
 8000da8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	7f1b      	ldrb	r3, [r3, #28]
 8000dae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8000db0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8000db6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8000dbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d102      	bne.n	8000dd0 <ETH_SetMACConfig+0x88>
 8000dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dce:	e000      	b.n	8000dd2 <ETH_SetMACConfig+0x8a>
 8000dd0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8000dd2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	7bdb      	ldrb	r3, [r3, #15]
 8000dd8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8000dda:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8000de0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000de8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8000dea:	4313      	orrs	r3, r2
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff fc36 	bl	8000674 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d101      	bne.n	8000e36 <ETH_SetMACConfig+0xee>
 8000e32:	2280      	movs	r2, #128	@ 0x80
 8000e34:	e000      	b.n	8000e38 <ETH_SetMACConfig+0xf0>
 8000e36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000e38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8000e3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8000e46:	2a01      	cmp	r2, #1
 8000e48:	d101      	bne.n	8000e4e <ETH_SetMACConfig+0x106>
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	e000      	b.n	8000e50 <ETH_SetMACConfig+0x108>
 8000e4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8000e50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8000e58:	2a01      	cmp	r2, #1
 8000e5a:	d101      	bne.n	8000e60 <ETH_SetMACConfig+0x118>
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	e000      	b.n	8000e62 <ETH_SetMACConfig+0x11a>
 8000e60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8000e62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8000e6a:	2a01      	cmp	r2, #1
 8000e6c:	d101      	bne.n	8000e72 <ETH_SetMACConfig+0x12a>
 8000e6e:	2202      	movs	r2, #2
 8000e70:	e000      	b.n	8000e74 <ETH_SetMACConfig+0x12c>
 8000e72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8000e74:	4313      	orrs	r3, r2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff fbf1 	bl	8000674 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	619a      	str	r2, [r3, #24]
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	ff20810f 	.word	0xff20810f

08000ea8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb8 <ETH_SetDMAConfig+0x110>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	7b1b      	ldrb	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <ETH_SetDMAConfig+0x2c>
 8000ece:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ed2:	e000      	b.n	8000ed6 <ETH_SetDMAConfig+0x2e>
 8000ed4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	7b5b      	ldrb	r3, [r3, #13]
 8000eda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000edc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	7f52      	ldrb	r2, [r2, #29]
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d102      	bne.n	8000eec <ETH_SetDMAConfig+0x44>
 8000ee6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000eea:	e000      	b.n	8000eee <ETH_SetDMAConfig+0x46>
 8000eec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8000eee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	7b9b      	ldrb	r3, [r3, #14]
 8000ef4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8000ef6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8000efc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	7f1b      	ldrb	r3, [r3, #28]
 8000f02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8000f04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	7f9b      	ldrb	r3, [r3, #30]
 8000f0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8000f0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8000f12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff fb98 	bl	8000674 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	791b      	ldrb	r3, [r3, #4]
 8000f56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000f5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8000f62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8000f68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8000f72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8000f7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8000f80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000f8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fb69 	bl	8000674 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	f8de3f23 	.word	0xf8de3f23

08000fbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0a6      	sub	sp, #152	@ 0x98
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001002:	2300      	movs	r3, #0
 8001004:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800101e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001022:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001024:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001030:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fe86 	bl	8000d48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800103c:	2301      	movs	r3, #1
 800103e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001040:	2301      	movs	r3, #1
 8001042:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001044:	2301      	movs	r3, #1
 8001046:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800104a:	2301      	movs	r3, #1
 800104c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001062:	2301      	movs	r3, #1
 8001064:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001068:	2301      	movs	r3, #1
 800106a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800106c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001070:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001072:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001076:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800107c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800107e:	2301      	movs	r3, #1
 8001080:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff08 	bl	8000ea8 <ETH_SetDMAConfig>
}
 8001098:	bf00      	nop
 800109a:	3798      	adds	r7, #152	@ 0x98
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3305      	adds	r3, #5
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	3204      	adds	r2, #4
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <ETH_MACAddressConfig+0x68>)
 80010c2:	4413      	add	r3, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3303      	adds	r3, #3
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	061a      	lsls	r2, r3, #24
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3302      	adds	r3, #2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	041b      	lsls	r3, r3, #16
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3301      	adds	r3, #1
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	4313      	orrs	r3, r2
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	7812      	ldrb	r2, [r2, #0]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <ETH_MACAddressConfig+0x6c>)
 80010f2:	4413      	add	r3, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40028040 	.word	0x40028040
 800110c:	40028044 	.word	0x40028044

08001110 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	e03e      	b.n	800119c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68d9      	ldr	r1, [r3, #12]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	3206      	adds	r2, #6
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d80c      	bhi.n	8001180 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68d9      	ldr	r1, [r3, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	461a      	mov	r2, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	e004      	b.n	800118a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	461a      	mov	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d9bd      	bls.n	800111e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011b4:	611a      	str	r2, [r3, #16]
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b085      	sub	sp, #20
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	e046      	b.n	800125e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6919      	ldr	r1, [r3, #16]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800120c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8001214:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	3212      	adds	r2, #18
 800122a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d80c      	bhi.n	800124e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6919      	ldr	r1, [r3, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	e004      	b.n	8001258 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	461a      	mov	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d9b5      	bls.n	80011d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800128e:	60da      	str	r2, [r3, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800129c:	b480      	push	{r7}
 800129e:	b08d      	sub	sp, #52	@ 0x34
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3318      	adds	r3, #24
 80012ac:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80012da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80012de:	d007      	beq.n	80012f0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e4:	3304      	adds	r3, #4
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80012f0:	2302      	movs	r3, #2
 80012f2:	e103      	b.n	80014fc <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	3301      	adds	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800130c:	f023 031f 	bic.w	r3, r3, #31
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	6852      	ldr	r2, [r2, #4]
 8001314:	431a      	orrs	r2, r3
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d008      	beq.n	8001338 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	431a      	orrs	r2, r3
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	431a      	orrs	r2, r3
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800137a:	f3bf 8f5f 	dmb	sy
}
 800137e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800138c:	e084      	b.n	8001498 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e005      	b.n	80013ba <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80013ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013bc:	3301      	adds	r3, #1
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d902      	bls.n	80013cc <ETH_Prepare_Tx_Descriptors+0x130>
 80013c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c8:	3b04      	subs	r3, #4
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80013ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013ee:	d007      	beq.n	8001400 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f4:	3304      	adds	r3, #4
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d029      	beq.n	8001454 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001412:	e019      	b.n	8001448 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8001414:	f3bf 8f5f 	dmb	sy
}
 8001418:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001428:	3301      	adds	r3, #1
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800142c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142e:	2b03      	cmp	r3, #3
 8001430:	d902      	bls.n	8001438 <ETH_Prepare_Tx_Descriptors+0x19c>
 8001432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001434:	3b04      	subs	r3, #4
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001444:	3301      	adds	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	429a      	cmp	r2, r3
 800144e:	d3e1      	bcc.n	8001414 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8001450:	2302      	movs	r3, #2
 8001452:	e053      	b.n	80014fc <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	3301      	adds	r3, #1
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8001472:	f023 031f 	bic.w	r3, r3, #31
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	6852      	ldr	r2, [r2, #4]
 800147a:	431a      	orrs	r2, r3
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	3301      	adds	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001486:	f3bf 8f5f 	dmb	sy
}
 800148a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f47f af76 	bne.w	800138e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e005      	b.n	80014c2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d2:	6979      	ldr	r1, [r7, #20]
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	3304      	adds	r3, #4
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014e2:	611a      	str	r2, [r3, #16]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	4413      	add	r3, r2
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80014f6:	b662      	cpsie	i
}
 80014f8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3734      	adds	r7, #52	@ 0x34
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	@ 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	e16b      	b.n	80017fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	429a      	cmp	r2, r3
 800153e:	f040 815a 	bne.w	80017f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d005      	beq.n	800155a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001556:	2b02      	cmp	r3, #2
 8001558:	d130      	bne.n	80015bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	f003 0201 	and.w	r2, r3, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d017      	beq.n	80015f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d123      	bne.n	800164c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	08da      	lsrs	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3208      	adds	r2, #8
 8001646:	69b9      	ldr	r1, [r7, #24]
 8001648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0203 	and.w	r2, r3, #3
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80b4 	beq.w	80017f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b60      	ldr	r3, [pc, #384]	@ (8001814 <HAL_GPIO_Init+0x30c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	4a5f      	ldr	r2, [pc, #380]	@ (8001814 <HAL_GPIO_Init+0x30c>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169c:	6453      	str	r3, [r2, #68]	@ 0x44
 800169e:	4b5d      	ldr	r3, [pc, #372]	@ (8001814 <HAL_GPIO_Init+0x30c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001818 <HAL_GPIO_Init+0x310>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a52      	ldr	r2, [pc, #328]	@ (800181c <HAL_GPIO_Init+0x314>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d02b      	beq.n	800172e <HAL_GPIO_Init+0x226>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a51      	ldr	r2, [pc, #324]	@ (8001820 <HAL_GPIO_Init+0x318>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d025      	beq.n	800172a <HAL_GPIO_Init+0x222>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a50      	ldr	r2, [pc, #320]	@ (8001824 <HAL_GPIO_Init+0x31c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d01f      	beq.n	8001726 <HAL_GPIO_Init+0x21e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001828 <HAL_GPIO_Init+0x320>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d019      	beq.n	8001722 <HAL_GPIO_Init+0x21a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4e      	ldr	r2, [pc, #312]	@ (800182c <HAL_GPIO_Init+0x324>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0x216>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001830 <HAL_GPIO_Init+0x328>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d00d      	beq.n	800171a <HAL_GPIO_Init+0x212>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4c      	ldr	r2, [pc, #304]	@ (8001834 <HAL_GPIO_Init+0x32c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d007      	beq.n	8001716 <HAL_GPIO_Init+0x20e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4b      	ldr	r2, [pc, #300]	@ (8001838 <HAL_GPIO_Init+0x330>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d101      	bne.n	8001712 <HAL_GPIO_Init+0x20a>
 800170e:	2307      	movs	r3, #7
 8001710:	e00e      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001712:	2308      	movs	r3, #8
 8001714:	e00c      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001716:	2306      	movs	r3, #6
 8001718:	e00a      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800171a:	2305      	movs	r3, #5
 800171c:	e008      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800171e:	2304      	movs	r3, #4
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001722:	2303      	movs	r3, #3
 8001724:	e004      	b.n	8001730 <HAL_GPIO_Init+0x228>
 8001726:	2302      	movs	r3, #2
 8001728:	e002      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x228>
 800172e:	2300      	movs	r3, #0
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f002 0203 	and.w	r2, r2, #3
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4093      	lsls	r3, r2
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001740:	4935      	ldr	r1, [pc, #212]	@ (8001818 <HAL_GPIO_Init+0x310>)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b3b      	ldr	r3, [pc, #236]	@ (800183c <HAL_GPIO_Init+0x334>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a32      	ldr	r2, [pc, #200]	@ (800183c <HAL_GPIO_Init+0x334>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b30      	ldr	r3, [pc, #192]	@ (800183c <HAL_GPIO_Init+0x334>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a27      	ldr	r2, [pc, #156]	@ (800183c <HAL_GPIO_Init+0x334>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a2:	4b26      	ldr	r3, [pc, #152]	@ (800183c <HAL_GPIO_Init+0x334>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c6:	4a1d      	ldr	r2, [pc, #116]	@ (800183c <HAL_GPIO_Init+0x334>)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_GPIO_Init+0x334>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f0:	4a12      	ldr	r2, [pc, #72]	@ (800183c <HAL_GPIO_Init+0x334>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3301      	adds	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b0f      	cmp	r3, #15
 8001800:	f67f ae90 	bls.w	8001524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40021400 	.word	0x40021400
 8001834:	40021800 	.word	0x40021800
 8001838:	40021c00 	.word	0x40021c00
 800183c:	40013c00 	.word	0x40013c00

08001840 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e267      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d075      	beq.n	800194a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800185e:	4b88      	ldr	r3, [pc, #544]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b04      	cmp	r3, #4
 8001868:	d00c      	beq.n	8001884 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186a:	4b85      	ldr	r3, [pc, #532]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001872:	2b08      	cmp	r3, #8
 8001874:	d112      	bne.n	800189c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001876:	4b82      	ldr	r3, [pc, #520]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800187e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001882:	d10b      	bne.n	800189c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001884:	4b7e      	ldr	r3, [pc, #504]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d05b      	beq.n	8001948 <HAL_RCC_OscConfig+0x108>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d157      	bne.n	8001948 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e242      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a4:	d106      	bne.n	80018b4 <HAL_RCC_OscConfig+0x74>
 80018a6:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a75      	ldr	r2, [pc, #468]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0xb0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x98>
 80018be:	4b70      	ldr	r3, [pc, #448]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0xb0>
 80018d8:	4b69      	ldr	r3, [pc, #420]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a68      	ldr	r2, [pc, #416]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b66      	ldr	r3, [pc, #408]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a65      	ldr	r2, [pc, #404]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7fe feb0 	bl	800065c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001900:	f7fe feac 	bl	800065c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	@ 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e207      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b5b      	ldr	r3, [pc, #364]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0xc0>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7fe fe9c 	bl	800065c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7fe fe98 	bl	800065c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	@ 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e1f3      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	4b51      	ldr	r3, [pc, #324]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0xe8>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d063      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001956:	4b4a      	ldr	r3, [pc, #296]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b47      	ldr	r3, [pc, #284]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800196a:	2b08      	cmp	r3, #8
 800196c:	d11c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196e:	4b44      	ldr	r3, [pc, #272]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d116      	bne.n	80019a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	4b41      	ldr	r3, [pc, #260]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x152>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e1c7      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4937      	ldr	r1, [pc, #220]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a6:	e03a      	b.n	8001a1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b0:	4b34      	ldr	r3, [pc, #208]	@ (8001a84 <HAL_RCC_OscConfig+0x244>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7fe fe51 	bl	800065c <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019be:	f7fe fe4d 	bl	800065c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1a8      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4925      	ldr	r1, [pc, #148]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f2:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <HAL_RCC_OscConfig+0x244>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7fe fe30 	bl	800065c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a00:	f7fe fe2c 	bl	800065c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e187      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d036      	beq.n	8001a98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d016      	beq.n	8001a60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_RCC_OscConfig+0x248>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7fe fe10 	bl	800065c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a40:	f7fe fe0c 	bl	800065c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e167      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_RCC_OscConfig+0x240>)
 8001a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x200>
 8001a5e:	e01b      	b.n	8001a98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_OscConfig+0x248>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a66:	f7fe fdf9 	bl	800065c <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	e00e      	b.n	8001a8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a6e:	f7fe fdf5 	bl	800065c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d907      	bls.n	8001a8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e150      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
 8001a80:	40023800 	.word	0x40023800
 8001a84:	42470000 	.word	0x42470000
 8001a88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	4b88      	ldr	r3, [pc, #544]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ea      	bne.n	8001a6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 8097 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b81      	ldr	r3, [pc, #516]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b7d      	ldr	r3, [pc, #500]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a7c      	ldr	r2, [pc, #496]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b77      	ldr	r3, [pc, #476]	@ (8001cb4 <HAL_RCC_OscConfig+0x474>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae2:	4b74      	ldr	r3, [pc, #464]	@ (8001cb4 <HAL_RCC_OscConfig+0x474>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a73      	ldr	r2, [pc, #460]	@ (8001cb4 <HAL_RCC_OscConfig+0x474>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7fe fdb5 	bl	800065c <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7fe fdb1 	bl	800065c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e10c      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb4 <HAL_RCC_OscConfig+0x474>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x2ea>
 8001b1c:	4b64      	ldr	r3, [pc, #400]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b20:	4a63      	ldr	r2, [pc, #396]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b28:	e01c      	b.n	8001b64 <HAL_RCC_OscConfig+0x324>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x30c>
 8001b32:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a5e      	ldr	r2, [pc, #376]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b42:	4a5b      	ldr	r2, [pc, #364]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0x324>
 8001b4c:	4b58      	ldr	r3, [pc, #352]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a57      	ldr	r2, [pc, #348]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b58:	4b55      	ldr	r3, [pc, #340]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	f023 0304 	bic.w	r3, r3, #4
 8001b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d015      	beq.n	8001b98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7fe fd76 	bl	800065c <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7fe fd72 	bl	800065c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0cb      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	4b49      	ldr	r3, [pc, #292]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ee      	beq.n	8001b74 <HAL_RCC_OscConfig+0x334>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7fe fd60 	bl	800065c <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7fe fd5c 	bl	800065c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e0b5      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ee      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b39      	ldr	r3, [pc, #228]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a38      	ldr	r2, [pc, #224]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80a1 	beq.w	8001d20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bde:	4b34      	ldr	r3, [pc, #208]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d05c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d141      	bne.n	8001c76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <HAL_RCC_OscConfig+0x478>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fd30 	bl	800065c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c00:	f7fe fd2c 	bl	800065c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e087      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	491b      	ldr	r1, [pc, #108]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_RCC_OscConfig+0x478>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fd05 	bl	800065c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7fe fd01 	bl	800065c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e05c      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x416>
 8001c74:	e054      	b.n	8001d20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <HAL_RCC_OscConfig+0x478>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7fe fcee 	bl	800065c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c84:	f7fe fcea 	bl	800065c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e045      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_RCC_OscConfig+0x470>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x444>
 8001ca2:	e03d      	b.n	8001d20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e038      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x4ec>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d028      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d121      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d11a      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d111      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	3b01      	subs	r3, #1
 8001d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0cc      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b68      	ldr	r3, [pc, #416]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d90c      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b65      	ldr	r3, [pc, #404]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b63      	ldr	r3, [pc, #396]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0b8      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d84:	4b59      	ldr	r3, [pc, #356]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a58      	ldr	r2, [pc, #352]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d9c:	4b53      	ldr	r3, [pc, #332]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4a52      	ldr	r2, [pc, #328]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b50      	ldr	r3, [pc, #320]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	494d      	ldr	r1, [pc, #308]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d044      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b47      	ldr	r3, [pc, #284]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d119      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d003      	beq.n	8001dee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dee:	4b3f      	ldr	r3, [pc, #252]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e06f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e067      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0e:	4b37      	ldr	r3, [pc, #220]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 0203 	bic.w	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4934      	ldr	r1, [pc, #208]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e20:	f7fe fc1c 	bl	800065c <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f7fe fc18 	bl	800065c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e04f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 020c 	and.w	r2, r3, #12
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1eb      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e50:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d20c      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e032      	b.n	8001ede <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4916      	ldr	r1, [pc, #88]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea2:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	490e      	ldr	r1, [pc, #56]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eb6:	f000 f821 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	490a      	ldr	r1, [pc, #40]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	5ccb      	ldrb	r3, [r1, r3]
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	4a09      	ldr	r2, [pc, #36]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb7c 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	080144a0 	.word	0x080144a0
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	20000000 	.word	0x20000000

08001efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f00:	b090      	sub	sp, #64	@ 0x40
 8001f02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f14:	4b59      	ldr	r3, [pc, #356]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d00d      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x40>
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	f200 80a1 	bhi.w	8002068 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x34>
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d003      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f2e:	e09b      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f32:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001f34:	e09b      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f36:	4b53      	ldr	r3, [pc, #332]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f3a:	e098      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f44:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f46:	4b4d      	ldr	r3, [pc, #308]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d028      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f52:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	099b      	lsrs	r3, r3, #6
 8001f58:	2200      	movs	r2, #0
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f64:	2100      	movs	r1, #0
 8001f66:	4b47      	ldr	r3, [pc, #284]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f68:	fb03 f201 	mul.w	r2, r3, r1
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	fb00 f303 	mul.w	r3, r0, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	4a43      	ldr	r2, [pc, #268]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f76:	fba0 1202 	umull	r1, r2, r0, r2
 8001f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f82:	4413      	add	r3, r2
 8001f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	61fa      	str	r2, [r7, #28]
 8001f8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f96:	f7fe f983 	bl	80002a0 <__aeabi_uldivmod>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fa2:	e053      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa4:	4b35      	ldr	r3, [pc, #212]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	2200      	movs	r2, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	617a      	str	r2, [r7, #20]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fb6:	f04f 0b00 	mov.w	fp, #0
 8001fba:	4652      	mov	r2, sl
 8001fbc:	465b      	mov	r3, fp
 8001fbe:	f04f 0000 	mov.w	r0, #0
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	0159      	lsls	r1, r3, #5
 8001fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fcc:	0150      	lsls	r0, r2, #5
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	ebb2 080a 	subs.w	r8, r2, sl
 8001fd6:	eb63 090b 	sbc.w	r9, r3, fp
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fe6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fee:	ebb2 0408 	subs.w	r4, r2, r8
 8001ff2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	00eb      	lsls	r3, r5, #3
 8002000:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002004:	00e2      	lsls	r2, r4, #3
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	eb14 030a 	adds.w	r3, r4, sl
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	eb45 030b 	adc.w	r3, r5, fp
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002022:	4629      	mov	r1, r5
 8002024:	028b      	lsls	r3, r1, #10
 8002026:	4621      	mov	r1, r4
 8002028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800202c:	4621      	mov	r1, r4
 800202e:	028a      	lsls	r2, r1, #10
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002036:	2200      	movs	r2, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	60fa      	str	r2, [r7, #12]
 800203c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002040:	f7fe f92e 	bl	80002a0 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4613      	mov	r3, r2
 800204a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_RCC_GetSysClockFreq+0x180>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	3301      	adds	r3, #1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800205c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_RCC_GetSysClockFreq+0x184>)
 800206a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002070:	4618      	mov	r0, r3
 8002072:	3740      	adds	r7, #64	@ 0x40
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	017d7840 	.word	0x017d7840

08002088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	@ (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000010 	.word	0x20000010

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a9b      	lsrs	r3, r3, #10
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4903      	ldr	r1, [pc, #12]	@ (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	080144b0 	.word	0x080144b0

080020c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020cc:	f7ff ffdc 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0b5b      	lsrs	r3, r3, #13
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4903      	ldr	r1, [pc, #12]	@ (80020ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	080144b0 	.word	0x080144b0

080020f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e041      	b.n	8002186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f00c fbec 	bl	800e8f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f000 f8f4 	bl	800231c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_ConfigClockSource+0x1c>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0b4      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x186>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e2:	d03e      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0xd4>
 80021e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e8:	f200 8087 	bhi.w	80022fa <HAL_TIM_ConfigClockSource+0x16c>
 80021ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021f0:	f000 8086 	beq.w	8002300 <HAL_TIM_ConfigClockSource+0x172>
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021f8:	d87f      	bhi.n	80022fa <HAL_TIM_ConfigClockSource+0x16c>
 80021fa:	2b70      	cmp	r3, #112	@ 0x70
 80021fc:	d01a      	beq.n	8002234 <HAL_TIM_ConfigClockSource+0xa6>
 80021fe:	2b70      	cmp	r3, #112	@ 0x70
 8002200:	d87b      	bhi.n	80022fa <HAL_TIM_ConfigClockSource+0x16c>
 8002202:	2b60      	cmp	r3, #96	@ 0x60
 8002204:	d050      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x11a>
 8002206:	2b60      	cmp	r3, #96	@ 0x60
 8002208:	d877      	bhi.n	80022fa <HAL_TIM_ConfigClockSource+0x16c>
 800220a:	2b50      	cmp	r3, #80	@ 0x50
 800220c:	d03c      	beq.n	8002288 <HAL_TIM_ConfigClockSource+0xfa>
 800220e:	2b50      	cmp	r3, #80	@ 0x50
 8002210:	d873      	bhi.n	80022fa <HAL_TIM_ConfigClockSource+0x16c>
 8002212:	2b40      	cmp	r3, #64	@ 0x40
 8002214:	d058      	beq.n	80022c8 <HAL_TIM_ConfigClockSource+0x13a>
 8002216:	2b40      	cmp	r3, #64	@ 0x40
 8002218:	d86f      	bhi.n	80022fa <HAL_TIM_ConfigClockSource+0x16c>
 800221a:	2b30      	cmp	r3, #48	@ 0x30
 800221c:	d064      	beq.n	80022e8 <HAL_TIM_ConfigClockSource+0x15a>
 800221e:	2b30      	cmp	r3, #48	@ 0x30
 8002220:	d86b      	bhi.n	80022fa <HAL_TIM_ConfigClockSource+0x16c>
 8002222:	2b20      	cmp	r3, #32
 8002224:	d060      	beq.n	80022e8 <HAL_TIM_ConfigClockSource+0x15a>
 8002226:	2b20      	cmp	r3, #32
 8002228:	d867      	bhi.n	80022fa <HAL_TIM_ConfigClockSource+0x16c>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d05c      	beq.n	80022e8 <HAL_TIM_ConfigClockSource+0x15a>
 800222e:	2b10      	cmp	r3, #16
 8002230:	d05a      	beq.n	80022e8 <HAL_TIM_ConfigClockSource+0x15a>
 8002232:	e062      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002244:	f000 f990 	bl	8002568 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002256:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	609a      	str	r2, [r3, #8]
      break;
 8002260:	e04f      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002272:	f000 f979 	bl	8002568 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002284:	609a      	str	r2, [r3, #8]
      break;
 8002286:	e03c      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002294:	461a      	mov	r2, r3
 8002296:	f000 f8ed 	bl	8002474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2150      	movs	r1, #80	@ 0x50
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f946 	bl	8002532 <TIM_ITRx_SetConfig>
      break;
 80022a6:	e02c      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022b4:	461a      	mov	r2, r3
 80022b6:	f000 f90c 	bl	80024d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2160      	movs	r1, #96	@ 0x60
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f936 	bl	8002532 <TIM_ITRx_SetConfig>
      break;
 80022c6:	e01c      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d4:	461a      	mov	r2, r3
 80022d6:	f000 f8cd 	bl	8002474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2140      	movs	r1, #64	@ 0x40
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 f926 	bl	8002532 <TIM_ITRx_SetConfig>
      break;
 80022e6:	e00c      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f000 f91d 	bl	8002532 <TIM_ITRx_SetConfig>
      break;
 80022f8:	e003      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
      break;
 80022fe:	e000      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002300:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a46      	ldr	r2, [pc, #280]	@ (8002448 <TIM_Base_SetConfig+0x12c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233a:	d00f      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a43      	ldr	r2, [pc, #268]	@ (800244c <TIM_Base_SetConfig+0x130>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00b      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a42      	ldr	r2, [pc, #264]	@ (8002450 <TIM_Base_SetConfig+0x134>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d007      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a41      	ldr	r2, [pc, #260]	@ (8002454 <TIM_Base_SetConfig+0x138>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0x40>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a40      	ldr	r2, [pc, #256]	@ (8002458 <TIM_Base_SetConfig+0x13c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a35      	ldr	r2, [pc, #212]	@ (8002448 <TIM_Base_SetConfig+0x12c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02b      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800237c:	d027      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a32      	ldr	r2, [pc, #200]	@ (800244c <TIM_Base_SetConfig+0x130>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d023      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a31      	ldr	r2, [pc, #196]	@ (8002450 <TIM_Base_SetConfig+0x134>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01f      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a30      	ldr	r2, [pc, #192]	@ (8002454 <TIM_Base_SetConfig+0x138>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01b      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2f      	ldr	r2, [pc, #188]	@ (8002458 <TIM_Base_SetConfig+0x13c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d017      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	@ (800245c <TIM_Base_SetConfig+0x140>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002460 <TIM_Base_SetConfig+0x144>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00f      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002464 <TIM_Base_SetConfig+0x148>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00b      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002468 <TIM_Base_SetConfig+0x14c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a2a      	ldr	r2, [pc, #168]	@ (800246c <TIM_Base_SetConfig+0x150>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d003      	beq.n	80023ce <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a29      	ldr	r2, [pc, #164]	@ (8002470 <TIM_Base_SetConfig+0x154>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d108      	bne.n	80023e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <TIM_Base_SetConfig+0x12c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d003      	beq.n	8002414 <TIM_Base_SetConfig+0xf8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <TIM_Base_SetConfig+0x13c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d103      	bne.n	800241c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f023 0201 	bic.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	611a      	str	r2, [r3, #16]
  }
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40010000 	.word	0x40010000
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800
 8002454:	40000c00 	.word	0x40000c00
 8002458:	40010400 	.word	0x40010400
 800245c:	40014000 	.word	0x40014000
 8002460:	40014400 	.word	0x40014400
 8002464:	40014800 	.word	0x40014800
 8002468:	40001800 	.word	0x40001800
 800246c:	40001c00 	.word	0x40001c00
 8002470:	40002000 	.word	0x40002000

08002474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	f023 0201 	bic.w	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800249e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f023 030a 	bic.w	r3, r3, #10
 80024b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	621a      	str	r2, [r3, #32]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b087      	sub	sp, #28
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f023 0210 	bic.w	r2, r3, #16
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	031b      	lsls	r3, r3, #12
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800250e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	621a      	str	r2, [r3, #32]
}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	f043 0307 	orr.w	r3, r3, #7
 8002554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	609a      	str	r2, [r3, #8]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	021a      	lsls	r2, r3, #8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	431a      	orrs	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4313      	orrs	r3, r2
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	609a      	str	r2, [r3, #8]
}
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025bc:	2302      	movs	r3, #2
 80025be:	e05a      	b.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d022      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260c:	d01d      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1d      	ldr	r2, [pc, #116]	@ (8002688 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d018      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1b      	ldr	r2, [pc, #108]	@ (800268c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1a      	ldr	r2, [pc, #104]	@ (8002690 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00e      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a18      	ldr	r2, [pc, #96]	@ (8002694 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d009      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a17      	ldr	r2, [pc, #92]	@ (8002698 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d004      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a15      	ldr	r2, [pc, #84]	@ (800269c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10c      	bne.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4313      	orrs	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00
 8002694:	40010400 	.word	0x40010400
 8002698:	40014000 	.word	0x40014000
 800269c:	40001800 	.word	0x40001800

080026a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e042      	b.n	8002738 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f00c f936 	bl	800e938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2224      	movs	r2, #36	@ 0x24
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f82b 	bl	8002740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002744:	b0c0      	sub	sp, #256	@ 0x100
 8002746:	af00      	add	r7, sp, #0
 8002748:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275c:	68d9      	ldr	r1, [r3, #12]
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	ea40 0301 	orr.w	r3, r0, r1
 8002768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	431a      	orrs	r2, r3
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	431a      	orrs	r2, r3
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002798:	f021 010c 	bic.w	r1, r1, #12
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80027a6:	430b      	orrs	r3, r1
 80027a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80027b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ba:	6999      	ldr	r1, [r3, #24]
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	ea40 0301 	orr.w	r3, r0, r1
 80027c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b8f      	ldr	r3, [pc, #572]	@ (8002a0c <UART_SetConfig+0x2cc>)
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d005      	beq.n	80027e0 <UART_SetConfig+0xa0>
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b8d      	ldr	r3, [pc, #564]	@ (8002a10 <UART_SetConfig+0x2d0>)
 80027dc:	429a      	cmp	r2, r3
 80027de:	d104      	bne.n	80027ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027e0:	f7ff fc72 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 80027e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027e8:	e003      	b.n	80027f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ea:	f7ff fc59 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 80027ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027fc:	f040 810c 	bne.w	8002a18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002804:	2200      	movs	r2, #0
 8002806:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800280a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800280e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002812:	4622      	mov	r2, r4
 8002814:	462b      	mov	r3, r5
 8002816:	1891      	adds	r1, r2, r2
 8002818:	65b9      	str	r1, [r7, #88]	@ 0x58
 800281a:	415b      	adcs	r3, r3
 800281c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800281e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002822:	4621      	mov	r1, r4
 8002824:	eb12 0801 	adds.w	r8, r2, r1
 8002828:	4629      	mov	r1, r5
 800282a:	eb43 0901 	adc.w	r9, r3, r1
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800283a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800283e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002842:	4690      	mov	r8, r2
 8002844:	4699      	mov	r9, r3
 8002846:	4623      	mov	r3, r4
 8002848:	eb18 0303 	adds.w	r3, r8, r3
 800284c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002850:	462b      	mov	r3, r5
 8002852:	eb49 0303 	adc.w	r3, r9, r3
 8002856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002866:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800286a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800286e:	460b      	mov	r3, r1
 8002870:	18db      	adds	r3, r3, r3
 8002872:	653b      	str	r3, [r7, #80]	@ 0x50
 8002874:	4613      	mov	r3, r2
 8002876:	eb42 0303 	adc.w	r3, r2, r3
 800287a:	657b      	str	r3, [r7, #84]	@ 0x54
 800287c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002880:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002884:	f7fd fd0c 	bl	80002a0 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4b61      	ldr	r3, [pc, #388]	@ (8002a14 <UART_SetConfig+0x2d4>)
 800288e:	fba3 2302 	umull	r2, r3, r3, r2
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	011c      	lsls	r4, r3, #4
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80028a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80028a8:	4642      	mov	r2, r8
 80028aa:	464b      	mov	r3, r9
 80028ac:	1891      	adds	r1, r2, r2
 80028ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80028b0:	415b      	adcs	r3, r3
 80028b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028b8:	4641      	mov	r1, r8
 80028ba:	eb12 0a01 	adds.w	sl, r2, r1
 80028be:	4649      	mov	r1, r9
 80028c0:	eb43 0b01 	adc.w	fp, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d8:	4692      	mov	sl, r2
 80028da:	469b      	mov	fp, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	eb1a 0303 	adds.w	r3, sl, r3
 80028e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028e6:	464b      	mov	r3, r9
 80028e8:	eb4b 0303 	adc.w	r3, fp, r3
 80028ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002900:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002904:	460b      	mov	r3, r1
 8002906:	18db      	adds	r3, r3, r3
 8002908:	643b      	str	r3, [r7, #64]	@ 0x40
 800290a:	4613      	mov	r3, r2
 800290c:	eb42 0303 	adc.w	r3, r2, r3
 8002910:	647b      	str	r3, [r7, #68]	@ 0x44
 8002912:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002916:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800291a:	f7fd fcc1 	bl	80002a0 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4611      	mov	r1, r2
 8002924:	4b3b      	ldr	r3, [pc, #236]	@ (8002a14 <UART_SetConfig+0x2d4>)
 8002926:	fba3 2301 	umull	r2, r3, r3, r1
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2264      	movs	r2, #100	@ 0x64
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	1acb      	subs	r3, r1, r3
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800293a:	4b36      	ldr	r3, [pc, #216]	@ (8002a14 <UART_SetConfig+0x2d4>)
 800293c:	fba3 2302 	umull	r2, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002948:	441c      	add	r4, r3
 800294a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800294e:	2200      	movs	r2, #0
 8002950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002954:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002958:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800295c:	4642      	mov	r2, r8
 800295e:	464b      	mov	r3, r9
 8002960:	1891      	adds	r1, r2, r2
 8002962:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002964:	415b      	adcs	r3, r3
 8002966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002968:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800296c:	4641      	mov	r1, r8
 800296e:	1851      	adds	r1, r2, r1
 8002970:	6339      	str	r1, [r7, #48]	@ 0x30
 8002972:	4649      	mov	r1, r9
 8002974:	414b      	adcs	r3, r1
 8002976:	637b      	str	r3, [r7, #52]	@ 0x34
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002984:	4659      	mov	r1, fp
 8002986:	00cb      	lsls	r3, r1, #3
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298e:	4651      	mov	r1, sl
 8002990:	00ca      	lsls	r2, r1, #3
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	4603      	mov	r3, r0
 8002998:	4642      	mov	r2, r8
 800299a:	189b      	adds	r3, r3, r2
 800299c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029a0:	464b      	mov	r3, r9
 80029a2:	460a      	mov	r2, r1
 80029a4:	eb42 0303 	adc.w	r3, r2, r3
 80029a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80029bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80029c0:	460b      	mov	r3, r1
 80029c2:	18db      	adds	r3, r3, r3
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029c6:	4613      	mov	r3, r2
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80029d6:	f7fd fc63 	bl	80002a0 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <UART_SetConfig+0x2d4>)
 80029e0:	fba3 1302 	umull	r1, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2164      	movs	r1, #100	@ 0x64
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	3332      	adds	r3, #50	@ 0x32
 80029f2:	4a08      	ldr	r2, [pc, #32]	@ (8002a14 <UART_SetConfig+0x2d4>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4422      	add	r2, r4
 8002a06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a08:	e106      	b.n	8002c18 <UART_SetConfig+0x4d8>
 8002a0a:	bf00      	nop
 8002a0c:	40011000 	.word	0x40011000
 8002a10:	40011400 	.word	0x40011400
 8002a14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a2a:	4642      	mov	r2, r8
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	1891      	adds	r1, r2, r2
 8002a30:	6239      	str	r1, [r7, #32]
 8002a32:	415b      	adcs	r3, r3
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	1854      	adds	r4, r2, r1
 8002a3e:	4649      	mov	r1, r9
 8002a40:	eb43 0501 	adc.w	r5, r3, r1
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	00eb      	lsls	r3, r5, #3
 8002a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a52:	00e2      	lsls	r2, r4, #3
 8002a54:	4614      	mov	r4, r2
 8002a56:	461d      	mov	r5, r3
 8002a58:	4643      	mov	r3, r8
 8002a5a:	18e3      	adds	r3, r4, r3
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a60:	464b      	mov	r3, r9
 8002a62:	eb45 0303 	adc.w	r3, r5, r3
 8002a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a86:	4629      	mov	r1, r5
 8002a88:	008b      	lsls	r3, r1, #2
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a90:	4621      	mov	r1, r4
 8002a92:	008a      	lsls	r2, r1, #2
 8002a94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a98:	f7fd fc02 	bl	80002a0 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4b60      	ldr	r3, [pc, #384]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	011c      	lsls	r4, r3, #4
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ab4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ab8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	1891      	adds	r1, r2, r2
 8002ac2:	61b9      	str	r1, [r7, #24]
 8002ac4:	415b      	adcs	r3, r3
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002acc:	4641      	mov	r1, r8
 8002ace:	1851      	adds	r1, r2, r1
 8002ad0:	6139      	str	r1, [r7, #16]
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	414b      	adcs	r3, r1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae4:	4659      	mov	r1, fp
 8002ae6:	00cb      	lsls	r3, r1, #3
 8002ae8:	4651      	mov	r1, sl
 8002aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aee:	4651      	mov	r1, sl
 8002af0:	00ca      	lsls	r2, r1, #3
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	4642      	mov	r2, r8
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b00:	464b      	mov	r3, r9
 8002b02:	460a      	mov	r2, r1
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b24:	4649      	mov	r1, r9
 8002b26:	008b      	lsls	r3, r1, #2
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b2e:	4641      	mov	r1, r8
 8002b30:	008a      	lsls	r2, r1, #2
 8002b32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b36:	f7fd fbb3 	bl	80002a0 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002b42:	fba3 2301 	umull	r2, r3, r3, r1
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2264      	movs	r2, #100	@ 0x64
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	1acb      	subs	r3, r1, r3
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	3332      	adds	r3, #50	@ 0x32
 8002b54:	4a33      	ldr	r2, [pc, #204]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b60:	441c      	add	r4, r3
 8002b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b66:	2200      	movs	r2, #0
 8002b68:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	1891      	adds	r1, r2, r2
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	415b      	adcs	r3, r3
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b80:	4641      	mov	r1, r8
 8002b82:	1851      	adds	r1, r2, r1
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	4649      	mov	r1, r9
 8002b88:	414b      	adcs	r3, r1
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b98:	4659      	mov	r1, fp
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4642      	mov	r2, r8
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	eb42 0303 	adc.w	r3, r2, r3
 8002bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002bd4:	4649      	mov	r1, r9
 8002bd6:	008b      	lsls	r3, r1, #2
 8002bd8:	4641      	mov	r1, r8
 8002bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bde:	4641      	mov	r1, r8
 8002be0:	008a      	lsls	r2, r1, #2
 8002be2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002be6:	f7fd fb5b 	bl	80002a0 <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2164      	movs	r1, #100	@ 0x64
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	3332      	adds	r3, #50	@ 0x32
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4422      	add	r2, r4
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c24:	51eb851f 	.word	0x51eb851f

08002c28 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <fs_open+0x16>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <fs_open+0x1c>
    return ERR_ARG;
 8002c3e:	f06f 030f 	mvn.w	r3, #15
 8002c42:	e028      	b.n	8002c96 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8002c44:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <fs_open+0x78>)
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e020      	b.n	8002c8c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6838      	ldr	r0, [r7, #0]
 8002c52:	f7fd fabd 	bl	80001d0 <strcmp>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d114      	bne.n	8002c86 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	7c1a      	ldrb	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e007      	b.n	8002c96 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1db      	bne.n	8002c4a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8002c92:	f06f 0305 	mvn.w	r3, #5
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	08014374 	.word	0x08014374

08002ca4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	1ad3      	subs	r3, r2, r3
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8002cde:	222c      	movs	r2, #44	@ 0x2c
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f00c f90b 	bl	800eefe <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8002cf6:	202c      	movs	r0, #44	@ 0x2c
 8002cf8:	f001 f8ce 	bl	8003e98 <mem_malloc>
 8002cfc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <http_state_alloc+0x1a>
    http_state_init(ret);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ffe6 	bl	8002cd6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8002d0a:	687b      	ldr	r3, [r7, #4]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ffbb 	bl	8002ca4 <fs_close>
    hs->handle = NULL;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <http_state_eof+0x38>
    pbuf_free(hs->req);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f002 f889 	bl	8004e58 <pbuf_free>
    hs->req = NULL;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <http_state_free+0x1a>
    http_state_eof(hs);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffd6 	bl	8002d14 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 ff2f 	bl	8003bcc <mem_free>
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <http_write+0x22>
 8002d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e40 <http_write+0xc8>)
 8002d8e:	f240 2219 	movw	r2, #537	@ 0x219
 8002d92:	492c      	ldr	r1, [pc, #176]	@ (8002e44 <http_write+0xcc>)
 8002d94:	482c      	ldr	r0, [pc, #176]	@ (8002e48 <http_write+0xd0>)
 8002d96:	f00c f84d 	bl	800ee34 <iprintf>
  len = *length;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8002da0:	8afb      	ldrh	r3, [r7, #22]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <http_write+0x32>
    return ERR_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e045      	b.n	8002e36 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002db0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8002db2:	8aba      	ldrh	r2, [r7, #20]
 8002db4:	8afb      	ldrh	r3, [r7, #22]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d201      	bcs.n	8002dbe <http_write+0x46>
    len = max_len;
 8002dba:	8abb      	ldrh	r3, [r7, #20]
 8002dbc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8002dc6:	8afa      	ldrh	r2, [r7, #22]
 8002dc8:	8abb      	ldrh	r3, [r7, #20]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d901      	bls.n	8002dd2 <http_write+0x5a>
    len = max_len;
 8002dce:	8abb      	ldrh	r3, [r7, #20]
 8002dd0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	8afa      	ldrh	r2, [r7, #22]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f006 fdc1 	bl	8009960 <tcp_write>
 8002dde:	4603      	mov	r3, r0
 8002de0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8002de2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d10f      	bne.n	8002e0c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d004      	beq.n	8002e00 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d902      	bls.n	8002e06 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8002e00:	2301      	movs	r3, #1
 8002e02:	82fb      	strh	r3, [r7, #22]
 8002e04:	e002      	b.n	8002e0c <http_write+0x94>
      } else {
        len /= 2;
 8002e06:	8afb      	ldrh	r3, [r7, #22]
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8002e0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d102      	bne.n	8002e1c <http_write+0xa4>
 8002e16:	8afb      	ldrh	r3, [r7, #22]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d8da      	bhi.n	8002dd2 <http_write+0x5a>

  if (err == ERR_OK) {
 8002e1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8afa      	ldrh	r2, [r7, #22]
 8002e28:	801a      	strh	r2, [r3, #0]
 8002e2a:	e002      	b.n	8002e32 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8002e32:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	0800fcdc 	.word	0x0800fcdc
 8002e44:	0800fd14 	.word	0x0800fd14
 8002e48:	0800fd24 	.word	0x0800fd24

08002e4c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f003 fe43 	bl	8006ae8 <tcp_arg>
  altcp_recv(pcb, NULL);
 8002e62:	2100      	movs	r1, #0
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f003 fe51 	bl	8006b0c <tcp_recv>
  altcp_err(pcb, NULL);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f003 fe91 	bl	8006b94 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f003 fec6 	bl	8006c08 <tcp_poll>
  altcp_sent(pcb, NULL);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f003 fe66 	bl	8006b50 <tcp_sent>
  if (hs != NULL) {
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	f7ff ff62 	bl	8002d54 <http_state_free>
  }

  if (abort_conn) {
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d004      	beq.n	8002ea0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f002 fd66 	bl	8005968 <tcp_abort>
    return ERR_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e00f      	b.n	8002ec0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f002 fc77 	bl	8005794 <tcp_close>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8002eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	4904      	ldr	r1, [pc, #16]	@ (8002ec8 <http_close_or_abort_conn+0x7c>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f003 fea6 	bl	8006c08 <tcp_poll>
  }
  return err;
 8002ebc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	0800358f 	.word	0x0800358f

08002ecc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ffb6 	bl	8002e4c <http_close_or_abort_conn>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ffe8 	bl	8002ecc <http_close_conn>
  }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d105      	bne.n	8002f22 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8002f16:	6839      	ldr	r1, [r7, #0]
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ffe6 	bl	8002eea <http_eof>
    return 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e016      	b.n	8002f50 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fec6 	bl	8002cb8 <fs_bytes_left>
 8002f2c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dc05      	bgt.n	8002f40 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8002f34:	6839      	ldr	r1, [r7, #0]
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ffd7 	bl	8002eea <http_eof>
    return 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e007      	b.n	8002f50 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <http_check_eof+0x54>)
 8002f42:	f240 429d 	movw	r2, #1181	@ 0x49d
 8002f46:	4905      	ldr	r1, [pc, #20]	@ (8002f5c <http_check_eof+0x58>)
 8002f48:	4805      	ldr	r0, [pc, #20]	@ (8002f60 <http_check_eof+0x5c>)
 8002f4a:	f00b ff73 	bl	800ee34 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8002f4e:	2301      	movs	r3, #1
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	0800fcdc 	.word	0x0800fcdc
 8002f5c:	0800fd4c 	.word	0x0800fd4c
 8002f60:	0800fd24 	.word	0x0800fd24

08002f64 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d803      	bhi.n	8002f86 <http_send_data_nonssi+0x22>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	e001      	b.n	8002f8a <http_send_data_nonssi+0x26>
 8002f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f8a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6999      	ldr	r1, [r3, #24]
 8002f90:	f107 020c 	add.w	r2, r7, #12
 8002f94:	2300      	movs	r3, #0
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff feee 	bl	8002d78 <http_write>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8002fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	89ba      	ldrh	r2, [r7, #12]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	89ba      	ldrh	r2, [r7, #12]
 8002fbe:	1a9a      	subs	r2, r3, r2
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <http_send+0x18>
    return 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e025      	b.n	8003032 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff87 	bl	8002f04 <http_check_eof>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <http_send+0x32>
      return 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e018      	b.n	8003032 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ffae 	bl	8002f64 <http_send_data_nonssi>
 8003008:	4603      	mov	r3, r0
 800300a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <http_send+0x62>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fe4d 	bl	8002cb8 <fs_bytes_left>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	dc05      	bgt.n	8003030 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003024:	6839      	ldr	r1, [r7, #0]
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff5f 	bl	8002eea <http_eof>
    return 0;
 800302c:	2300      	movs	r3, #0
 800302e:	e000      	b.n	8003032 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	4a1c      	ldr	r2, [pc, #112]	@ (80030bc <http_get_404_file+0x80>)
 800304a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f7ff fde7 	bl	8002c28 <fs_open>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d024      	beq.n	80030b0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	4a15      	ldr	r2, [pc, #84]	@ (80030c0 <http_get_404_file+0x84>)
 800306a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f7ff fdd7 	bl	8002c28 <fs_open>
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d014      	beq.n	80030b0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4a0e      	ldr	r2, [pc, #56]	@ (80030c4 <http_get_404_file+0x88>)
 800308a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f7ff fdc7 	bl	8002c28 <fs_open>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
        return NULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e000      	b.n	80030b2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80030b0:	687b      	ldr	r3, [r7, #4]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	0800fd84 	.word	0x0800fd84
 80030c0:	0800fd90 	.word	0x0800fd90
 80030c4:	0800fd9c 	.word	0x0800fd9c

080030c8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08e      	sub	sp, #56	@ 0x38
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <http_parse_request+0x24>
 80030de:	4b65      	ldr	r3, [pc, #404]	@ (8003274 <http_parse_request+0x1ac>)
 80030e0:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 80030e4:	4964      	ldr	r1, [pc, #400]	@ (8003278 <http_parse_request+0x1b0>)
 80030e6:	4865      	ldr	r0, [pc, #404]	@ (800327c <http_parse_request+0x1b4>)
 80030e8:	f00b fea4 	bl	800ee34 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <http_parse_request+0x38>
 80030f2:	4b60      	ldr	r3, [pc, #384]	@ (8003274 <http_parse_request+0x1ac>)
 80030f4:	f240 72af 	movw	r2, #1967	@ 0x7af
 80030f8:	4961      	ldr	r1, [pc, #388]	@ (8003280 <http_parse_request+0x1b8>)
 80030fa:	4860      	ldr	r0, [pc, #384]	@ (800327c <http_parse_request+0x1b4>)
 80030fc:	f00b fe9a 	bl	800ee34 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d103      	bne.n	8003110 <http_parse_request+0x48>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8003110:	f06f 0307 	mvn.w	r3, #7
 8003114:	e0a9      	b.n	800326a <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003122:	621a      	str	r2, [r3, #32]
 8003124:	e005      	b.n	8003132 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800312c:	4618      	mov	r0, r3
 800312e:	f001 ff55 	bl	8004fdc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8003132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003134:	f001 ff30 	bl	8004f98 <pbuf_ref>

  if (hs->req->next != NULL) {
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d012      	beq.n	8003168 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	891b      	ldrh	r3, [r3, #8]
 8003148:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800314c:	4293      	cmp	r3, r2
 800314e:	bf28      	it	cs
 8003150:	4613      	movcs	r3, r2
 8003152:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6a18      	ldr	r0, [r3, #32]
 8003158:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800315a:	2300      	movs	r3, #0
 800315c:	4949      	ldr	r1, [pc, #292]	@ (8003284 <http_parse_request+0x1bc>)
 800315e:	f002 f865 	bl	800522c <pbuf_copy_partial>
    data = httpd_req_buf;
 8003162:	4b48      	ldr	r3, [pc, #288]	@ (8003284 <http_parse_request+0x1bc>)
 8003164:	637b      	str	r3, [r7, #52]	@ 0x34
 8003166:	e005      	b.n	8003174 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	895b      	ldrh	r3, [r3, #10]
 8003172:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8003174:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003176:	2b06      	cmp	r3, #6
 8003178:	d962      	bls.n	8003240 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800317a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800317c:	461a      	mov	r2, r3
 800317e:	4942      	ldr	r1, [pc, #264]	@ (8003288 <http_parse_request+0x1c0>)
 8003180:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003182:	f000 fb99 	bl	80038b8 <lwip_strnstr>
 8003186:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d058      	beq.n	8003240 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8003192:	2204      	movs	r2, #4
 8003194:	493d      	ldr	r1, [pc, #244]	@ (800328c <http_parse_request+0x1c4>)
 8003196:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003198:	f00b fec6 	bl	800ef28 <strncmp>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <http_parse_request+0x108>
        sp1 = data + 3;
 80031a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a4:	3303      	adds	r3, #3
 80031a6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	3301      	adds	r3, #1
 80031bc:	8b7a      	ldrh	r2, [r7, #26]
 80031be:	4934      	ldr	r1, [pc, #208]	@ (8003290 <http_parse_request+0x1c8>)
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fb79 	bl	80038b8 <lwip_strnstr>
 80031c6:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80031c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d111      	bne.n	80031f2 <http_parse_request+0x12a>
 80031ce:	e006      	b.n	80031de <http_parse_request+0x116>
        data[4] = 0;
 80031d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d2:	3304      	adds	r3, #4
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80031d8:	f06f 030f 	mvn.w	r3, #15
 80031dc:	e045      	b.n	800326a <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	8b7a      	ldrh	r2, [r7, #26]
 80031e4:	4928      	ldr	r1, [pc, #160]	@ (8003288 <http_parse_request+0x1c0>)
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fb66 	bl	80038b8 <lwip_strnstr>
 80031ec:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3301      	adds	r3, #1
 80031f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80031fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01e      	beq.n	8003240 <http_parse_request+0x178>
 8003202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	429a      	cmp	r2, r3
 8003208:	d91a      	bls.n	8003240 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800320a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800320c:	461a      	mov	r2, r3
 800320e:	4921      	ldr	r1, [pc, #132]	@ (8003294 <http_parse_request+0x1cc>)
 8003210:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003212:	f000 fb51 	bl	80038b8 <lwip_strnstr>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d011      	beq.n	8003240 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	3301      	adds	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8003228:	8b3b      	ldrh	r3, [r7, #24]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4413      	add	r3, r2
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8003232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003234:	6979      	ldr	r1, [r7, #20]
 8003236:	68b8      	ldr	r0, [r7, #8]
 8003238:	f000 f82e 	bl	8003298 <http_find_file>
 800323c:	4603      	mov	r3, r0
 800323e:	e014      	b.n	800326a <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4618      	mov	r0, r3
 8003246:	f001 fe8f 	bl	8004f68 <pbuf_clen>
 800324a:	4603      	mov	r3, r0
 800324c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	891b      	ldrh	r3, [r3, #8]
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003258:	d205      	bcs.n	8003266 <http_parse_request+0x19e>
 800325a:	8a7b      	ldrh	r3, [r7, #18]
 800325c:	2b05      	cmp	r3, #5
 800325e:	d802      	bhi.n	8003266 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8003260:	f06f 0304 	mvn.w	r3, #4
 8003264:	e001      	b.n	800326a <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8003266:	f06f 030f 	mvn.w	r3, #15
  }
}
 800326a:	4618      	mov	r0, r3
 800326c:	3738      	adds	r7, #56	@ 0x38
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	0800fcdc 	.word	0x0800fcdc
 8003278:	0800fda8 	.word	0x0800fda8
 800327c:	0800fd24 	.word	0x0800fd24
 8003280:	0800fdb4 	.word	0x0800fdb4
 8003284:	20000090 	.word	0x20000090
 8003288:	0800fdc0 	.word	0x0800fdc0
 800328c:	0800fdc4 	.word	0x0800fdc4
 8003290:	0800fdcc 	.word	0x0800fdcc
 8003294:	0800fdd0 	.word	0x0800fdd0

08003298 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b092      	sub	sp, #72	@ 0x48
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fc ff95 	bl	80001e4 <strlen>
 80032ba:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80032bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d06b      	beq.n	800339a <http_find_file+0x102>
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80032ce:	d164      	bne.n	800339a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80032d0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80032d2:	4a53      	ldr	r2, [pc, #332]	@ (8003420 <http_find_file+0x188>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d102      	bne.n	80032de <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d15d      	bne.n	800339a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80032de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80032e4:	bf28      	it	cs
 80032e6:	233f      	movcs	r3, #63	@ 0x3f
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f4:	4619      	mov	r1, r3
 80032f6:	484a      	ldr	r0, [pc, #296]	@ (8003420 <http_find_file+0x188>)
 80032f8:	f00b fe95 	bl	800f026 <memcpy>
      http_uri_buf[copy_len] = 0;
 80032fc:	4a48      	ldr	r2, [pc, #288]	@ (8003420 <http_find_file+0x188>)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	4413      	add	r3, r2
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8003306:	2300      	movs	r3, #0
 8003308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800330a:	e043      	b.n	8003394 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d028      	beq.n	8003364 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8003318:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01e      	beq.n	800335e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8003320:	4a40      	ldr	r2, [pc, #256]	@ (8003424 <http_find_file+0x18c>)
 8003322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fc ff5b 	bl	80001e4 <strlen>
 800332e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	4293      	cmp	r3, r2
 8003336:	bf28      	it	cs
 8003338:	4613      	movcs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	4a38      	ldr	r2, [pc, #224]	@ (8003420 <http_find_file+0x188>)
 8003340:	1898      	adds	r0, r3, r2
 8003342:	4a38      	ldr	r2, [pc, #224]	@ (8003424 <http_find_file+0x18c>)
 8003344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003346:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4619      	mov	r1, r3
 800334e:	f00b fe6a 	bl	800f026 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8003352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4413      	add	r3, r2
 8003358:	4a31      	ldr	r2, [pc, #196]	@ (8003420 <http_find_file+0x188>)
 800335a:	2100      	movs	r1, #0
 800335c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800335e:	4b30      	ldr	r3, [pc, #192]	@ (8003420 <http_find_file+0x188>)
 8003360:	633b      	str	r3, [r7, #48]	@ 0x30
 8003362:	e004      	b.n	800336e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8003364:	4a2f      	ldr	r2, [pc, #188]	@ (8003424 <http_find_file+0x18c>)
 8003366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800336c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fc58 	bl	8002c28 <fs_open>
 8003378:	4603      	mov	r3, r0
 800337a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <http_find_file+0xf6>
        uri = file_name;
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800338c:	e005      	b.n	800339a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800338e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003390:	3301      	adds	r3, #1
 8003392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003396:	2b04      	cmp	r3, #4
 8003398:	d9b8      	bls.n	800330c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800339a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339c:	2b00      	cmp	r3, #0
 800339e:	d124      	bne.n	80033ea <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	213f      	movs	r1, #63	@ 0x3f
 80033a4:	4618      	mov	r0, r3
 80033a6:	f00b fdb2 	bl	800ef0e <strchr>
 80033aa:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 80033ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80033b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
      params++;
 80033b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ba:	3301      	adds	r3, #1
 80033bc:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fc2f 	bl	8002c28 <fs_open>
 80033ca:	4603      	mov	r3, r0
 80033cc:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80033ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <http_find_file+0x144>
      file = &hs->file_handle;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033da:	e006      	b.n	80033ea <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 80033dc:	f107 0308 	add.w	r3, r7, #8
 80033e0:	4619      	mov	r1, r3
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f7ff fe2a 	bl	800303c <http_get_404_file>
 80033e8:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80033ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	4619      	mov	r1, r3
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff fe20 	bl	800303c <http_get_404_file>
 80033fc:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	4613      	mov	r3, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f809 	bl	8003428 <http_init_file>
 8003416:	4603      	mov	r3, r0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3740      	adds	r7, #64	@ 0x40
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000490 	.word	0x20000490
 8003424:	08014388 	.word	0x08014388

08003428 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d05c      	beq.n	80034f6 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d106      	bne.n	8003452 <http_init_file+0x2a>
 8003444:	4b35      	ldr	r3, [pc, #212]	@ (800351c <http_init_file+0xf4>)
 8003446:	f640 120b 	movw	r2, #2315	@ 0x90b
 800344a:	4935      	ldr	r1, [pc, #212]	@ (8003520 <http_init_file+0xf8>)
 800344c:	4835      	ldr	r0, [pc, #212]	@ (8003524 <http_init_file+0xfc>)
 800344e:	f00b fcf1 	bl	800ee34 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	da06      	bge.n	8003476 <http_init_file+0x4e>
 8003468:	4b2c      	ldr	r3, [pc, #176]	@ (800351c <http_init_file+0xf4>)
 800346a:	f640 1234 	movw	r2, #2356	@ 0x934
 800346e:	492e      	ldr	r1, [pc, #184]	@ (8003528 <http_init_file+0x100>)
 8003470:	482c      	ldr	r0, [pc, #176]	@ (8003524 <http_init_file+0xfc>)
 8003472:	f00b fcdf 	bl	800ee34 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	7c1b      	ldrb	r3, [r3, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <http_init_file+0x7c>
 8003496:	4b21      	ldr	r3, [pc, #132]	@ (800351c <http_init_file+0xf4>)
 8003498:	f640 1243 	movw	r2, #2371	@ 0x943
 800349c:	4923      	ldr	r1, [pc, #140]	@ (800352c <http_init_file+0x104>)
 800349e:	4821      	ldr	r0, [pc, #132]	@ (8003524 <http_init_file+0xfc>)
 80034a0:	f00b fcc8 	bl	800ee34 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d032      	beq.n	8003510 <http_init_file+0xe8>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	7c1b      	ldrb	r3, [r3, #16]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02b      	beq.n	8003510 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6998      	ldr	r0, [r3, #24]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	461a      	mov	r2, r3
 80034c2:	491b      	ldr	r1, [pc, #108]	@ (8003530 <http_init_file+0x108>)
 80034c4:	f000 f9f8 	bl	80038b8 <lwip_strnstr>
 80034c8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01f      	beq.n	8003510 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	1d1a      	adds	r2, r3, #4
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	699a      	ldr	r2, [r3, #24]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	441a      	add	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad2      	subs	r2, r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80034f4:	e00c      	b.n	8003510 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	0800fcdc 	.word	0x0800fcdc
 8003520:	0800fdd8 	.word	0x0800fdd8
 8003524:	0800fd24 	.word	0x0800fd24
 8003528:	0800fdec 	.word	0x0800fdec
 800352c:	0800fe0c 	.word	0x0800fe0c
 8003530:	0800fdd0 	.word	0x0800fdd0

08003534 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <http_err+0x1c>
    http_state_free(hs);
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff fc02 	bl	8002d54 <http_state_free>
  }
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <http_sent+0x1c>
    return ERR_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e008      	b.n	8003586 <http_sent+0x2e>
  }

  hs->retries = 0;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800357c:	6979      	ldr	r1, [r7, #20]
 800357e:	68b8      	ldr	r0, [r7, #8]
 8003580:	f7ff fd25 	bl	8002fce <http_send>

  return ERR_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80035a2:	2100      	movs	r1, #0
 80035a4:	6838      	ldr	r0, [r7, #0]
 80035a6:	f7ff fc91 	bl	8002ecc <http_close_conn>
 80035aa:	4603      	mov	r3, r0
 80035ac:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e021      	b.n	80035f6 <http_poll+0x68>
  } else {
    hs->retries++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035b8:	3301      	adds	r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d105      	bne.n	80035d8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80035cc:	68f9      	ldr	r1, [r7, #12]
 80035ce:	6838      	ldr	r0, [r7, #0]
 80035d0:	f7ff fc7c 	bl	8002ecc <http_close_conn>
      return ERR_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e00e      	b.n	80035f6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	6838      	ldr	r0, [r7, #0]
 80035e4:	f7ff fcf3 	bl	8002fce <http_send>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80035ee:	6838      	ldr	r0, [r7, #0]
 80035f0:	f006 ffa0 	bl	800a534 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8003612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <http_recv+0x26>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <http_recv+0x26>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d111      	bne.n	800364a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	891b      	ldrh	r3, [r3, #8]
 8003630:	4619      	mov	r1, r3
 8003632:	68b8      	ldr	r0, [r7, #8]
 8003634:	f002 fb72 	bl	8005d1c <tcp_recved>
      pbuf_free(p);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f001 fc0d 	bl	8004e58 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800363e:	6979      	ldr	r1, [r7, #20]
 8003640:	68b8      	ldr	r0, [r7, #8]
 8003642:	f7ff fc43 	bl	8002ecc <http_close_conn>
    return ERR_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e055      	b.n	80036f6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	891b      	ldrh	r3, [r3, #8]
 800364e:	4619      	mov	r1, r3
 8003650:	68b8      	ldr	r0, [r7, #8]
 8003652:	f002 fb63 	bl	8005d1c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d147      	bne.n	80036ee <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	6979      	ldr	r1, [r7, #20]
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fd30 	bl	80030c8 <http_parse_request>
 8003668:	4603      	mov	r3, r0
 800366a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800366c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d015      	beq.n	80036a0 <http_recv+0xa0>
 8003674:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003678:	f113 0f05 	cmn.w	r3, #5
 800367c:	d010      	beq.n	80036a0 <http_recv+0xa0>
 800367e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003682:	f113 0f10 	cmn.w	r3, #16
 8003686:	d00b      	beq.n	80036a0 <http_recv+0xa0>
 8003688:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800368c:	f113 0f08 	cmn.w	r3, #8
 8003690:	d006      	beq.n	80036a0 <http_recv+0xa0>
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <http_recv+0x100>)
 8003694:	f640 2204 	movw	r2, #2564	@ 0xa04
 8003698:	491a      	ldr	r1, [pc, #104]	@ (8003704 <http_recv+0x104>)
 800369a:	481b      	ldr	r0, [pc, #108]	@ (8003708 <http_recv+0x108>)
 800369c:	f00b fbca 	bl	800ee34 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80036a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80036a4:	f113 0f05 	cmn.w	r3, #5
 80036a8:	d00b      	beq.n	80036c2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <http_recv+0xc2>
          pbuf_free(hs->req);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f001 fbce 	bl	8004e58 <pbuf_free>
          hs->req = NULL;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f001 fbc8 	bl	8004e58 <pbuf_free>
      if (parsed == ERR_OK) {
 80036c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80036d0:	6979      	ldr	r1, [r7, #20]
 80036d2:	68b8      	ldr	r0, [r7, #8]
 80036d4:	f7ff fc7b 	bl	8002fce <http_send>
 80036d8:	e00c      	b.n	80036f4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80036da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80036de:	f113 0f10 	cmn.w	r3, #16
 80036e2:	d107      	bne.n	80036f4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80036e4:	6979      	ldr	r1, [r7, #20]
 80036e6:	68b8      	ldr	r0, [r7, #8]
 80036e8:	f7ff fbf0 	bl	8002ecc <http_close_conn>
 80036ec:	e002      	b.n	80036f4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f001 fbb2 	bl	8004e58 <pbuf_free>
    }
  }
  return ERR_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	0800fcdc 	.word	0x0800fcdc
 8003704:	0800fe38 	.word	0x0800fe38
 8003708:	0800fd24 	.word	0x0800fd24

0800370c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	4613      	mov	r3, r2
 8003718:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <http_accept+0x1c>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <http_accept+0x22>
    return ERR_VAL;
 8003728:	f06f 0305 	mvn.w	r3, #5
 800372c:	e025      	b.n	800377a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800372e:	2101      	movs	r1, #1
 8003730:	68b8      	ldr	r0, [r7, #8]
 8003732:	f002 ffd9 	bl	80066e8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8003736:	f7ff fadb 	bl	8002cf0 <http_state_alloc>
 800373a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	e018      	b.n	800377a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800374e:	6979      	ldr	r1, [r7, #20]
 8003750:	68b8      	ldr	r0, [r7, #8]
 8003752:	f003 f9c9 	bl	8006ae8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8003756:	490b      	ldr	r1, [pc, #44]	@ (8003784 <http_accept+0x78>)
 8003758:	68b8      	ldr	r0, [r7, #8]
 800375a:	f003 f9d7 	bl	8006b0c <tcp_recv>
  altcp_err(pcb, http_err);
 800375e:	490a      	ldr	r1, [pc, #40]	@ (8003788 <http_accept+0x7c>)
 8003760:	68b8      	ldr	r0, [r7, #8]
 8003762:	f003 fa17 	bl	8006b94 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003766:	2204      	movs	r2, #4
 8003768:	4908      	ldr	r1, [pc, #32]	@ (800378c <http_accept+0x80>)
 800376a:	68b8      	ldr	r0, [r7, #8]
 800376c:	f003 fa4c 	bl	8006c08 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8003770:	4907      	ldr	r1, [pc, #28]	@ (8003790 <http_accept+0x84>)
 8003772:	68b8      	ldr	r0, [r7, #8]
 8003774:	f003 f9ec 	bl	8006b50 <tcp_sent>

  return ERR_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	08003601 	.word	0x08003601
 8003788:	08003535 	.word	0x08003535
 800378c:	0800358f 	.word	0x0800358f
 8003790:	08003559 	.word	0x08003559

08003794 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d029      	beq.n	80037fa <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80037a6:	2101      	movs	r1, #1
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f002 ff9d 	bl	80066e8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	461a      	mov	r2, r3
 80037b2:	4914      	ldr	r1, [pc, #80]	@ (8003804 <httpd_init_pcb+0x70>)
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f002 f8e3 	bl	8005980 <tcp_bind>
 80037ba:	4603      	mov	r3, r0
 80037bc:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80037be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <httpd_init_pcb+0x40>
 80037c6:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <httpd_init_pcb+0x74>)
 80037c8:	f640 2257 	movw	r2, #2647	@ 0xa57
 80037cc:	490f      	ldr	r1, [pc, #60]	@ (800380c <httpd_init_pcb+0x78>)
 80037ce:	4810      	ldr	r0, [pc, #64]	@ (8003810 <httpd_init_pcb+0x7c>)
 80037d0:	f00b fb30 	bl	800ee34 <iprintf>
    pcb = altcp_listen(pcb);
 80037d4:	21ff      	movs	r1, #255	@ 0xff
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f002 f98a 	bl	8005af0 <tcp_listen_with_backlog>
 80037dc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <httpd_init_pcb+0x5e>
 80037e4:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <httpd_init_pcb+0x74>)
 80037e6:	f640 2259 	movw	r2, #2649	@ 0xa59
 80037ea:	490a      	ldr	r1, [pc, #40]	@ (8003814 <httpd_init_pcb+0x80>)
 80037ec:	4808      	ldr	r0, [pc, #32]	@ (8003810 <httpd_init_pcb+0x7c>)
 80037ee:	f00b fb21 	bl	800ee34 <iprintf>
    altcp_accept(pcb, http_accept);
 80037f2:	4909      	ldr	r1, [pc, #36]	@ (8003818 <httpd_init_pcb+0x84>)
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f003 f9ef 	bl	8006bd8 <tcp_accept>
  }
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	08014480 	.word	0x08014480
 8003808:	0800fcdc 	.word	0x0800fcdc
 800380c:	0800fe64 	.word	0x0800fe64
 8003810:	0800fd24 	.word	0x0800fd24
 8003814:	0800fe80 	.word	0x0800fe80
 8003818:	0800370d 	.word	0x0800370d

0800381c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8003822:	202e      	movs	r0, #46	@ 0x2e
 8003824:	f003 f952 	bl	8006acc <tcp_new_ip_type>
 8003828:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <httpd_init+0x22>
 8003830:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <httpd_init+0x34>)
 8003832:	f640 2272 	movw	r2, #2674	@ 0xa72
 8003836:	4907      	ldr	r1, [pc, #28]	@ (8003854 <httpd_init+0x38>)
 8003838:	4807      	ldr	r0, [pc, #28]	@ (8003858 <httpd_init+0x3c>)
 800383a:	f00b fafb 	bl	800ee34 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800383e:	2150      	movs	r1, #80	@ 0x50
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ffa7 	bl	8003794 <httpd_init_pcb>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	0800fcdc 	.word	0x0800fcdc
 8003854:	0800fea0 	.word	0x0800fea0
 8003858:	0800fd24 	.word	0x0800fd24

0800385c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	b21a      	sxth	r2, r3
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	b29b      	uxth	r3, r3
 8003872:	b21b      	sxth	r3, r3
 8003874:	4313      	orrs	r3, r2
 8003876:	b21b      	sxth	r3, r3
 8003878:	b29b      	uxth	r3, r3
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	061a      	lsls	r2, r3, #24
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	4313      	orrs	r3, r2
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80038c4:	68b8      	ldr	r0, [r7, #8]
 80038c6:	f7fc fc8d 	bl	80001e4 <strlen>
 80038ca:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	e022      	b.n	800391c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e012      	b.n	8003902 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d109      	bne.n	80038fc <lwip_strnstr+0x44>
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	6978      	ldr	r0, [r7, #20]
 80038ee:	f00b fb1b 	bl	800ef28 <strncmp>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	e00f      	b.n	800391c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3301      	adds	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <lwip_strnstr+0x62>
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	441a      	add	r2, r3
 8003910:	68f9      	ldr	r1, [r7, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	440b      	add	r3, r1
 8003916:	429a      	cmp	r2, r3
 8003918:	d9e0      	bls.n	80038dc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800392e:	f000 f8d5 	bl	8003adc <mem_init>
  memp_init();
 8003932:	f000 fbdb 	bl	80040ec <memp_init>
  pbuf_init();
  netif_init();
 8003936:	f000 fcd9 	bl	80042ec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800393a:	f007 febb 	bl	800b6b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800393e:	f001 fd19 	bl	8005374 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003942:	f007 fe2d 	bl	800b5a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800395a:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <ptr_to_mem+0x20>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	4413      	add	r3, r2
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000b3c 	.word	0x20000b3c

08003974 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <mem_to_ptr+0x20>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	b29b      	uxth	r3, r3
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	20000b3c 	.word	0x20000b3c

08003998 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80039a0:	4b45      	ldr	r3, [pc, #276]	@ (8003ab8 <plug_holes+0x120>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d206      	bcs.n	80039b8 <plug_holes+0x20>
 80039aa:	4b44      	ldr	r3, [pc, #272]	@ (8003abc <plug_holes+0x124>)
 80039ac:	f240 12df 	movw	r2, #479	@ 0x1df
 80039b0:	4943      	ldr	r1, [pc, #268]	@ (8003ac0 <plug_holes+0x128>)
 80039b2:	4844      	ldr	r0, [pc, #272]	@ (8003ac4 <plug_holes+0x12c>)
 80039b4:	f00b fa3e 	bl	800ee34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80039b8:	4b43      	ldr	r3, [pc, #268]	@ (8003ac8 <plug_holes+0x130>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d306      	bcc.n	80039d0 <plug_holes+0x38>
 80039c2:	4b3e      	ldr	r3, [pc, #248]	@ (8003abc <plug_holes+0x124>)
 80039c4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80039c8:	4940      	ldr	r1, [pc, #256]	@ (8003acc <plug_holes+0x134>)
 80039ca:	483e      	ldr	r0, [pc, #248]	@ (8003ac4 <plug_holes+0x12c>)
 80039cc:	f00b fa32 	bl	800ee34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	791b      	ldrb	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <plug_holes+0x4e>
 80039d8:	4b38      	ldr	r3, [pc, #224]	@ (8003abc <plug_holes+0x124>)
 80039da:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80039de:	493c      	ldr	r1, [pc, #240]	@ (8003ad0 <plug_holes+0x138>)
 80039e0:	4838      	ldr	r0, [pc, #224]	@ (8003ac4 <plug_holes+0x12c>)
 80039e2:	f00b fa27 	bl	800ee34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80039ee:	d906      	bls.n	80039fe <plug_holes+0x66>
 80039f0:	4b32      	ldr	r3, [pc, #200]	@ (8003abc <plug_holes+0x124>)
 80039f2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80039f6:	4937      	ldr	r1, [pc, #220]	@ (8003ad4 <plug_holes+0x13c>)
 80039f8:	4832      	ldr	r0, [pc, #200]	@ (8003ac4 <plug_holes+0x12c>)
 80039fa:	f00b fa1b 	bl	800ee34 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ffa4 	bl	8003950 <ptr_to_mem>
 8003a08:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d024      	beq.n	8003a5c <plug_holes+0xc4>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	791b      	ldrb	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d120      	bne.n	8003a5c <plug_holes+0xc4>
 8003a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <plug_holes+0x130>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d01b      	beq.n	8003a5c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003a24:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad8 <plug_holes+0x140>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d102      	bne.n	8003a34 <plug_holes+0x9c>
      lfree = mem;
 8003a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad8 <plug_holes+0x140>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003a44:	d00a      	beq.n	8003a5c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff80 	bl	8003950 <ptr_to_mem>
 8003a50:	4604      	mov	r4, r0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ff8e 	bl	8003974 <mem_to_ptr>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	885b      	ldrh	r3, [r3, #2]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff75 	bl	8003950 <ptr_to_mem>
 8003a66:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d01f      	beq.n	8003ab0 <plug_holes+0x118>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	791b      	ldrb	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11b      	bne.n	8003ab0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003a78:	4b17      	ldr	r3, [pc, #92]	@ (8003ad8 <plug_holes+0x140>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d102      	bne.n	8003a88 <plug_holes+0xf0>
      lfree = pmem;
 8003a82:	4a15      	ldr	r2, [pc, #84]	@ (8003ad8 <plug_holes+0x140>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003a98:	d00a      	beq.n	8003ab0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ff56 	bl	8003950 <ptr_to_mem>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	68b8      	ldr	r0, [r7, #8]
 8003aa8:	f7ff ff64 	bl	8003974 <mem_to_ptr>
 8003aac:	4603      	mov	r3, r0
 8003aae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd90      	pop	{r4, r7, pc}
 8003ab8:	20000b3c 	.word	0x20000b3c
 8003abc:	0800febc 	.word	0x0800febc
 8003ac0:	0800feec 	.word	0x0800feec
 8003ac4:	0800ff04 	.word	0x0800ff04
 8003ac8:	20000b40 	.word	0x20000b40
 8003acc:	0800ff2c 	.word	0x0800ff2c
 8003ad0:	0800ff48 	.word	0x0800ff48
 8003ad4:	0800ff64 	.word	0x0800ff64
 8003ad8:	20000b44 	.word	0x20000b44

08003adc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003ae2:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <mem_init+0x68>)
 8003ae4:	3303      	adds	r3, #3
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b16      	ldr	r3, [pc, #88]	@ (8003b48 <mem_init+0x6c>)
 8003aee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003af0:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <mem_init+0x6c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003afc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003b0a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8003b0e:	f7ff ff1f 	bl	8003950 <ptr_to_mem>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4a0d      	ldr	r2, [pc, #52]	@ (8003b4c <mem_init+0x70>)
 8003b16:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003b18:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <mem_init+0x70>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <mem_init+0x70>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003b28:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003b2a:	4b08      	ldr	r3, [pc, #32]	@ (8003b4c <mem_init+0x70>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8003b32:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003b34:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <mem_init+0x6c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a05      	ldr	r2, [pc, #20]	@ (8003b50 <mem_init+0x74>)
 8003b3a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200004e8 	.word	0x200004e8
 8003b48:	20000b3c 	.word	0x20000b3c
 8003b4c:	20000b40 	.word	0x20000b40
 8003b50:	20000b44 	.word	0x20000b44

08003b54 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff09 	bl	8003974 <mem_to_ptr>
 8003b62:	4603      	mov	r3, r0
 8003b64:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fef0 	bl	8003950 <ptr_to_mem>
 8003b70:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	885b      	ldrh	r3, [r3, #2]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff feea 	bl	8003950 <ptr_to_mem>
 8003b7c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003b86:	d818      	bhi.n	8003bba <mem_link_valid+0x66>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	885b      	ldrh	r3, [r3, #2]
 8003b8c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003b90:	d813      	bhi.n	8003bba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003b96:	8afa      	ldrh	r2, [r7, #22]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d004      	beq.n	8003ba6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	8afa      	ldrh	r2, [r7, #22]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d109      	bne.n	8003bba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003ba6:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <mem_link_valid+0x74>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d006      	beq.n	8003bbe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	885b      	ldrh	r3, [r3, #2]
 8003bb4:	8afa      	ldrh	r2, [r7, #22]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d001      	beq.n	8003bbe <mem_link_valid+0x6a>
    return 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e000      	b.n	8003bc0 <mem_link_valid+0x6c>
  }
  return 1;
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000b40 	.word	0x20000b40

08003bcc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04c      	beq.n	8003c74 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003be4:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <mem_free+0xb0>)
 8003be6:	f240 2273 	movw	r2, #627	@ 0x273
 8003bea:	4925      	ldr	r1, [pc, #148]	@ (8003c80 <mem_free+0xb4>)
 8003bec:	4825      	ldr	r0, [pc, #148]	@ (8003c84 <mem_free+0xb8>)
 8003bee:	f00b f921 	bl	800ee34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003bf2:	e040      	b.n	8003c76 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3b08      	subs	r3, #8
 8003bf8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003bfa:	4b23      	ldr	r3, [pc, #140]	@ (8003c88 <mem_free+0xbc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d306      	bcc.n	8003c12 <mem_free+0x46>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f103 020c 	add.w	r2, r3, #12
 8003c0a:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <mem_free+0xc0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d907      	bls.n	8003c22 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003c12:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <mem_free+0xb0>)
 8003c14:	f240 227f 	movw	r2, #639	@ 0x27f
 8003c18:	491d      	ldr	r1, [pc, #116]	@ (8003c90 <mem_free+0xc4>)
 8003c1a:	481a      	ldr	r0, [pc, #104]	@ (8003c84 <mem_free+0xb8>)
 8003c1c:	f00b f90a 	bl	800ee34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c20:	e029      	b.n	8003c76 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	791b      	ldrb	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003c2a:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <mem_free+0xb0>)
 8003c2c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8003c30:	4918      	ldr	r1, [pc, #96]	@ (8003c94 <mem_free+0xc8>)
 8003c32:	4814      	ldr	r0, [pc, #80]	@ (8003c84 <mem_free+0xb8>)
 8003c34:	f00b f8fe 	bl	800ee34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c38:	e01d      	b.n	8003c76 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff8a 	bl	8003b54 <mem_link_valid>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <mem_free+0xb0>)
 8003c48:	f240 2295 	movw	r2, #661	@ 0x295
 8003c4c:	4912      	ldr	r1, [pc, #72]	@ (8003c98 <mem_free+0xcc>)
 8003c4e:	480d      	ldr	r0, [pc, #52]	@ (8003c84 <mem_free+0xb8>)
 8003c50:	f00b f8f0 	bl	800ee34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c54:	e00f      	b.n	8003c76 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <mem_free+0xd0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d202      	bcs.n	8003c6c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003c66:	4a0d      	ldr	r2, [pc, #52]	@ (8003c9c <mem_free+0xd0>)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff fe93 	bl	8003998 <plug_holes>
 8003c72:	e000      	b.n	8003c76 <mem_free+0xaa>
    return;
 8003c74:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	0800febc 	.word	0x0800febc
 8003c80:	0800ff90 	.word	0x0800ff90
 8003c84:	0800ff04 	.word	0x0800ff04
 8003c88:	20000b3c 	.word	0x20000b3c
 8003c8c:	20000b40 	.word	0x20000b40
 8003c90:	0800ffb4 	.word	0x0800ffb4
 8003c94:	0800ffd0 	.word	0x0800ffd0
 8003c98:	0800fff8 	.word	0x0800fff8
 8003c9c:	20000b44 	.word	0x20000b44

08003ca0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003cac:	887b      	ldrh	r3, [r7, #2]
 8003cae:	3303      	adds	r3, #3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003cb8:	8bfb      	ldrh	r3, [r7, #30]
 8003cba:	2b0b      	cmp	r3, #11
 8003cbc:	d801      	bhi.n	8003cc2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003cc2:	8bfb      	ldrh	r3, [r7, #30]
 8003cc4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003cc8:	d803      	bhi.n	8003cd2 <mem_trim+0x32>
 8003cca:	8bfa      	ldrh	r2, [r7, #30]
 8003ccc:	887b      	ldrh	r3, [r7, #2]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d201      	bcs.n	8003cd6 <mem_trim+0x36>
    return NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e0cc      	b.n	8003e70 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003cd6:	4b68      	ldr	r3, [pc, #416]	@ (8003e78 <mem_trim+0x1d8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d304      	bcc.n	8003cea <mem_trim+0x4a>
 8003ce0:	4b66      	ldr	r3, [pc, #408]	@ (8003e7c <mem_trim+0x1dc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d306      	bcc.n	8003cf8 <mem_trim+0x58>
 8003cea:	4b65      	ldr	r3, [pc, #404]	@ (8003e80 <mem_trim+0x1e0>)
 8003cec:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8003cf0:	4964      	ldr	r1, [pc, #400]	@ (8003e84 <mem_trim+0x1e4>)
 8003cf2:	4865      	ldr	r0, [pc, #404]	@ (8003e88 <mem_trim+0x1e8>)
 8003cf4:	f00b f89e 	bl	800ee34 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8003e78 <mem_trim+0x1d8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d304      	bcc.n	8003d0c <mem_trim+0x6c>
 8003d02:	4b5e      	ldr	r3, [pc, #376]	@ (8003e7c <mem_trim+0x1dc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d301      	bcc.n	8003d10 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	e0af      	b.n	8003e70 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b08      	subs	r3, #8
 8003d14:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003d16:	69b8      	ldr	r0, [r7, #24]
 8003d18:	f7ff fe2c 	bl	8003974 <mem_to_ptr>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	8afb      	ldrh	r3, [r7, #22]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b08      	subs	r3, #8
 8003d2c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003d2e:	8bfa      	ldrh	r2, [r7, #30]
 8003d30:	8abb      	ldrh	r3, [r7, #20]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d906      	bls.n	8003d44 <mem_trim+0xa4>
 8003d36:	4b52      	ldr	r3, [pc, #328]	@ (8003e80 <mem_trim+0x1e0>)
 8003d38:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8003d3c:	4953      	ldr	r1, [pc, #332]	@ (8003e8c <mem_trim+0x1ec>)
 8003d3e:	4852      	ldr	r0, [pc, #328]	@ (8003e88 <mem_trim+0x1e8>)
 8003d40:	f00b f878 	bl	800ee34 <iprintf>
  if (newsize > size) {
 8003d44:	8bfa      	ldrh	r2, [r7, #30]
 8003d46:	8abb      	ldrh	r3, [r7, #20]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d901      	bls.n	8003d50 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e08f      	b.n	8003e70 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003d50:	8bfa      	ldrh	r2, [r7, #30]
 8003d52:	8abb      	ldrh	r3, [r7, #20]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d101      	bne.n	8003d5c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	e089      	b.n	8003e70 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fdf5 	bl	8003950 <ptr_to_mem>
 8003d66:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	791b      	ldrb	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d13f      	bne.n	8003df0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003d78:	d106      	bne.n	8003d88 <mem_trim+0xe8>
 8003d7a:	4b41      	ldr	r3, [pc, #260]	@ (8003e80 <mem_trim+0x1e0>)
 8003d7c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8003d80:	4943      	ldr	r1, [pc, #268]	@ (8003e90 <mem_trim+0x1f0>)
 8003d82:	4841      	ldr	r0, [pc, #260]	@ (8003e88 <mem_trim+0x1e8>)
 8003d84:	f00b f856 	bl	800ee34 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003d8e:	8afa      	ldrh	r2, [r7, #22]
 8003d90:	8bfb      	ldrh	r3, [r7, #30]
 8003d92:	4413      	add	r3, r2
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3308      	adds	r3, #8
 8003d98:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e94 <mem_trim+0x1f4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d106      	bne.n	8003db2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003da4:	89fb      	ldrh	r3, [r7, #14]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fdd2 	bl	8003950 <ptr_to_mem>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4a39      	ldr	r2, [pc, #228]	@ (8003e94 <mem_trim+0x1f4>)
 8003db0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003db2:	89fb      	ldrh	r3, [r7, #14]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fdcb 	bl	8003950 <ptr_to_mem>
 8003dba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	89ba      	ldrh	r2, [r7, #12]
 8003dc6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	8afa      	ldrh	r2, [r7, #22]
 8003dcc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	89fa      	ldrh	r2, [r7, #14]
 8003dd2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003ddc:	d047      	beq.n	8003e6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fdb4 	bl	8003950 <ptr_to_mem>
 8003de8:	4602      	mov	r2, r0
 8003dea:	89fb      	ldrh	r3, [r7, #14]
 8003dec:	8053      	strh	r3, [r2, #2]
 8003dee:	e03e      	b.n	8003e6e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003df0:	8bfb      	ldrh	r3, [r7, #30]
 8003df2:	f103 0214 	add.w	r2, r3, #20
 8003df6:	8abb      	ldrh	r3, [r7, #20]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d838      	bhi.n	8003e6e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003dfc:	8afa      	ldrh	r2, [r7, #22]
 8003dfe:	8bfb      	ldrh	r3, [r7, #30]
 8003e00:	4413      	add	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3308      	adds	r3, #8
 8003e06:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e10:	d106      	bne.n	8003e20 <mem_trim+0x180>
 8003e12:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <mem_trim+0x1e0>)
 8003e14:	f240 3216 	movw	r2, #790	@ 0x316
 8003e18:	491d      	ldr	r1, [pc, #116]	@ (8003e90 <mem_trim+0x1f0>)
 8003e1a:	481b      	ldr	r0, [pc, #108]	@ (8003e88 <mem_trim+0x1e8>)
 8003e1c:	f00b f80a 	bl	800ee34 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003e20:	89fb      	ldrh	r3, [r7, #14]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fd94 	bl	8003950 <ptr_to_mem>
 8003e28:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <mem_trim+0x1f4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d202      	bcs.n	8003e3a <mem_trim+0x19a>
      lfree = mem2;
 8003e34:	4a17      	ldr	r2, [pc, #92]	@ (8003e94 <mem_trim+0x1f4>)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	8afa      	ldrh	r2, [r7, #22]
 8003e4c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	89fa      	ldrh	r2, [r7, #14]
 8003e52:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003e5c:	d007      	beq.n	8003e6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fd74 	bl	8003950 <ptr_to_mem>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	89fb      	ldrh	r3, [r7, #14]
 8003e6c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003e6e:	687b      	ldr	r3, [r7, #4]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000b3c 	.word	0x20000b3c
 8003e7c:	20000b40 	.word	0x20000b40
 8003e80:	0800febc 	.word	0x0800febc
 8003e84:	0801002c 	.word	0x0801002c
 8003e88:	0800ff04 	.word	0x0800ff04
 8003e8c:	08010044 	.word	0x08010044
 8003e90:	08010064 	.word	0x08010064
 8003e94:	20000b44 	.word	0x20000b44

08003e98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <mem_malloc+0x14>
    return NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e0d9      	b.n	8004060 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	3303      	adds	r3, #3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003eb8:	8bbb      	ldrh	r3, [r7, #28]
 8003eba:	2b0b      	cmp	r3, #11
 8003ebc:	d801      	bhi.n	8003ec2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003ec2:	8bbb      	ldrh	r3, [r7, #28]
 8003ec4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003ec8:	d803      	bhi.n	8003ed2 <mem_malloc+0x3a>
 8003eca:	8bba      	ldrh	r2, [r7, #28]
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d201      	bcs.n	8003ed6 <mem_malloc+0x3e>
    return NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e0c4      	b.n	8004060 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003ed6:	4b64      	ldr	r3, [pc, #400]	@ (8004068 <mem_malloc+0x1d0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fd4a 	bl	8003974 <mem_to_ptr>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	83fb      	strh	r3, [r7, #30]
 8003ee4:	e0b4      	b.n	8004050 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003ee6:	8bfb      	ldrh	r3, [r7, #30]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fd31 	bl	8003950 <ptr_to_mem>
 8003eee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f040 80a4 	bne.w	8004042 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	8bfb      	ldrh	r3, [r7, #30]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f1a3 0208 	sub.w	r2, r3, #8
 8003f08:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	f0c0 8099 	bcc.w	8004042 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	8bfb      	ldrh	r3, [r7, #30]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f1a3 0208 	sub.w	r2, r3, #8
 8003f1e:	8bbb      	ldrh	r3, [r7, #28]
 8003f20:	3314      	adds	r3, #20
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d333      	bcc.n	8003f8e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003f26:	8bfa      	ldrh	r2, [r7, #30]
 8003f28:	8bbb      	ldrh	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3308      	adds	r3, #8
 8003f30:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003f32:	8a7b      	ldrh	r3, [r7, #18]
 8003f34:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003f38:	d106      	bne.n	8003f48 <mem_malloc+0xb0>
 8003f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800406c <mem_malloc+0x1d4>)
 8003f3c:	f240 3287 	movw	r2, #903	@ 0x387
 8003f40:	494b      	ldr	r1, [pc, #300]	@ (8004070 <mem_malloc+0x1d8>)
 8003f42:	484c      	ldr	r0, [pc, #304]	@ (8004074 <mem_malloc+0x1dc>)
 8003f44:	f00a ff76 	bl	800ee34 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003f48:	8a7b      	ldrh	r3, [r7, #18]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fd00 	bl	8003950 <ptr_to_mem>
 8003f50:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	881a      	ldrh	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8bfa      	ldrh	r2, [r7, #30]
 8003f64:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	8a7a      	ldrh	r2, [r7, #18]
 8003f6a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003f7a:	d00b      	beq.n	8003f94 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fce5 	bl	8003950 <ptr_to_mem>
 8003f86:	4602      	mov	r2, r0
 8003f88:	8a7b      	ldrh	r3, [r7, #18]
 8003f8a:	8053      	strh	r3, [r2, #2]
 8003f8c:	e002      	b.n	8003f94 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2201      	movs	r2, #1
 8003f92:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003f94:	4b34      	ldr	r3, [pc, #208]	@ (8004068 <mem_malloc+0x1d0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d127      	bne.n	8003fee <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003f9e:	4b32      	ldr	r3, [pc, #200]	@ (8004068 <mem_malloc+0x1d0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003fa4:	e005      	b.n	8003fb2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fcd0 	bl	8003950 <ptr_to_mem>
 8003fb0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	791b      	ldrb	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <mem_malloc+0x12c>
 8003fba:	4b2f      	ldr	r3, [pc, #188]	@ (8004078 <mem_malloc+0x1e0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1f0      	bne.n	8003fa6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8003fc4:	4a28      	ldr	r2, [pc, #160]	@ (8004068 <mem_malloc+0x1d0>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003fca:	4b27      	ldr	r3, [pc, #156]	@ (8004068 <mem_malloc+0x1d0>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b2a      	ldr	r3, [pc, #168]	@ (8004078 <mem_malloc+0x1e0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d00b      	beq.n	8003fee <mem_malloc+0x156>
 8003fd6:	4b24      	ldr	r3, [pc, #144]	@ (8004068 <mem_malloc+0x1d0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	791b      	ldrb	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <mem_malloc+0x156>
 8003fe0:	4b22      	ldr	r3, [pc, #136]	@ (800406c <mem_malloc+0x1d4>)
 8003fe2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8003fe6:	4925      	ldr	r1, [pc, #148]	@ (800407c <mem_malloc+0x1e4>)
 8003fe8:	4822      	ldr	r0, [pc, #136]	@ (8004074 <mem_malloc+0x1dc>)
 8003fea:	f00a ff23 	bl	800ee34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003fee:	8bba      	ldrh	r2, [r7, #28]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	4a20      	ldr	r2, [pc, #128]	@ (8004078 <mem_malloc+0x1e0>)
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d906      	bls.n	800400c <mem_malloc+0x174>
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <mem_malloc+0x1d4>)
 8004000:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8004004:	491e      	ldr	r1, [pc, #120]	@ (8004080 <mem_malloc+0x1e8>)
 8004006:	481b      	ldr	r0, [pc, #108]	@ (8004074 <mem_malloc+0x1dc>)
 8004008:	f00a ff14 	bl	800ee34 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <mem_malloc+0x18c>
 8004016:	4b15      	ldr	r3, [pc, #84]	@ (800406c <mem_malloc+0x1d4>)
 8004018:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800401c:	4919      	ldr	r1, [pc, #100]	@ (8004084 <mem_malloc+0x1ec>)
 800401e:	4815      	ldr	r0, [pc, #84]	@ (8004074 <mem_malloc+0x1dc>)
 8004020:	f00a ff08 	bl	800ee34 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <mem_malloc+0x1a4>
 800402e:	4b0f      	ldr	r3, [pc, #60]	@ (800406c <mem_malloc+0x1d4>)
 8004030:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8004034:	4914      	ldr	r1, [pc, #80]	@ (8004088 <mem_malloc+0x1f0>)
 8004036:	480f      	ldr	r0, [pc, #60]	@ (8004074 <mem_malloc+0x1dc>)
 8004038:	f00a fefc 	bl	800ee34 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3308      	adds	r3, #8
 8004040:	e00e      	b.n	8004060 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004042:	8bfb      	ldrh	r3, [r7, #30]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fc83 	bl	8003950 <ptr_to_mem>
 800404a:	4603      	mov	r3, r0
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004050:	8bfa      	ldrh	r2, [r7, #30]
 8004052:	8bbb      	ldrh	r3, [r7, #28]
 8004054:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8004058:	429a      	cmp	r2, r3
 800405a:	f4ff af44 	bcc.w	8003ee6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000b44 	.word	0x20000b44
 800406c:	0800febc 	.word	0x0800febc
 8004070:	08010064 	.word	0x08010064
 8004074:	0800ff04 	.word	0x0800ff04
 8004078:	20000b40 	.word	0x20000b40
 800407c:	08010078 	.word	0x08010078
 8004080:	08010094 	.word	0x08010094
 8004084:	080100c4 	.word	0x080100c4
 8004088:	080100f4 	.word	0x080100f4

0800408c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	3303      	adds	r3, #3
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e011      	b.n	80040d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4413      	add	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	885b      	ldrh	r3, [r3, #2]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4293      	cmp	r3, r2
 80040dc:	dbe7      	blt.n	80040ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80040f2:	2300      	movs	r3, #0
 80040f4:	80fb      	strh	r3, [r7, #6]
 80040f6:	e009      	b.n	800410c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	4a08      	ldr	r2, [pc, #32]	@ (800411c <memp_init+0x30>)
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ffc3 	bl	800408c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	3301      	adds	r3, #1
 800410a:	80fb      	strh	r3, [r7, #6]
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	2b08      	cmp	r3, #8
 8004110:	d9f2      	bls.n	80040f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	0801441c 	.word	0x0801441c

08004120 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d012      	beq.n	800415c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d006      	beq.n	8004158 <do_memp_malloc_pool+0x38>
 800414a:	4b07      	ldr	r3, [pc, #28]	@ (8004168 <do_memp_malloc_pool+0x48>)
 800414c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004150:	4906      	ldr	r1, [pc, #24]	@ (800416c <do_memp_malloc_pool+0x4c>)
 8004152:	4807      	ldr	r0, [pc, #28]	@ (8004170 <do_memp_malloc_pool+0x50>)
 8004154:	f00a fe6e 	bl	800ee34 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	e000      	b.n	800415e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	08010118 	.word	0x08010118
 800416c:	08010148 	.word	0x08010148
 8004170:	0801016c 	.word	0x0801016c

08004174 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <memp_malloc_pool+0x1c>
 8004182:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <memp_malloc_pool+0x38>)
 8004184:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8004188:	4909      	ldr	r1, [pc, #36]	@ (80041b0 <memp_malloc_pool+0x3c>)
 800418a:	480a      	ldr	r0, [pc, #40]	@ (80041b4 <memp_malloc_pool+0x40>)
 800418c:	f00a fe52 	bl	800ee34 <iprintf>
  if (desc == NULL) {
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <memp_malloc_pool+0x26>
    return NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	e003      	b.n	80041a2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ffc0 	bl	8004120 <do_memp_malloc_pool>
 80041a0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	08010118 	.word	0x08010118
 80041b0:	08010194 	.word	0x08010194
 80041b4:	0801016c 	.word	0x0801016c

080041b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d908      	bls.n	80041da <memp_malloc+0x22>
 80041c8:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <memp_malloc+0x3c>)
 80041ca:	f240 1257 	movw	r2, #343	@ 0x157
 80041ce:	490a      	ldr	r1, [pc, #40]	@ (80041f8 <memp_malloc+0x40>)
 80041d0:	480a      	ldr	r0, [pc, #40]	@ (80041fc <memp_malloc+0x44>)
 80041d2:	f00a fe2f 	bl	800ee34 <iprintf>
 80041d6:	2300      	movs	r3, #0
 80041d8:	e008      	b.n	80041ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	4a08      	ldr	r2, [pc, #32]	@ (8004200 <memp_malloc+0x48>)
 80041de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff9c 	bl	8004120 <do_memp_malloc_pool>
 80041e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80041ea:	68fb      	ldr	r3, [r7, #12]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	08010118 	.word	0x08010118
 80041f8:	080101a8 	.word	0x080101a8
 80041fc:	0801016c 	.word	0x0801016c
 8004200:	0801441c 	.word	0x0801441c

08004204 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d006      	beq.n	8004226 <do_memp_free_pool+0x22>
 8004218:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <do_memp_free_pool+0x40>)
 800421a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800421e:	490a      	ldr	r1, [pc, #40]	@ (8004248 <do_memp_free_pool+0x44>)
 8004220:	480a      	ldr	r0, [pc, #40]	@ (800424c <do_memp_free_pool+0x48>)
 8004222:	f00a fe07 	bl	800ee34 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	08010118 	.word	0x08010118
 8004248:	080101c8 	.word	0x080101c8
 800424c:	0801016c 	.word	0x0801016c

08004250 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <memp_free_pool+0x1e>
 8004260:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <memp_free_pool+0x3c>)
 8004262:	f240 1295 	movw	r2, #405	@ 0x195
 8004266:	490a      	ldr	r1, [pc, #40]	@ (8004290 <memp_free_pool+0x40>)
 8004268:	480a      	ldr	r0, [pc, #40]	@ (8004294 <memp_free_pool+0x44>)
 800426a:	f00a fde3 	bl	800ee34 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <memp_free_pool+0x34>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ffc1 	bl	8004204 <do_memp_free_pool>
 8004282:	e000      	b.n	8004286 <memp_free_pool+0x36>
    return;
 8004284:	bf00      	nop
}
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	08010118 	.word	0x08010118
 8004290:	08010194 	.word	0x08010194
 8004294:	0801016c 	.word	0x0801016c

08004298 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	6039      	str	r1, [r7, #0]
 80042a2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d907      	bls.n	80042ba <memp_free+0x22>
 80042aa:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <memp_free+0x44>)
 80042ac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80042b0:	490b      	ldr	r1, [pc, #44]	@ (80042e0 <memp_free+0x48>)
 80042b2:	480c      	ldr	r0, [pc, #48]	@ (80042e4 <memp_free+0x4c>)
 80042b4:	f00a fdbe 	bl	800ee34 <iprintf>
 80042b8:	e00c      	b.n	80042d4 <memp_free+0x3c>

  if (mem == NULL) {
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	4a09      	ldr	r2, [pc, #36]	@ (80042e8 <memp_free+0x50>)
 80042c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c8:	6839      	ldr	r1, [r7, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff ff9a 	bl	8004204 <do_memp_free_pool>
 80042d0:	e000      	b.n	80042d4 <memp_free+0x3c>
    return;
 80042d2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	08010118 	.word	0x08010118
 80042e0:	080101e8 	.word	0x080101e8
 80042e4:	0801016c 	.word	0x0801016c
 80042e8:	0801441c 	.word	0x0801441c

080042ec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80042f0:	bf00      	nop
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <netif_add+0x26>
 8004310:	4b57      	ldr	r3, [pc, #348]	@ (8004470 <netif_add+0x174>)
 8004312:	f240 1227 	movw	r2, #295	@ 0x127
 8004316:	4957      	ldr	r1, [pc, #348]	@ (8004474 <netif_add+0x178>)
 8004318:	4857      	ldr	r0, [pc, #348]	@ (8004478 <netif_add+0x17c>)
 800431a:	f00a fd8b 	bl	800ee34 <iprintf>
 800431e:	2300      	movs	r3, #0
 8004320:	e0a2      	b.n	8004468 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d108      	bne.n	800433a <netif_add+0x3e>
 8004328:	4b51      	ldr	r3, [pc, #324]	@ (8004470 <netif_add+0x174>)
 800432a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800432e:	4953      	ldr	r1, [pc, #332]	@ (800447c <netif_add+0x180>)
 8004330:	4851      	ldr	r0, [pc, #324]	@ (8004478 <netif_add+0x17c>)
 8004332:	f00a fd7f 	bl	800ee34 <iprintf>
 8004336:	2300      	movs	r3, #0
 8004338:	e096      	b.n	8004468 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004340:	4b4f      	ldr	r3, [pc, #316]	@ (8004480 <netif_add+0x184>)
 8004342:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800434a:	4b4d      	ldr	r3, [pc, #308]	@ (8004480 <netif_add+0x184>)
 800434c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004354:	4b4a      	ldr	r3, [pc, #296]	@ (8004480 <netif_add+0x184>)
 8004356:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a45      	ldr	r2, [pc, #276]	@ (8004484 <netif_add+0x188>)
 800436e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a3a      	ldr	r2, [r7, #32]
 8004388:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800438a:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <netif_add+0x18c>)
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004398:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f913 	bl	80045cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	4798      	blx	r3
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <netif_add+0xba>
    return NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e058      	b.n	8004468 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043bc:	2bff      	cmp	r3, #255	@ 0xff
 80043be:	d103      	bne.n	80043c8 <netif_add+0xcc>
        netif->num = 0;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80043cc:	4b2f      	ldr	r3, [pc, #188]	@ (800448c <netif_add+0x190>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	e02b      	b.n	800442c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d106      	bne.n	80043ea <netif_add+0xee>
 80043dc:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <netif_add+0x174>)
 80043de:	f240 128b 	movw	r2, #395	@ 0x18b
 80043e2:	492b      	ldr	r1, [pc, #172]	@ (8004490 <netif_add+0x194>)
 80043e4:	4824      	ldr	r0, [pc, #144]	@ (8004478 <netif_add+0x17c>)
 80043e6:	f00a fd25 	bl	800ee34 <iprintf>
        num_netifs++;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	3301      	adds	r3, #1
 80043ee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2bff      	cmp	r3, #255	@ 0xff
 80043f4:	dd06      	ble.n	8004404 <netif_add+0x108>
 80043f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004470 <netif_add+0x174>)
 80043f8:	f240 128d 	movw	r2, #397	@ 0x18d
 80043fc:	4925      	ldr	r1, [pc, #148]	@ (8004494 <netif_add+0x198>)
 80043fe:	481e      	ldr	r0, [pc, #120]	@ (8004478 <netif_add+0x17c>)
 8004400:	f00a fd18 	bl	800ee34 <iprintf>
        if (netif2->num == netif->num) {
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004410:	429a      	cmp	r2, r3
 8004412:	d108      	bne.n	8004426 <netif_add+0x12a>
          netif->num++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800441a:	3301      	adds	r3, #1
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8004424:	e005      	b.n	8004432 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1d0      	bne.n	80043d4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1be      	bne.n	80043b6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800443e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004440:	d103      	bne.n	800444a <netif_add+0x14e>
    netif_num = 0;
 8004442:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <netif_add+0x18c>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e006      	b.n	8004458 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004450:	3301      	adds	r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <netif_add+0x18c>)
 8004456:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004458:	4b0c      	ldr	r3, [pc, #48]	@ (800448c <netif_add+0x190>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004460:	4a0a      	ldr	r2, [pc, #40]	@ (800448c <netif_add+0x190>)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	08010204 	.word	0x08010204
 8004474:	08010298 	.word	0x08010298
 8004478:	08010254 	.word	0x08010254
 800447c:	080102b4 	.word	0x080102b4
 8004480:	08014480 	.word	0x08014480
 8004484:	0800477b 	.word	0x0800477b
 8004488:	20003a3c 	.word	0x20003a3c
 800448c:	20003a34 	.word	0x20003a34
 8004490:	080102d8 	.word	0x080102d8
 8004494:	080102ec 	.word	0x080102ec

08004498 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80044a2:	6839      	ldr	r1, [r7, #0]
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f002 fd55 	bl	8006f54 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80044aa:	6839      	ldr	r1, [r7, #0]
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f007 fa8b 	bl	800b9c8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <netif_do_set_ipaddr+0x20>
 80044ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004544 <netif_do_set_ipaddr+0x88>)
 80044d0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80044d4:	491c      	ldr	r1, [pc, #112]	@ (8004548 <netif_do_set_ipaddr+0x8c>)
 80044d6:	481d      	ldr	r0, [pc, #116]	@ (800454c <netif_do_set_ipaddr+0x90>)
 80044d8:	f00a fcac 	bl	800ee34 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <netif_do_set_ipaddr+0x34>
 80044e2:	4b18      	ldr	r3, [pc, #96]	@ (8004544 <netif_do_set_ipaddr+0x88>)
 80044e4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80044e8:	4917      	ldr	r1, [pc, #92]	@ (8004548 <netif_do_set_ipaddr+0x8c>)
 80044ea:	4818      	ldr	r0, [pc, #96]	@ (800454c <netif_do_set_ipaddr+0x90>)
 80044ec:	f00a fca2 	bl	800ee34 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3304      	adds	r3, #4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d01c      	beq.n	8004538 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3304      	adds	r3, #4
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800450e:	f107 0314 	add.w	r3, r7, #20
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ffbf 	bl	8004498 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <netif_do_set_ipaddr+0x6a>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	e000      	b.n	8004528 <netif_do_set_ipaddr+0x6c>
 8004526:	2300      	movs	r3, #0
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800452c:	2101      	movs	r1, #1
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8d2 	bl	80046d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004534:	2301      	movs	r3, #1
 8004536:	e000      	b.n	800453a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	08010204 	.word	0x08010204
 8004548:	0801031c 	.word	0x0801031c
 800454c:	08010254 	.word	0x08010254

08004550 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3308      	adds	r3, #8
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d00a      	beq.n	8004580 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <netif_do_set_netmask+0x26>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	e000      	b.n	8004578 <netif_do_set_netmask+0x28>
 8004576:	2300      	movs	r3, #0
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	330c      	adds	r3, #12
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d00a      	beq.n	80045be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <netif_do_set_gw+0x26>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	e000      	b.n	80045b6 <netif_do_set_gw+0x28>
 80045b4:	2300      	movs	r3, #0
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80045e8:	4b1c      	ldr	r3, [pc, #112]	@ (800465c <netif_set_addr+0x90>)
 80045ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80045f2:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <netif_set_addr+0x90>)
 80045f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80045fc:	4b17      	ldr	r3, [pc, #92]	@ (800465c <netif_set_addr+0x90>)
 80045fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <netif_set_addr+0x42>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <netif_set_addr+0x46>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <netif_set_addr+0x48>
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d006      	beq.n	800462a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800461c:	f107 0310 	add.w	r3, r7, #16
 8004620:	461a      	mov	r2, r3
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff ff49 	bl	80044bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff ff8e 	bl	8004550 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7ff ffa8 	bl	800458e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004644:	f107 0310 	add.w	r3, r7, #16
 8004648:	461a      	mov	r2, r3
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff ff35 	bl	80044bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004652:	bf00      	nop
 8004654:	3720      	adds	r7, #32
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	08014480 	.word	0x08014480

08004660 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004668:	4a04      	ldr	r2, [pc, #16]	@ (800467c <netif_set_default+0x1c>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20003a38 	.word	0x20003a38

08004680 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d107      	bne.n	800469e <netif_set_up+0x1e>
 800468e:	4b0f      	ldr	r3, [pc, #60]	@ (80046cc <netif_set_up+0x4c>)
 8004690:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8004694:	490e      	ldr	r1, [pc, #56]	@ (80046d0 <netif_set_up+0x50>)
 8004696:	480f      	ldr	r0, [pc, #60]	@ (80046d4 <netif_set_up+0x54>)
 8004698:	f00a fbcc 	bl	800ee34 <iprintf>
 800469c:	e013      	b.n	80046c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10c      	bne.n	80046c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80046be:	2103      	movs	r1, #3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f809 	bl	80046d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	08010204 	.word	0x08010204
 80046d0:	0801038c 	.word	0x0801038c
 80046d4:	08010254 	.word	0x08010254

080046d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <netif_issue_reports+0x20>
 80046ea:	4b18      	ldr	r3, [pc, #96]	@ (800474c <netif_issue_reports+0x74>)
 80046ec:	f240 326d 	movw	r2, #877	@ 0x36d
 80046f0:	4917      	ldr	r1, [pc, #92]	@ (8004750 <netif_issue_reports+0x78>)
 80046f2:	4818      	ldr	r0, [pc, #96]	@ (8004754 <netif_issue_reports+0x7c>)
 80046f4:	f00a fb9e 	bl	800ee34 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01e      	beq.n	8004744 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800470c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004710:	2b00      	cmp	r3, #0
 8004712:	d017      	beq.n	8004744 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d013      	beq.n	8004746 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f008 f87d 	bl	800c83c <etharp_request>
 8004742:	e000      	b.n	8004746 <netif_issue_reports+0x6e>
    return;
 8004744:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	08010204 	.word	0x08010204
 8004750:	080103a8 	.word	0x080103a8
 8004754:	08010254 	.word	0x08010254

08004758 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	61da      	str	r2, [r3, #28]
  }
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004786:	f06f 030b 	mvn.w	r3, #11
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d013      	beq.n	80047d0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80047a8:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <netif_get_by_index+0x48>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e00c      	b.n	80047ca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047b6:	3301      	adds	r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	79fa      	ldrb	r2, [r7, #7]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d101      	bne.n	80047c4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	e006      	b.n	80047d2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ef      	bne.n	80047b0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20003a34 	.word	0x20003a34

080047e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80047ea:	4b0c      	ldr	r3, [pc, #48]	@ (800481c <pbuf_free_ooseq+0x38>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <pbuf_free_ooseq+0x3c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	607b      	str	r3, [r7, #4]
 80047f6:	e00a      	b.n	800480e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f002 fbe5 	bl	8006fd0 <tcp_free_ooseq>
      return;
 8004806:	e005      	b.n	8004814 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f1      	bne.n	80047f8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20003a3d 	.word	0x20003a3d
 8004820:	20003a4c 	.word	0x20003a4c

08004824 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004828:	4b03      	ldr	r3, [pc, #12]	@ (8004838 <pbuf_pool_is_empty+0x14>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800482e:	bf00      	nop
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	20003a3d 	.word	0x20003a3d

0800483c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	460b      	mov	r3, r1
 800484c:	80fb      	strh	r3, [r7, #6]
 800484e:	4613      	mov	r3, r2
 8004850:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88ba      	ldrh	r2, [r7, #4]
 8004868:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800486a:	8b3b      	ldrh	r3, [r7, #24]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	7f3a      	ldrb	r2, [r7, #28]
 8004876:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	73da      	strb	r2, [r3, #15]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08c      	sub	sp, #48	@ 0x30
 8004894:	af02      	add	r7, sp, #8
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
 800489a:	460b      	mov	r3, r1
 800489c:	80bb      	strh	r3, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80048a6:	887b      	ldrh	r3, [r7, #2]
 80048a8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80048ac:	d07f      	beq.n	80049ae <pbuf_alloc+0x11e>
 80048ae:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80048b2:	f300 80c8 	bgt.w	8004a46 <pbuf_alloc+0x1b6>
 80048b6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80048ba:	d010      	beq.n	80048de <pbuf_alloc+0x4e>
 80048bc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80048c0:	f300 80c1 	bgt.w	8004a46 <pbuf_alloc+0x1b6>
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d002      	beq.n	80048ce <pbuf_alloc+0x3e>
 80048c8:	2b41      	cmp	r3, #65	@ 0x41
 80048ca:	f040 80bc 	bne.w	8004a46 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80048ce:	887a      	ldrh	r2, [r7, #2]
 80048d0:	88bb      	ldrh	r3, [r7, #4]
 80048d2:	4619      	mov	r1, r3
 80048d4:	2000      	movs	r0, #0
 80048d6:	f000 f8d1 	bl	8004a7c <pbuf_alloc_reference>
 80048da:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80048dc:	e0bd      	b.n	8004a5a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80048e6:	88bb      	ldrh	r3, [r7, #4]
 80048e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80048ea:	2008      	movs	r0, #8
 80048ec:	f7ff fc64 	bl	80041b8 <memp_malloc>
 80048f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80048f8:	f7ff ff94 	bl	8004824 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004902:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004904:	f000 faa8 	bl	8004e58 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	e0a7      	b.n	8004a5c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800490c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800490e:	3303      	adds	r3, #3
 8004910:	b29b      	uxth	r3, r3
 8004912:	f023 0303 	bic.w	r3, r3, #3
 8004916:	b29b      	uxth	r3, r3
 8004918:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800491c:	b29b      	uxth	r3, r3
 800491e:	8b7a      	ldrh	r2, [r7, #26]
 8004920:	4293      	cmp	r3, r2
 8004922:	bf28      	it	cs
 8004924:	4613      	movcs	r3, r2
 8004926:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004928:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800492a:	3310      	adds	r3, #16
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4413      	add	r3, r2
 8004930:	3303      	adds	r3, #3
 8004932:	f023 0303 	bic.w	r3, r3, #3
 8004936:	4618      	mov	r0, r3
 8004938:	89f9      	ldrh	r1, [r7, #14]
 800493a:	8b7a      	ldrh	r2, [r7, #26]
 800493c:	2300      	movs	r3, #0
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	460b      	mov	r3, r1
 8004946:	4601      	mov	r1, r0
 8004948:	6938      	ldr	r0, [r7, #16]
 800494a:	f7ff ff77 	bl	800483c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <pbuf_alloc+0xd8>
 800495a:	4b42      	ldr	r3, [pc, #264]	@ (8004a64 <pbuf_alloc+0x1d4>)
 800495c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004960:	4941      	ldr	r1, [pc, #260]	@ (8004a68 <pbuf_alloc+0x1d8>)
 8004962:	4842      	ldr	r0, [pc, #264]	@ (8004a6c <pbuf_alloc+0x1dc>)
 8004964:	f00a fa66 	bl	800ee34 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004968:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800496a:	3303      	adds	r3, #3
 800496c:	f023 0303 	bic.w	r3, r3, #3
 8004970:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004974:	d106      	bne.n	8004984 <pbuf_alloc+0xf4>
 8004976:	4b3b      	ldr	r3, [pc, #236]	@ (8004a64 <pbuf_alloc+0x1d4>)
 8004978:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800497c:	493c      	ldr	r1, [pc, #240]	@ (8004a70 <pbuf_alloc+0x1e0>)
 800497e:	483b      	ldr	r0, [pc, #236]	@ (8004a6c <pbuf_alloc+0x1dc>)
 8004980:	f00a fa58 	bl	800ee34 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
 800498e:	e002      	b.n	8004996 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800499a:	8b7a      	ldrh	r2, [r7, #26]
 800499c:	89fb      	ldrh	r3, [r7, #14]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80049a6:	8b7b      	ldrh	r3, [r7, #26]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d19e      	bne.n	80048ea <pbuf_alloc+0x5a>
      break;
 80049ac:	e055      	b.n	8004a5a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80049ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80049b0:	3303      	adds	r3, #3
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f023 0303 	bic.w	r3, r3, #3
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	88bb      	ldrh	r3, [r7, #4]
 80049bc:	3303      	adds	r3, #3
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4413      	add	r3, r2
 80049c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80049ca:	8b3b      	ldrh	r3, [r7, #24]
 80049cc:	3310      	adds	r3, #16
 80049ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80049d0:	8b3a      	ldrh	r2, [r7, #24]
 80049d2:	88bb      	ldrh	r3, [r7, #4]
 80049d4:	3303      	adds	r3, #3
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	429a      	cmp	r2, r3
 80049dc:	d306      	bcc.n	80049ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80049de:	8afa      	ldrh	r2, [r7, #22]
 80049e0:	88bb      	ldrh	r3, [r7, #4]
 80049e2:	3303      	adds	r3, #3
 80049e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d201      	bcs.n	80049f0 <pbuf_alloc+0x160>
        return NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e035      	b.n	8004a5c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80049f0:	8afb      	ldrh	r3, [r7, #22]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff fa50 	bl	8003e98 <mem_malloc>
 80049f8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <pbuf_alloc+0x174>
        return NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e02b      	b.n	8004a5c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004a04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a06:	3310      	adds	r3, #16
 8004a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3303      	adds	r3, #3
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	4618      	mov	r0, r3
 8004a14:	88b9      	ldrh	r1, [r7, #4]
 8004a16:	88ba      	ldrh	r2, [r7, #4]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	887b      	ldrh	r3, [r7, #2]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	460b      	mov	r3, r1
 8004a22:	4601      	mov	r1, r0
 8004a24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a26:	f7ff ff09 	bl	800483c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d010      	beq.n	8004a58 <pbuf_alloc+0x1c8>
 8004a36:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <pbuf_alloc+0x1d4>)
 8004a38:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8004a3c:	490d      	ldr	r1, [pc, #52]	@ (8004a74 <pbuf_alloc+0x1e4>)
 8004a3e:	480b      	ldr	r0, [pc, #44]	@ (8004a6c <pbuf_alloc+0x1dc>)
 8004a40:	f00a f9f8 	bl	800ee34 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004a44:	e008      	b.n	8004a58 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004a46:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <pbuf_alloc+0x1d4>)
 8004a48:	f240 1227 	movw	r2, #295	@ 0x127
 8004a4c:	490a      	ldr	r1, [pc, #40]	@ (8004a78 <pbuf_alloc+0x1e8>)
 8004a4e:	4807      	ldr	r0, [pc, #28]	@ (8004a6c <pbuf_alloc+0x1dc>)
 8004a50:	f00a f9f0 	bl	800ee34 <iprintf>
      return NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e001      	b.n	8004a5c <pbuf_alloc+0x1cc>
      break;
 8004a58:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3728      	adds	r7, #40	@ 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	08010434 	.word	0x08010434
 8004a68:	08010464 	.word	0x08010464
 8004a6c:	08010494 	.word	0x08010494
 8004a70:	080104bc 	.word	0x080104bc
 8004a74:	080104f0 	.word	0x080104f0
 8004a78:	0801051c 	.word	0x0801051c

08004a7c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004a8c:	883b      	ldrh	r3, [r7, #0]
 8004a8e:	2b41      	cmp	r3, #65	@ 0x41
 8004a90:	d009      	beq.n	8004aa6 <pbuf_alloc_reference+0x2a>
 8004a92:	883b      	ldrh	r3, [r7, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d006      	beq.n	8004aa6 <pbuf_alloc_reference+0x2a>
 8004a98:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad8 <pbuf_alloc_reference+0x5c>)
 8004a9a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8004a9e:	490f      	ldr	r1, [pc, #60]	@ (8004adc <pbuf_alloc_reference+0x60>)
 8004aa0:	480f      	ldr	r0, [pc, #60]	@ (8004ae0 <pbuf_alloc_reference+0x64>)
 8004aa2:	f00a f9c7 	bl	800ee34 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004aa6:	2007      	movs	r0, #7
 8004aa8:	f7ff fb86 	bl	80041b8 <memp_malloc>
 8004aac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e00b      	b.n	8004ad0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004ab8:	8879      	ldrh	r1, [r7, #2]
 8004aba:	887a      	ldrh	r2, [r7, #2]
 8004abc:	2300      	movs	r3, #0
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	883b      	ldrh	r3, [r7, #0]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff feb7 	bl	800483c <pbuf_init_alloced_pbuf>
  return p;
 8004ace:	68fb      	ldr	r3, [r7, #12]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	08010434 	.word	0x08010434
 8004adc:	08010538 	.word	0x08010538
 8004ae0:	08010494 	.word	0x08010494

08004ae4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	4603      	mov	r3, r0
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	460b      	mov	r3, r1
 8004af2:	81bb      	strh	r3, [r7, #12]
 8004af4:	4613      	mov	r3, r2
 8004af6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004afc:	8a7b      	ldrh	r3, [r7, #18]
 8004afe:	3303      	adds	r3, #3
 8004b00:	f023 0203 	bic.w	r2, r3, #3
 8004b04:	89bb      	ldrh	r3, [r7, #12]
 8004b06:	441a      	add	r2, r3
 8004b08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d901      	bls.n	8004b12 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e018      	b.n	8004b44 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004b18:	8a7b      	ldrh	r3, [r7, #18]
 8004b1a:	3303      	adds	r3, #3
 8004b1c:	f023 0303 	bic.w	r3, r3, #3
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	4413      	add	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e001      	b.n	8004b2c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	89b9      	ldrh	r1, [r7, #12]
 8004b30:	89ba      	ldrh	r2, [r7, #12]
 8004b32:	2302      	movs	r3, #2
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	897b      	ldrh	r3, [r7, #10]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	6979      	ldr	r1, [r7, #20]
 8004b3e:	f7ff fe7d 	bl	800483c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004b42:	687b      	ldr	r3, [r7, #4]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <pbuf_realloc+0x20>
 8004b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c48 <pbuf_realloc+0xfc>)
 8004b60:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8004b64:	4939      	ldr	r1, [pc, #228]	@ (8004c4c <pbuf_realloc+0x100>)
 8004b66:	483a      	ldr	r0, [pc, #232]	@ (8004c50 <pbuf_realloc+0x104>)
 8004b68:	f00a f964 	bl	800ee34 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	891b      	ldrh	r3, [r3, #8]
 8004b70:	887a      	ldrh	r2, [r7, #2]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d263      	bcs.n	8004c3e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	891a      	ldrh	r2, [r3, #8]
 8004b7a:	887b      	ldrh	r3, [r7, #2]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004b80:	887b      	ldrh	r3, [r7, #2]
 8004b82:	817b      	strh	r3, [r7, #10]
  q = p;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004b88:	e018      	b.n	8004bbc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	895b      	ldrh	r3, [r3, #10]
 8004b8e:	897a      	ldrh	r2, [r7, #10]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	891a      	ldrh	r2, [r3, #8]
 8004b98:	893b      	ldrh	r3, [r7, #8]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <pbuf_realloc+0x70>
 8004bae:	4b26      	ldr	r3, [pc, #152]	@ (8004c48 <pbuf_realloc+0xfc>)
 8004bb0:	f240 12af 	movw	r2, #431	@ 0x1af
 8004bb4:	4927      	ldr	r1, [pc, #156]	@ (8004c54 <pbuf_realloc+0x108>)
 8004bb6:	4826      	ldr	r0, [pc, #152]	@ (8004c50 <pbuf_realloc+0x104>)
 8004bb8:	f00a f93c 	bl	800ee34 <iprintf>
  while (rem_len > q->len) {
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	895b      	ldrh	r3, [r3, #10]
 8004bc0:	897a      	ldrh	r2, [r7, #10]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d8e1      	bhi.n	8004b8a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	7b1b      	ldrb	r3, [r3, #12]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d121      	bne.n	8004c16 <pbuf_realloc+0xca>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	895b      	ldrh	r3, [r3, #10]
 8004bd6:	897a      	ldrh	r2, [r7, #10]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d01c      	beq.n	8004c16 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	7b5b      	ldrb	r3, [r3, #13]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d116      	bne.n	8004c16 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	897b      	ldrh	r3, [r7, #10]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff f850 	bl	8003ca0 <mem_trim>
 8004c00:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <pbuf_realloc+0xca>
 8004c08:	4b0f      	ldr	r3, [pc, #60]	@ (8004c48 <pbuf_realloc+0xfc>)
 8004c0a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8004c0e:	4912      	ldr	r1, [pc, #72]	@ (8004c58 <pbuf_realloc+0x10c>)
 8004c10:	480f      	ldr	r0, [pc, #60]	@ (8004c50 <pbuf_realloc+0x104>)
 8004c12:	f00a f90f 	bl	800ee34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	897a      	ldrh	r2, [r7, #10]
 8004c1a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	895a      	ldrh	r2, [r3, #10]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f911 	bl	8004e58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e000      	b.n	8004c40 <pbuf_realloc+0xf4>
    return;
 8004c3e:	bf00      	nop

}
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	08010434 	.word	0x08010434
 8004c4c:	0801054c 	.word	0x0801054c
 8004c50:	08010494 	.word	0x08010494
 8004c54:	08010564 	.word	0x08010564
 8004c58:	0801057c 	.word	0x0801057c

08004c5c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <pbuf_add_header_impl+0x22>
 8004c70:	4b2b      	ldr	r3, [pc, #172]	@ (8004d20 <pbuf_add_header_impl+0xc4>)
 8004c72:	f240 12df 	movw	r2, #479	@ 0x1df
 8004c76:	492b      	ldr	r1, [pc, #172]	@ (8004d24 <pbuf_add_header_impl+0xc8>)
 8004c78:	482b      	ldr	r0, [pc, #172]	@ (8004d28 <pbuf_add_header_impl+0xcc>)
 8004c7a:	f00a f8db 	bl	800ee34 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <pbuf_add_header_impl+0x30>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8a:	d301      	bcc.n	8004c90 <pbuf_add_header_impl+0x34>
    return 1;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e043      	b.n	8004d18 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <pbuf_add_header_impl+0x3e>
    return 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e03e      	b.n	8004d18 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	891a      	ldrh	r2, [r3, #8]
 8004ca2:	8a7b      	ldrh	r3, [r7, #18]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	8a7a      	ldrh	r2, [r7, #18]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d901      	bls.n	8004cb2 <pbuf_add_header_impl+0x56>
    return 1;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e032      	b.n	8004d18 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	7b1b      	ldrb	r3, [r3, #12]
 8004cb6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004cb8:	8a3b      	ldrh	r3, [r7, #16]
 8004cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	425b      	negs	r3, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3310      	adds	r3, #16
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d20d      	bcs.n	8004cf4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e01d      	b.n	8004d18 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d006      	beq.n	8004cf0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	425b      	negs	r3, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e001      	b.n	8004cf4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e011      	b.n	8004d18 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	895a      	ldrh	r2, [r3, #10]
 8004cfe:	8a7b      	ldrh	r3, [r7, #18]
 8004d00:	4413      	add	r3, r2
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	891a      	ldrh	r2, [r3, #8]
 8004d0c:	8a7b      	ldrh	r3, [r7, #18]
 8004d0e:	4413      	add	r3, r2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	811a      	strh	r2, [r3, #8]


  return 0;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	08010434 	.word	0x08010434
 8004d24:	08010598 	.word	0x08010598
 8004d28:	08010494 	.word	0x08010494

08004d2c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004d36:	2200      	movs	r2, #0
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff ff8e 	bl	8004c5c <pbuf_add_header_impl>
 8004d40:	4603      	mov	r3, r0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <pbuf_remove_header+0x1e>
 8004d5c:	4b20      	ldr	r3, [pc, #128]	@ (8004de0 <pbuf_remove_header+0x94>)
 8004d5e:	f240 224b 	movw	r2, #587	@ 0x24b
 8004d62:	4920      	ldr	r1, [pc, #128]	@ (8004de4 <pbuf_remove_header+0x98>)
 8004d64:	4820      	ldr	r0, [pc, #128]	@ (8004de8 <pbuf_remove_header+0x9c>)
 8004d66:	f00a f865 	bl	800ee34 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <pbuf_remove_header+0x2c>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d76:	d301      	bcc.n	8004d7c <pbuf_remove_header+0x30>
    return 1;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e02c      	b.n	8004dd6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <pbuf_remove_header+0x3a>
    return 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e027      	b.n	8004dd6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	895b      	ldrh	r3, [r3, #10]
 8004d8e:	89fa      	ldrh	r2, [r7, #14]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d908      	bls.n	8004da6 <pbuf_remove_header+0x5a>
 8004d94:	4b12      	ldr	r3, [pc, #72]	@ (8004de0 <pbuf_remove_header+0x94>)
 8004d96:	f240 2255 	movw	r2, #597	@ 0x255
 8004d9a:	4914      	ldr	r1, [pc, #80]	@ (8004dec <pbuf_remove_header+0xa0>)
 8004d9c:	4812      	ldr	r0, [pc, #72]	@ (8004de8 <pbuf_remove_header+0x9c>)
 8004d9e:	f00a f849 	bl	800ee34 <iprintf>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e017      	b.n	8004dd6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	441a      	add	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	895a      	ldrh	r2, [r3, #10]
 8004dbc:	89fb      	ldrh	r3, [r7, #14]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	891a      	ldrh	r2, [r3, #8]
 8004dca:	89fb      	ldrh	r3, [r7, #14]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	08010434 	.word	0x08010434
 8004de4:	08010598 	.word	0x08010598
 8004de8:	08010494 	.word	0x08010494
 8004dec:	080105a4 	.word	0x080105a4

08004df0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004e00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da08      	bge.n	8004e1a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004e08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e0c:	425b      	negs	r3, r3
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff ff9b 	bl	8004d4c <pbuf_remove_header>
 8004e16:	4603      	mov	r3, r0
 8004e18:	e007      	b.n	8004e2a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004e1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e1e:	787a      	ldrb	r2, [r7, #1]
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff ff1a 	bl	8004c5c <pbuf_add_header_impl>
 8004e28:	4603      	mov	r3, r0
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004e3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e42:	2201      	movs	r2, #1
 8004e44:	4619      	mov	r1, r3
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ffd2 	bl	8004df0 <pbuf_header_impl>
 8004e4c:	4603      	mov	r3, r0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <pbuf_free+0x22>
 8004e6c:	4b38      	ldr	r3, [pc, #224]	@ (8004f50 <pbuf_free+0xf8>)
 8004e6e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8004e72:	4938      	ldr	r1, [pc, #224]	@ (8004f54 <pbuf_free+0xfc>)
 8004e74:	4838      	ldr	r0, [pc, #224]	@ (8004f58 <pbuf_free+0x100>)
 8004e76:	f009 ffdd 	bl	800ee34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e063      	b.n	8004f46 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004e82:	e05c      	b.n	8004f3e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	7b9b      	ldrb	r3, [r3, #14]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <pbuf_free+0x42>
 8004e8c:	4b30      	ldr	r3, [pc, #192]	@ (8004f50 <pbuf_free+0xf8>)
 8004e8e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8004e92:	4932      	ldr	r1, [pc, #200]	@ (8004f5c <pbuf_free+0x104>)
 8004e94:	4830      	ldr	r0, [pc, #192]	@ (8004f58 <pbuf_free+0x100>)
 8004e96:	f009 ffcd 	bl	800ee34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	7b9b      	ldrb	r3, [r3, #14]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	739a      	strb	r2, [r3, #14]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7b9b      	ldrb	r3, [r3, #14]
 8004eaa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004eac:	7dbb      	ldrb	r3, [r7, #22]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d143      	bne.n	8004f3a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	7b1b      	ldrb	r3, [r3, #12]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	7b5b      	ldrb	r3, [r3, #13]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d011      	beq.n	8004ef2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <pbuf_free+0x90>
 8004eda:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <pbuf_free+0xf8>)
 8004edc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8004ee0:	491f      	ldr	r1, [pc, #124]	@ (8004f60 <pbuf_free+0x108>)
 8004ee2:	481d      	ldr	r0, [pc, #116]	@ (8004f58 <pbuf_free+0x100>)
 8004ee4:	f009 ffa6 	bl	800ee34 <iprintf>
        pc->custom_free_function(p);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
 8004ef0:	e01d      	b.n	8004f2e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d104      	bne.n	8004f02 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	2008      	movs	r0, #8
 8004efc:	f7ff f9cc 	bl	8004298 <memp_free>
 8004f00:	e015      	b.n	8004f2e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d104      	bne.n	8004f12 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	2007      	movs	r0, #7
 8004f0c:	f7ff f9c4 	bl	8004298 <memp_free>
 8004f10:	e00d      	b.n	8004f2e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <pbuf_free+0xc8>
          mem_free(p);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fe fe57 	bl	8003bcc <mem_free>
 8004f1e:	e006      	b.n	8004f2e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <pbuf_free+0xf8>)
 8004f22:	f240 320f 	movw	r2, #783	@ 0x30f
 8004f26:	490f      	ldr	r1, [pc, #60]	@ (8004f64 <pbuf_free+0x10c>)
 8004f28:	480b      	ldr	r0, [pc, #44]	@ (8004f58 <pbuf_free+0x100>)
 8004f2a:	f009 ff83 	bl	800ee34 <iprintf>
        }
      }
      count++;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	3301      	adds	r3, #1
 8004f32:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	e001      	b.n	8004f3e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d19f      	bne.n	8004e84 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	08010434 	.word	0x08010434
 8004f54:	08010598 	.word	0x08010598
 8004f58:	08010494 	.word	0x08010494
 8004f5c:	080105c4 	.word	0x080105c4
 8004f60:	080105dc 	.word	0x080105dc
 8004f64:	08010600 	.word	0x08010600

08004f68 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004f74:	e005      	b.n	8004f82 <pbuf_clen+0x1a>
    ++len;
 8004f76:	89fb      	ldrh	r3, [r7, #14]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f6      	bne.n	8004f76 <pbuf_clen+0xe>
  }
  return len;
 8004f88:	89fb      	ldrh	r3, [r7, #14]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	7b9b      	ldrb	r3, [r3, #14]
 8004faa:	3301      	adds	r3, #1
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7b9b      	ldrb	r3, [r3, #14]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <pbuf_ref+0x30>
 8004fba:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <pbuf_ref+0x38>)
 8004fbc:	f240 3242 	movw	r2, #834	@ 0x342
 8004fc0:	4904      	ldr	r1, [pc, #16]	@ (8004fd4 <pbuf_ref+0x3c>)
 8004fc2:	4805      	ldr	r0, [pc, #20]	@ (8004fd8 <pbuf_ref+0x40>)
 8004fc4:	f009 ff36 	bl	800ee34 <iprintf>
  }
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	08010434 	.word	0x08010434
 8004fd4:	08010614 	.word	0x08010614
 8004fd8:	08010494 	.word	0x08010494

08004fdc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <pbuf_cat+0x16>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d107      	bne.n	8005002 <pbuf_cat+0x26>
 8004ff2:	4b20      	ldr	r3, [pc, #128]	@ (8005074 <pbuf_cat+0x98>)
 8004ff4:	f240 3259 	movw	r2, #857	@ 0x359
 8004ff8:	491f      	ldr	r1, [pc, #124]	@ (8005078 <pbuf_cat+0x9c>)
 8004ffa:	4820      	ldr	r0, [pc, #128]	@ (800507c <pbuf_cat+0xa0>)
 8004ffc:	f009 ff1a 	bl	800ee34 <iprintf>
 8005000:	e034      	b.n	800506c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e00a      	b.n	800501e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	891a      	ldrh	r2, [r3, #8]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	891b      	ldrh	r3, [r3, #8]
 8005010:	4413      	add	r3, r2
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	891a      	ldrh	r2, [r3, #8]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	895b      	ldrh	r3, [r3, #10]
 800502e:	429a      	cmp	r2, r3
 8005030:	d006      	beq.n	8005040 <pbuf_cat+0x64>
 8005032:	4b10      	ldr	r3, [pc, #64]	@ (8005074 <pbuf_cat+0x98>)
 8005034:	f240 3262 	movw	r2, #866	@ 0x362
 8005038:	4911      	ldr	r1, [pc, #68]	@ (8005080 <pbuf_cat+0xa4>)
 800503a:	4810      	ldr	r0, [pc, #64]	@ (800507c <pbuf_cat+0xa0>)
 800503c:	f009 fefa 	bl	800ee34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d006      	beq.n	8005056 <pbuf_cat+0x7a>
 8005048:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <pbuf_cat+0x98>)
 800504a:	f240 3263 	movw	r2, #867	@ 0x363
 800504e:	490d      	ldr	r1, [pc, #52]	@ (8005084 <pbuf_cat+0xa8>)
 8005050:	480a      	ldr	r0, [pc, #40]	@ (800507c <pbuf_cat+0xa0>)
 8005052:	f009 feef 	bl	800ee34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	891a      	ldrh	r2, [r3, #8]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	891b      	ldrh	r3, [r3, #8]
 800505e:	4413      	add	r3, r2
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	08010434 	.word	0x08010434
 8005078:	08010628 	.word	0x08010628
 800507c:	08010494 	.word	0x08010494
 8005080:	08010660 	.word	0x08010660
 8005084:	08010690 	.word	0x08010690

08005088 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <pbuf_copy+0x2a>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <pbuf_copy+0x2a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	891a      	ldrh	r2, [r3, #8]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	891b      	ldrh	r3, [r3, #8]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d209      	bcs.n	80050c6 <pbuf_copy+0x3e>
 80050b2:	4b57      	ldr	r3, [pc, #348]	@ (8005210 <pbuf_copy+0x188>)
 80050b4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80050b8:	4956      	ldr	r1, [pc, #344]	@ (8005214 <pbuf_copy+0x18c>)
 80050ba:	4857      	ldr	r0, [pc, #348]	@ (8005218 <pbuf_copy+0x190>)
 80050bc:	f009 feba 	bl	800ee34 <iprintf>
 80050c0:	f06f 030f 	mvn.w	r3, #15
 80050c4:	e09f      	b.n	8005206 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	895b      	ldrh	r3, [r3, #10]
 80050ca:	461a      	mov	r2, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	895b      	ldrh	r3, [r3, #10]
 80050d4:	4619      	mov	r1, r3
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1acb      	subs	r3, r1, r3
 80050da:	429a      	cmp	r2, r3
 80050dc:	d306      	bcc.n	80050ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	895b      	ldrh	r3, [r3, #10]
 80050e2:	461a      	mov	r2, r3
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e005      	b.n	80050f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	895b      	ldrh	r3, [r3, #10]
 80050f0:	461a      	mov	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	18d0      	adds	r0, r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4413      	add	r3, r2
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4619      	mov	r1, r3
 800510c:	f009 ff8b 	bl	800f026 <memcpy>
    offset_to += len;
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4413      	add	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	895b      	ldrh	r3, [r3, #10]
 8005124:	461a      	mov	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	4293      	cmp	r3, r2
 800512a:	d906      	bls.n	800513a <pbuf_copy+0xb2>
 800512c:	4b38      	ldr	r3, [pc, #224]	@ (8005210 <pbuf_copy+0x188>)
 800512e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8005132:	493a      	ldr	r1, [pc, #232]	@ (800521c <pbuf_copy+0x194>)
 8005134:	4838      	ldr	r0, [pc, #224]	@ (8005218 <pbuf_copy+0x190>)
 8005136:	f009 fe7d 	bl	800ee34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	895b      	ldrh	r3, [r3, #10]
 800513e:	461a      	mov	r2, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4293      	cmp	r3, r2
 8005144:	d906      	bls.n	8005154 <pbuf_copy+0xcc>
 8005146:	4b32      	ldr	r3, [pc, #200]	@ (8005210 <pbuf_copy+0x188>)
 8005148:	f240 32da 	movw	r2, #986	@ 0x3da
 800514c:	4934      	ldr	r1, [pc, #208]	@ (8005220 <pbuf_copy+0x198>)
 800514e:	4832      	ldr	r0, [pc, #200]	@ (8005218 <pbuf_copy+0x190>)
 8005150:	f009 fe70 	bl	800ee34 <iprintf>
    if (offset_from >= p_from->len) {
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	895b      	ldrh	r3, [r3, #10]
 8005158:	461a      	mov	r2, r3
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4293      	cmp	r3, r2
 800515e:	d304      	bcc.n	800516a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	895b      	ldrh	r3, [r3, #10]
 800516e:	461a      	mov	r2, r3
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	4293      	cmp	r3, r2
 8005174:	d114      	bne.n	80051a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10c      	bne.n	80051a0 <pbuf_copy+0x118>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d009      	beq.n	80051a0 <pbuf_copy+0x118>
 800518c:	4b20      	ldr	r3, [pc, #128]	@ (8005210 <pbuf_copy+0x188>)
 800518e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8005192:	4924      	ldr	r1, [pc, #144]	@ (8005224 <pbuf_copy+0x19c>)
 8005194:	4820      	ldr	r0, [pc, #128]	@ (8005218 <pbuf_copy+0x190>)
 8005196:	f009 fe4d 	bl	800ee34 <iprintf>
 800519a:	f06f 030f 	mvn.w	r3, #15
 800519e:	e032      	b.n	8005206 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d013      	beq.n	80051ce <pbuf_copy+0x146>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	895a      	ldrh	r2, [r3, #10]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	891b      	ldrh	r3, [r3, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d10d      	bne.n	80051ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <pbuf_copy+0x146>
 80051ba:	4b15      	ldr	r3, [pc, #84]	@ (8005210 <pbuf_copy+0x188>)
 80051bc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80051c0:	4919      	ldr	r1, [pc, #100]	@ (8005228 <pbuf_copy+0x1a0>)
 80051c2:	4815      	ldr	r0, [pc, #84]	@ (8005218 <pbuf_copy+0x190>)
 80051c4:	f009 fe36 	bl	800ee34 <iprintf>
 80051c8:	f06f 0305 	mvn.w	r3, #5
 80051cc:	e01b      	b.n	8005206 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d013      	beq.n	80051fc <pbuf_copy+0x174>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	895a      	ldrh	r2, [r3, #10]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	891b      	ldrh	r3, [r3, #8]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d10d      	bne.n	80051fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <pbuf_copy+0x174>
 80051e8:	4b09      	ldr	r3, [pc, #36]	@ (8005210 <pbuf_copy+0x188>)
 80051ea:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80051ee:	490e      	ldr	r1, [pc, #56]	@ (8005228 <pbuf_copy+0x1a0>)
 80051f0:	4809      	ldr	r0, [pc, #36]	@ (8005218 <pbuf_copy+0x190>)
 80051f2:	f009 fe1f 	bl	800ee34 <iprintf>
 80051f6:	f06f 0305 	mvn.w	r3, #5
 80051fa:	e004      	b.n	8005206 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f47f af61 	bne.w	80050c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	08010434 	.word	0x08010434
 8005214:	080106dc 	.word	0x080106dc
 8005218:	08010494 	.word	0x08010494
 800521c:	0801070c 	.word	0x0801070c
 8005220:	08010724 	.word	0x08010724
 8005224:	08010740 	.word	0x08010740
 8005228:	08010750 	.word	0x08010750

0800522c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	460b      	mov	r3, r1
 800523c:	80fb      	strh	r3, [r7, #6]
 800523e:	4613      	mov	r3, r2
 8005240:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d108      	bne.n	8005262 <pbuf_copy_partial+0x36>
 8005250:	4b2b      	ldr	r3, [pc, #172]	@ (8005300 <pbuf_copy_partial+0xd4>)
 8005252:	f240 420a 	movw	r2, #1034	@ 0x40a
 8005256:	492b      	ldr	r1, [pc, #172]	@ (8005304 <pbuf_copy_partial+0xd8>)
 8005258:	482b      	ldr	r0, [pc, #172]	@ (8005308 <pbuf_copy_partial+0xdc>)
 800525a:	f009 fdeb 	bl	800ee34 <iprintf>
 800525e:	2300      	movs	r3, #0
 8005260:	e04a      	b.n	80052f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d108      	bne.n	800527a <pbuf_copy_partial+0x4e>
 8005268:	4b25      	ldr	r3, [pc, #148]	@ (8005300 <pbuf_copy_partial+0xd4>)
 800526a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800526e:	4927      	ldr	r1, [pc, #156]	@ (800530c <pbuf_copy_partial+0xe0>)
 8005270:	4825      	ldr	r0, [pc, #148]	@ (8005308 <pbuf_copy_partial+0xdc>)
 8005272:	f009 fddf 	bl	800ee34 <iprintf>
 8005276:	2300      	movs	r3, #0
 8005278:	e03e      	b.n	80052f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	e034      	b.n	80052ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005280:	88bb      	ldrh	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <pbuf_copy_partial+0x70>
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	895b      	ldrh	r3, [r3, #10]
 800528a:	88ba      	ldrh	r2, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d305      	bcc.n	800529c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	895b      	ldrh	r3, [r3, #10]
 8005294:	88ba      	ldrh	r2, [r7, #4]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	80bb      	strh	r3, [r7, #4]
 800529a:	e023      	b.n	80052e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	895a      	ldrh	r2, [r3, #10]
 80052a0:	88bb      	ldrh	r3, [r7, #4]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80052a6:	8b3a      	ldrh	r2, [r7, #24]
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d901      	bls.n	80052b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80052b2:	8b7b      	ldrh	r3, [r7, #26]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	18d0      	adds	r0, r2, r3
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	88bb      	ldrh	r3, [r7, #4]
 80052be:	4413      	add	r3, r2
 80052c0:	8b3a      	ldrh	r2, [r7, #24]
 80052c2:	4619      	mov	r1, r3
 80052c4:	f009 feaf 	bl	800f026 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80052c8:	8afa      	ldrh	r2, [r7, #22]
 80052ca:	8b3b      	ldrh	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80052d0:	8b7a      	ldrh	r2, [r7, #26]
 80052d2:	8b3b      	ldrh	r3, [r7, #24]
 80052d4:	4413      	add	r3, r2
 80052d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	8b3b      	ldrh	r3, [r7, #24]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <pbuf_copy_partial+0xca>
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1c4      	bne.n	8005280 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80052f6:	8afb      	ldrh	r3, [r7, #22]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	08010434 	.word	0x08010434
 8005304:	0801077c 	.word	0x0801077c
 8005308:	08010494 	.word	0x08010494
 800530c:	0801079c 	.word	0x0801079c

08005310 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	603a      	str	r2, [r7, #0]
 800531a:	71fb      	strb	r3, [r7, #7]
 800531c:	460b      	mov	r3, r1
 800531e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	8919      	ldrh	r1, [r3, #8]
 8005324:	88ba      	ldrh	r2, [r7, #4]
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fab1 	bl	8004890 <pbuf_alloc>
 800532e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <pbuf_clone+0x2a>
    return NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	e011      	b.n	800535e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7ff fea3 	bl	8005088 <pbuf_copy>
 8005342:	4603      	mov	r3, r0
 8005344:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005346:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d006      	beq.n	800535c <pbuf_clone+0x4c>
 800534e:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <pbuf_clone+0x58>)
 8005350:	f240 5224 	movw	r2, #1316	@ 0x524
 8005354:	4905      	ldr	r1, [pc, #20]	@ (800536c <pbuf_clone+0x5c>)
 8005356:	4806      	ldr	r0, [pc, #24]	@ (8005370 <pbuf_clone+0x60>)
 8005358:	f009 fd6c 	bl	800ee34 <iprintf>
  return q;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	08010434 	.word	0x08010434
 800536c:	080108a8 	.word	0x080108a8
 8005370:	08010494 	.word	0x08010494

08005374 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005378:	f009 fc5c 	bl	800ec34 <rand>
 800537c:	4603      	mov	r3, r0
 800537e:	b29b      	uxth	r3, r3
 8005380:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005384:	b29b      	uxth	r3, r3
 8005386:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800538a:	b29a      	uxth	r2, r3
 800538c:	4b01      	ldr	r3, [pc, #4]	@ (8005394 <tcp_init+0x20>)
 800538e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005390:	bf00      	nop
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000006 	.word	0x20000006

08005398 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	7d1b      	ldrb	r3, [r3, #20]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d105      	bne.n	80053b4 <tcp_free+0x1c>
 80053a8:	4b06      	ldr	r3, [pc, #24]	@ (80053c4 <tcp_free+0x2c>)
 80053aa:	22d4      	movs	r2, #212	@ 0xd4
 80053ac:	4906      	ldr	r1, [pc, #24]	@ (80053c8 <tcp_free+0x30>)
 80053ae:	4807      	ldr	r0, [pc, #28]	@ (80053cc <tcp_free+0x34>)
 80053b0:	f009 fd40 	bl	800ee34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	2001      	movs	r0, #1
 80053b8:	f7fe ff6e 	bl	8004298 <memp_free>
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	08010934 	.word	0x08010934
 80053c8:	08010964 	.word	0x08010964
 80053cc:	08010978 	.word	0x08010978

080053d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	7d1b      	ldrb	r3, [r3, #20]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d105      	bne.n	80053ec <tcp_free_listen+0x1c>
 80053e0:	4b06      	ldr	r3, [pc, #24]	@ (80053fc <tcp_free_listen+0x2c>)
 80053e2:	22df      	movs	r2, #223	@ 0xdf
 80053e4:	4906      	ldr	r1, [pc, #24]	@ (8005400 <tcp_free_listen+0x30>)
 80053e6:	4807      	ldr	r0, [pc, #28]	@ (8005404 <tcp_free_listen+0x34>)
 80053e8:	f009 fd24 	bl	800ee34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	2002      	movs	r0, #2
 80053f0:	f7fe ff52 	bl	8004298 <memp_free>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	08010934 	.word	0x08010934
 8005400:	080109a0 	.word	0x080109a0
 8005404:	08010978 	.word	0x08010978

08005408 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800540c:	f001 f85e 	bl	80064cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005410:	4b07      	ldr	r3, [pc, #28]	@ (8005430 <tcp_tmr+0x28>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	3301      	adds	r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <tcp_tmr+0x28>)
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	4b04      	ldr	r3, [pc, #16]	@ (8005430 <tcp_tmr+0x28>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005428:	f000 fd0e 	bl	8005e48 <tcp_slowtmr>
  }
}
 800542c:	bf00      	nop
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20003a55 	.word	0x20003a55

08005434 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <tcp_remove_listener+0x1c>
 8005444:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <tcp_remove_listener+0x48>)
 8005446:	22ff      	movs	r2, #255	@ 0xff
 8005448:	490d      	ldr	r1, [pc, #52]	@ (8005480 <tcp_remove_listener+0x4c>)
 800544a:	480e      	ldr	r0, [pc, #56]	@ (8005484 <tcp_remove_listener+0x50>)
 800544c:	f009 fcf2 	bl	800ee34 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e00a      	b.n	800546c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d102      	bne.n	8005466 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f1      	bne.n	8005456 <tcp_remove_listener+0x22>
    }
  }
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	08010934 	.word	0x08010934
 8005480:	080109bc 	.word	0x080109bc
 8005484:	08010978 	.word	0x08010978

08005488 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <tcp_listen_closed+0x1c>
 8005496:	4b14      	ldr	r3, [pc, #80]	@ (80054e8 <tcp_listen_closed+0x60>)
 8005498:	f240 1211 	movw	r2, #273	@ 0x111
 800549c:	4913      	ldr	r1, [pc, #76]	@ (80054ec <tcp_listen_closed+0x64>)
 800549e:	4814      	ldr	r0, [pc, #80]	@ (80054f0 <tcp_listen_closed+0x68>)
 80054a0:	f009 fcc8 	bl	800ee34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	7d1b      	ldrb	r3, [r3, #20]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d006      	beq.n	80054ba <tcp_listen_closed+0x32>
 80054ac:	4b0e      	ldr	r3, [pc, #56]	@ (80054e8 <tcp_listen_closed+0x60>)
 80054ae:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80054b2:	4910      	ldr	r1, [pc, #64]	@ (80054f4 <tcp_listen_closed+0x6c>)
 80054b4:	480e      	ldr	r0, [pc, #56]	@ (80054f0 <tcp_listen_closed+0x68>)
 80054b6:	f009 fcbd 	bl	800ee34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054ba:	2301      	movs	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e00b      	b.n	80054d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80054c0:	4a0d      	ldr	r2, [pc, #52]	@ (80054f8 <tcp_listen_closed+0x70>)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ffb1 	bl	8005434 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d9f0      	bls.n	80054c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	08010934 	.word	0x08010934
 80054ec:	080109e4 	.word	0x080109e4
 80054f0:	08010978 	.word	0x08010978
 80054f4:	080109f0 	.word	0x080109f0
 80054f8:	08014458 	.word	0x08014458

080054fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80054fc:	b5b0      	push	{r4, r5, r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af04      	add	r7, sp, #16
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <tcp_close_shutdown+0x20>
 800550e:	4b63      	ldr	r3, [pc, #396]	@ (800569c <tcp_close_shutdown+0x1a0>)
 8005510:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8005514:	4962      	ldr	r1, [pc, #392]	@ (80056a0 <tcp_close_shutdown+0x1a4>)
 8005516:	4863      	ldr	r0, [pc, #396]	@ (80056a4 <tcp_close_shutdown+0x1a8>)
 8005518:	f009 fc8c 	bl	800ee34 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d066      	beq.n	80055f0 <tcp_close_shutdown+0xf4>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	7d1b      	ldrb	r3, [r3, #20]
 8005526:	2b04      	cmp	r3, #4
 8005528:	d003      	beq.n	8005532 <tcp_close_shutdown+0x36>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	7d1b      	ldrb	r3, [r3, #20]
 800552e:	2b07      	cmp	r3, #7
 8005530:	d15e      	bne.n	80055f0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005536:	2b00      	cmp	r3, #0
 8005538:	d104      	bne.n	8005544 <tcp_close_shutdown+0x48>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005542:	d055      	beq.n	80055f0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8b5b      	ldrh	r3, [r3, #26]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <tcp_close_shutdown+0x62>
 8005550:	4b52      	ldr	r3, [pc, #328]	@ (800569c <tcp_close_shutdown+0x1a0>)
 8005552:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8005556:	4954      	ldr	r1, [pc, #336]	@ (80056a8 <tcp_close_shutdown+0x1ac>)
 8005558:	4852      	ldr	r0, [pc, #328]	@ (80056a4 <tcp_close_shutdown+0x1a8>)
 800555a:	f009 fc6b 	bl	800ee34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005566:	687d      	ldr	r5, [r7, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	8ad2      	ldrh	r2, [r2, #22]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	8b09      	ldrh	r1, [r1, #24]
 8005574:	9102      	str	r1, [sp, #8]
 8005576:	9201      	str	r2, [sp, #4]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	462b      	mov	r3, r5
 800557c:	4622      	mov	r2, r4
 800557e:	4601      	mov	r1, r0
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f005 fd8b 	bl	800b09c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f001 fb6e 	bl	8006c68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800558c:	4b47      	ldr	r3, [pc, #284]	@ (80056ac <tcp_close_shutdown+0x1b0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	429a      	cmp	r2, r3
 8005594:	d105      	bne.n	80055a2 <tcp_close_shutdown+0xa6>
 8005596:	4b45      	ldr	r3, [pc, #276]	@ (80056ac <tcp_close_shutdown+0x1b0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4a43      	ldr	r2, [pc, #268]	@ (80056ac <tcp_close_shutdown+0x1b0>)
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e013      	b.n	80055ca <tcp_close_shutdown+0xce>
 80055a2:	4b42      	ldr	r3, [pc, #264]	@ (80056ac <tcp_close_shutdown+0x1b0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e00c      	b.n	80055c4 <tcp_close_shutdown+0xc8>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d104      	bne.n	80055be <tcp_close_shutdown+0xc2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	e005      	b.n	80055ca <tcp_close_shutdown+0xce>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1ef      	bne.n	80055aa <tcp_close_shutdown+0xae>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	60da      	str	r2, [r3, #12]
 80055d0:	4b37      	ldr	r3, [pc, #220]	@ (80056b0 <tcp_close_shutdown+0x1b4>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80055d6:	4b37      	ldr	r3, [pc, #220]	@ (80056b4 <tcp_close_shutdown+0x1b8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d102      	bne.n	80055e6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80055e0:	f004 f802 	bl	80095e8 <tcp_trigger_input_pcb_close>
 80055e4:	e002      	b.n	80055ec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fed6 	bl	8005398 <tcp_free>
      }
      return ERR_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e050      	b.n	8005692 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	7d1b      	ldrb	r3, [r3, #20]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d03b      	beq.n	8005670 <tcp_close_shutdown+0x174>
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	dc44      	bgt.n	8005686 <tcp_close_shutdown+0x18a>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <tcp_close_shutdown+0x10a>
 8005600:	2b01      	cmp	r3, #1
 8005602:	d02a      	beq.n	800565a <tcp_close_shutdown+0x15e>
 8005604:	e03f      	b.n	8005686 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8adb      	ldrh	r3, [r3, #22]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d021      	beq.n	8005652 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800560e:	4b2a      	ldr	r3, [pc, #168]	@ (80056b8 <tcp_close_shutdown+0x1bc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d105      	bne.n	8005624 <tcp_close_shutdown+0x128>
 8005618:	4b27      	ldr	r3, [pc, #156]	@ (80056b8 <tcp_close_shutdown+0x1bc>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	4a26      	ldr	r2, [pc, #152]	@ (80056b8 <tcp_close_shutdown+0x1bc>)
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e013      	b.n	800564c <tcp_close_shutdown+0x150>
 8005624:	4b24      	ldr	r3, [pc, #144]	@ (80056b8 <tcp_close_shutdown+0x1bc>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	e00c      	b.n	8005646 <tcp_close_shutdown+0x14a>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	d104      	bne.n	8005640 <tcp_close_shutdown+0x144>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	e005      	b.n	800564c <tcp_close_shutdown+0x150>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1ef      	bne.n	800562c <tcp_close_shutdown+0x130>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff fea0 	bl	8005398 <tcp_free>
      break;
 8005658:	e01a      	b.n	8005690 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff ff14 	bl	8005488 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4816      	ldr	r0, [pc, #88]	@ (80056bc <tcp_close_shutdown+0x1c0>)
 8005664:	f001 fb50 	bl	8006d08 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff feb1 	bl	80053d0 <tcp_free_listen>
      break;
 800566e:	e00f      	b.n	8005690 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	480e      	ldr	r0, [pc, #56]	@ (80056ac <tcp_close_shutdown+0x1b0>)
 8005674:	f001 fb48 	bl	8006d08 <tcp_pcb_remove>
 8005678:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <tcp_close_shutdown+0x1b4>)
 800567a:	2201      	movs	r2, #1
 800567c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fe8a 	bl	8005398 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005684:	e004      	b.n	8005690 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f81a 	bl	80056c0 <tcp_close_shutdown_fin>
 800568c:	4603      	mov	r3, r0
 800568e:	e000      	b.n	8005692 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bdb0      	pop	{r4, r5, r7, pc}
 800569a:	bf00      	nop
 800569c:	08010934 	.word	0x08010934
 80056a0:	08010a08 	.word	0x08010a08
 80056a4:	08010978 	.word	0x08010978
 80056a8:	08010a28 	.word	0x08010a28
 80056ac:	20003a4c 	.word	0x20003a4c
 80056b0:	20003a54 	.word	0x20003a54
 80056b4:	20003a8c 	.word	0x20003a8c
 80056b8:	20003a44 	.word	0x20003a44
 80056bc:	20003a48 	.word	0x20003a48

080056c0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <tcp_close_shutdown_fin+0x1c>
 80056ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005788 <tcp_close_shutdown_fin+0xc8>)
 80056d0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80056d4:	492d      	ldr	r1, [pc, #180]	@ (800578c <tcp_close_shutdown_fin+0xcc>)
 80056d6:	482e      	ldr	r0, [pc, #184]	@ (8005790 <tcp_close_shutdown_fin+0xd0>)
 80056d8:	f009 fbac 	bl	800ee34 <iprintf>

  switch (pcb->state) {
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	7d1b      	ldrb	r3, [r3, #20]
 80056e0:	2b07      	cmp	r3, #7
 80056e2:	d020      	beq.n	8005726 <tcp_close_shutdown_fin+0x66>
 80056e4:	2b07      	cmp	r3, #7
 80056e6:	dc2b      	bgt.n	8005740 <tcp_close_shutdown_fin+0x80>
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d002      	beq.n	80056f2 <tcp_close_shutdown_fin+0x32>
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d00d      	beq.n	800570c <tcp_close_shutdown_fin+0x4c>
 80056f0:	e026      	b.n	8005740 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f004 fde0 	bl	800a2b8 <tcp_send_fin>
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80056fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11f      	bne.n	8005744 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2205      	movs	r2, #5
 8005708:	751a      	strb	r2, [r3, #20]
      }
      break;
 800570a:	e01b      	b.n	8005744 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f004 fdd3 	bl	800a2b8 <tcp_send_fin>
 8005712:	4603      	mov	r3, r0
 8005714:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d114      	bne.n	8005748 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2205      	movs	r2, #5
 8005722:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005724:	e010      	b.n	8005748 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f004 fdc6 	bl	800a2b8 <tcp_send_fin>
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2209      	movs	r2, #9
 800573c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800573e:	e005      	b.n	800574c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	e01c      	b.n	800577e <tcp_close_shutdown_fin+0xbe>
      break;
 8005744:	bf00      	nop
 8005746:	e002      	b.n	800574e <tcp_close_shutdown_fin+0x8e>
      break;
 8005748:	bf00      	nop
 800574a:	e000      	b.n	800574e <tcp_close_shutdown_fin+0x8e>
      break;
 800574c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800574e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f004 feec 	bl	800a534 <tcp_output>
 800575c:	e00d      	b.n	800577a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800575e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d108      	bne.n	800577a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8b5b      	ldrh	r3, [r3, #26]
 800576c:	f043 0308 	orr.w	r3, r3, #8
 8005770:	b29a      	uxth	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e001      	b.n	800577e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800577a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	08010934 	.word	0x08010934
 800578c:	080109e4 	.word	0x080109e4
 8005790:	08010978 	.word	0x08010978

08005794 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <tcp_close+0x22>
 80057a2:	4b0f      	ldr	r3, [pc, #60]	@ (80057e0 <tcp_close+0x4c>)
 80057a4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80057a8:	490e      	ldr	r1, [pc, #56]	@ (80057e4 <tcp_close+0x50>)
 80057aa:	480f      	ldr	r0, [pc, #60]	@ (80057e8 <tcp_close+0x54>)
 80057ac:	f009 fb42 	bl	800ee34 <iprintf>
 80057b0:	f06f 030f 	mvn.w	r3, #15
 80057b4:	e00f      	b.n	80057d6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	7d1b      	ldrb	r3, [r3, #20]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d006      	beq.n	80057cc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8b5b      	ldrh	r3, [r3, #26]
 80057c2:	f043 0310 	orr.w	r3, r3, #16
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80057cc:	2101      	movs	r1, #1
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fe94 	bl	80054fc <tcp_close_shutdown>
 80057d4:	4603      	mov	r3, r0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	08010934 	.word	0x08010934
 80057e4:	08010a44 	.word	0x08010a44
 80057e8:	08010978 	.word	0x08010978

080057ec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	@ 0x38
 80057f0:	af04      	add	r7, sp, #16
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d107      	bne.n	800580c <tcp_abandon+0x20>
 80057fc:	4b52      	ldr	r3, [pc, #328]	@ (8005948 <tcp_abandon+0x15c>)
 80057fe:	f240 223d 	movw	r2, #573	@ 0x23d
 8005802:	4952      	ldr	r1, [pc, #328]	@ (800594c <tcp_abandon+0x160>)
 8005804:	4852      	ldr	r0, [pc, #328]	@ (8005950 <tcp_abandon+0x164>)
 8005806:	f009 fb15 	bl	800ee34 <iprintf>
 800580a:	e099      	b.n	8005940 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	7d1b      	ldrb	r3, [r3, #20]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d106      	bne.n	8005822 <tcp_abandon+0x36>
 8005814:	4b4c      	ldr	r3, [pc, #304]	@ (8005948 <tcp_abandon+0x15c>)
 8005816:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800581a:	494e      	ldr	r1, [pc, #312]	@ (8005954 <tcp_abandon+0x168>)
 800581c:	484c      	ldr	r0, [pc, #304]	@ (8005950 <tcp_abandon+0x164>)
 800581e:	f009 fb09 	bl	800ee34 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	7d1b      	ldrb	r3, [r3, #20]
 8005826:	2b0a      	cmp	r3, #10
 8005828:	d107      	bne.n	800583a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	484a      	ldr	r0, [pc, #296]	@ (8005958 <tcp_abandon+0x16c>)
 800582e:	f001 fa6b 	bl	8006d08 <tcp_pcb_remove>
    tcp_free(pcb);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fdb0 	bl	8005398 <tcp_free>
 8005838:	e082      	b.n	8005940 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005846:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005854:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7d1b      	ldrb	r3, [r3, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d126      	bne.n	80058b2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8adb      	ldrh	r3, [r3, #22]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d02e      	beq.n	80058ca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800586c:	4b3b      	ldr	r3, [pc, #236]	@ (800595c <tcp_abandon+0x170>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	429a      	cmp	r2, r3
 8005874:	d105      	bne.n	8005882 <tcp_abandon+0x96>
 8005876:	4b39      	ldr	r3, [pc, #228]	@ (800595c <tcp_abandon+0x170>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4a37      	ldr	r2, [pc, #220]	@ (800595c <tcp_abandon+0x170>)
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	e013      	b.n	80058aa <tcp_abandon+0xbe>
 8005882:	4b36      	ldr	r3, [pc, #216]	@ (800595c <tcp_abandon+0x170>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	e00c      	b.n	80058a4 <tcp_abandon+0xb8>
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d104      	bne.n	800589e <tcp_abandon+0xb2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	60da      	str	r2, [r3, #12]
 800589c:	e005      	b.n	80058aa <tcp_abandon+0xbe>
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1ef      	bne.n	800588a <tcp_abandon+0x9e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	e00b      	b.n	80058ca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8adb      	ldrh	r3, [r3, #22]
 80058ba:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4828      	ldr	r0, [pc, #160]	@ (8005960 <tcp_abandon+0x174>)
 80058c0:	f001 fa22 	bl	8006d08 <tcp_pcb_remove>
 80058c4:	4b27      	ldr	r3, [pc, #156]	@ (8005964 <tcp_abandon+0x178>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fed8 	bl	800668c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fecf 	bl	800668c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fec6 	bl	800668c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00e      	beq.n	8005924 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3304      	adds	r3, #4
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	8b12      	ldrh	r2, [r2, #24]
 8005910:	9202      	str	r2, [sp, #8]
 8005912:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005914:	9201      	str	r2, [sp, #4]
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	460b      	mov	r3, r1
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	69b9      	ldr	r1, [r7, #24]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f005 fbbc 	bl	800b09c <tcp_rst>
    }
    last_state = pcb->state;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	7d1b      	ldrb	r3, [r3, #20]
 8005928:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fd34 	bl	8005398 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <tcp_abandon+0x154>
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f06f 010c 	mvn.w	r1, #12
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	4798      	blx	r3
  }
}
 8005940:	3728      	adds	r7, #40	@ 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	08010934 	.word	0x08010934
 800594c:	08010a78 	.word	0x08010a78
 8005950:	08010978 	.word	0x08010978
 8005954:	08010a94 	.word	0x08010a94
 8005958:	20003a50 	.word	0x20003a50
 800595c:	20003a44 	.word	0x20003a44
 8005960:	20003a4c 	.word	0x20003a4c
 8005964:	20003a54 	.word	0x20003a54

08005968 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005970:	2101      	movs	r1, #1
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff ff3a 	bl	80057ec <tcp_abandon>
}
 8005978:	bf00      	nop
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800598e:	2304      	movs	r3, #4
 8005990:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8005998:	4b3e      	ldr	r3, [pc, #248]	@ (8005a94 <tcp_bind+0x114>)
 800599a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <tcp_bind+0x36>
 80059a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005a98 <tcp_bind+0x118>)
 80059a4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80059a8:	493c      	ldr	r1, [pc, #240]	@ (8005a9c <tcp_bind+0x11c>)
 80059aa:	483d      	ldr	r0, [pc, #244]	@ (8005aa0 <tcp_bind+0x120>)
 80059ac:	f009 fa42 	bl	800ee34 <iprintf>
 80059b0:	f06f 030f 	mvn.w	r3, #15
 80059b4:	e06a      	b.n	8005a8c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	7d1b      	ldrb	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <tcp_bind+0x52>
 80059be:	4b36      	ldr	r3, [pc, #216]	@ (8005a98 <tcp_bind+0x118>)
 80059c0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80059c4:	4937      	ldr	r1, [pc, #220]	@ (8005aa4 <tcp_bind+0x124>)
 80059c6:	4836      	ldr	r0, [pc, #216]	@ (8005aa0 <tcp_bind+0x120>)
 80059c8:	f009 fa34 	bl	800ee34 <iprintf>
 80059cc:	f06f 0305 	mvn.w	r3, #5
 80059d0:	e05c      	b.n	8005a8c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80059d2:	88fb      	ldrh	r3, [r7, #6]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <tcp_bind+0x6c>
    port = tcp_new_port();
 80059d8:	f000 f9f0 	bl	8005dbc <tcp_new_port>
 80059dc:	4603      	mov	r3, r0
 80059de:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d135      	bne.n	8005a52 <tcp_bind+0xd2>
      return ERR_BUF;
 80059e6:	f06f 0301 	mvn.w	r3, #1
 80059ea:	e04f      	b.n	8005a8c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e02b      	b.n	8005a4a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80059f2:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa8 <tcp_bind+0x128>)
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	e01e      	b.n	8005a3e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	8adb      	ldrh	r3, [r3, #22]
 8005a04:	88fa      	ldrh	r2, [r7, #6]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d116      	bne.n	8005a38 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8005a0a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <tcp_bind+0xb2>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d102      	bne.n	8005a38 <tcp_bind+0xb8>
              return ERR_USE;
 8005a32:	f06f 0307 	mvn.w	r3, #7
 8005a36:	e029      	b.n	8005a8c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1dd      	bne.n	8005a00 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	3301      	adds	r3, #1
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	dbcf      	blt.n	80059f2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00c      	beq.n	8005a72 <tcp_bind+0xf2>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <tcp_bind+0xec>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	e000      	b.n	8005a6e <tcp_bind+0xee>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005a78:	4b0c      	ldr	r3, [pc, #48]	@ (8005aac <tcp_bind+0x12c>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	60da      	str	r2, [r3, #12]
 8005a80:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <tcp_bind+0x12c>)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	f005 fccb 	bl	800b420 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	08014480 	.word	0x08014480
 8005a98:	08010934 	.word	0x08010934
 8005a9c:	08010ac8 	.word	0x08010ac8
 8005aa0:	08010978 	.word	0x08010978
 8005aa4:	08010ae0 	.word	0x08010ae0
 8005aa8:	08014458 	.word	0x08014458
 8005aac:	20003a44 	.word	0x20003a44

08005ab0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4613      	mov	r3, r2
 8005abc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <tcp_accept_null+0x22>
 8005ac4:	4b07      	ldr	r3, [pc, #28]	@ (8005ae4 <tcp_accept_null+0x34>)
 8005ac6:	f240 320f 	movw	r2, #783	@ 0x30f
 8005aca:	4907      	ldr	r1, [pc, #28]	@ (8005ae8 <tcp_accept_null+0x38>)
 8005acc:	4807      	ldr	r0, [pc, #28]	@ (8005aec <tcp_accept_null+0x3c>)
 8005ace:	f009 f9b1 	bl	800ee34 <iprintf>

  tcp_abort(pcb);
 8005ad2:	68b8      	ldr	r0, [r7, #8]
 8005ad4:	f7ff ff48 	bl	8005968 <tcp_abort>

  return ERR_ABRT;
 8005ad8:	f06f 030c 	mvn.w	r3, #12
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	08010934 	.word	0x08010934
 8005ae8:	08010b08 	.word	0x08010b08
 8005aec:	08010978 	.word	0x08010978

08005af0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	2200      	movs	r2, #0
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f806 	bl	8005b14 <tcp_listen_with_backlog_and_err>
 8005b08:	4603      	mov	r3, r0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <tcp_listen_with_backlog_and_err+0x2c>
 8005b2c:	4b47      	ldr	r3, [pc, #284]	@ (8005c4c <tcp_listen_with_backlog_and_err+0x138>)
 8005b2e:	f240 3259 	movw	r2, #857	@ 0x359
 8005b32:	4947      	ldr	r1, [pc, #284]	@ (8005c50 <tcp_listen_with_backlog_and_err+0x13c>)
 8005b34:	4847      	ldr	r0, [pc, #284]	@ (8005c54 <tcp_listen_with_backlog_and_err+0x140>)
 8005b36:	f009 f97d 	bl	800ee34 <iprintf>
 8005b3a:	23f0      	movs	r3, #240	@ 0xf0
 8005b3c:	76fb      	strb	r3, [r7, #27]
 8005b3e:	e079      	b.n	8005c34 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	7d1b      	ldrb	r3, [r3, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d009      	beq.n	8005b5c <tcp_listen_with_backlog_and_err+0x48>
 8005b48:	4b40      	ldr	r3, [pc, #256]	@ (8005c4c <tcp_listen_with_backlog_and_err+0x138>)
 8005b4a:	f240 325a 	movw	r2, #858	@ 0x35a
 8005b4e:	4942      	ldr	r1, [pc, #264]	@ (8005c58 <tcp_listen_with_backlog_and_err+0x144>)
 8005b50:	4840      	ldr	r0, [pc, #256]	@ (8005c54 <tcp_listen_with_backlog_and_err+0x140>)
 8005b52:	f009 f96f 	bl	800ee34 <iprintf>
 8005b56:	23f1      	movs	r3, #241	@ 0xf1
 8005b58:	76fb      	strb	r3, [r7, #27]
 8005b5a:	e06b      	b.n	8005c34 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	7d1b      	ldrb	r3, [r3, #20]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d104      	bne.n	8005b6e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8005b68:	23f7      	movs	r3, #247	@ 0xf7
 8005b6a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005b6c:	e062      	b.n	8005c34 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005b6e:	2002      	movs	r0, #2
 8005b70:	f7fe fb22 	bl	80041b8 <memp_malloc>
 8005b74:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8005b7c:	23ff      	movs	r3, #255	@ 0xff
 8005b7e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005b80:	e058      	b.n	8005c34 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8ada      	ldrh	r2, [r3, #22]
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	2201      	movs	r2, #1
 8005b96:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	7d5a      	ldrb	r2, [r3, #21]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	7a5a      	ldrb	r2, [r3, #9]
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2200      	movs	r2, #0
 8005bac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	7ada      	ldrb	r2, [r3, #11]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	7a9a      	ldrb	r2, [r3, #10]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8adb      	ldrh	r3, [r3, #22]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d021      	beq.n	8005c12 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8005bce:	4b23      	ldr	r3, [pc, #140]	@ (8005c5c <tcp_listen_with_backlog_and_err+0x148>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d105      	bne.n	8005be4 <tcp_listen_with_backlog_and_err+0xd0>
 8005bd8:	4b20      	ldr	r3, [pc, #128]	@ (8005c5c <tcp_listen_with_backlog_and_err+0x148>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	4a1f      	ldr	r2, [pc, #124]	@ (8005c5c <tcp_listen_with_backlog_and_err+0x148>)
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e013      	b.n	8005c0c <tcp_listen_with_backlog_and_err+0xf8>
 8005be4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c5c <tcp_listen_with_backlog_and_err+0x148>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	e00c      	b.n	8005c06 <tcp_listen_with_backlog_and_err+0xf2>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d104      	bne.n	8005c00 <tcp_listen_with_backlog_and_err+0xec>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	60da      	str	r2, [r3, #12]
 8005bfe:	e005      	b.n	8005c0c <tcp_listen_with_backlog_and_err+0xf8>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1ef      	bne.n	8005bec <tcp_listen_with_backlog_and_err+0xd8>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff fbc0 	bl	8005398 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4a11      	ldr	r2, [pc, #68]	@ (8005c60 <tcp_listen_with_backlog_and_err+0x14c>)
 8005c1c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8005c1e:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <tcp_listen_with_backlog_and_err+0x150>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	4a0f      	ldr	r2, [pc, #60]	@ (8005c64 <tcp_listen_with_backlog_and_err+0x150>)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	f005 fbf8 	bl	800b420 <tcp_timer_needed>
  res = ERR_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7efa      	ldrb	r2, [r7, #27]
 8005c3e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8005c40:	69fb      	ldr	r3, [r7, #28]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08010934 	.word	0x08010934
 8005c50:	08010b28 	.word	0x08010b28
 8005c54:	08010978 	.word	0x08010978
 8005c58:	08010b58 	.word	0x08010b58
 8005c5c:	20003a44 	.word	0x20003a44
 8005c60:	08005ab1 	.word	0x08005ab1
 8005c64:	20003a48 	.word	0x20003a48

08005c68 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <tcp_update_rcv_ann_wnd+0x1c>
 8005c76:	4b25      	ldr	r3, [pc, #148]	@ (8005d0c <tcp_update_rcv_ann_wnd+0xa4>)
 8005c78:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8005c7c:	4924      	ldr	r1, [pc, #144]	@ (8005d10 <tcp_update_rcv_ann_wnd+0xa8>)
 8005c7e:	4825      	ldr	r0, [pc, #148]	@ (8005d14 <tcp_update_rcv_ann_wnd+0xac>)
 8005c80:	f009 f8d8 	bl	800ee34 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005c8c:	4413      	add	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8005c98:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8005c9c:	bf28      	it	cs
 8005c9e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8005ca2:	b292      	uxth	r2, r2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	db08      	blt.n	8005cc0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	e020      	b.n	8005d02 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	dd03      	ble.n	8005cd6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cd4:	e014      	b.n	8005d00 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce8:	d306      	bcc.n	8005cf8 <tcp_update_rcv_ann_wnd+0x90>
 8005cea:	4b08      	ldr	r3, [pc, #32]	@ (8005d0c <tcp_update_rcv_ann_wnd+0xa4>)
 8005cec:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8005cf0:	4909      	ldr	r1, [pc, #36]	@ (8005d18 <tcp_update_rcv_ann_wnd+0xb0>)
 8005cf2:	4808      	ldr	r0, [pc, #32]	@ (8005d14 <tcp_update_rcv_ann_wnd+0xac>)
 8005cf4:	f009 f89e 	bl	800ee34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8005d00:	2300      	movs	r3, #0
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	08010934 	.word	0x08010934
 8005d10:	08010b90 	.word	0x08010b90
 8005d14:	08010978 	.word	0x08010978
 8005d18:	08010bb4 	.word	0x08010bb4

08005d1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d107      	bne.n	8005d3e <tcp_recved+0x22>
 8005d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005dac <tcp_recved+0x90>)
 8005d30:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8005d34:	491e      	ldr	r1, [pc, #120]	@ (8005db0 <tcp_recved+0x94>)
 8005d36:	481f      	ldr	r0, [pc, #124]	@ (8005db4 <tcp_recved+0x98>)
 8005d38:	f009 f87c 	bl	800ee34 <iprintf>
 8005d3c:	e032      	b.n	8005da4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	7d1b      	ldrb	r3, [r3, #20]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d106      	bne.n	8005d54 <tcp_recved+0x38>
 8005d46:	4b19      	ldr	r3, [pc, #100]	@ (8005dac <tcp_recved+0x90>)
 8005d48:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8005d4c:	491a      	ldr	r1, [pc, #104]	@ (8005db8 <tcp_recved+0x9c>)
 8005d4e:	4819      	ldr	r0, [pc, #100]	@ (8005db4 <tcp_recved+0x98>)
 8005d50:	f009 f870 	bl	800ee34 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005d58:	887b      	ldrh	r3, [r7, #2]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005d5e:	89fb      	ldrh	r3, [r7, #14]
 8005d60:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005d64:	d804      	bhi.n	8005d70 <tcp_recved+0x54>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6a:	89fa      	ldrh	r2, [r7, #14]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d204      	bcs.n	8005d7a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005d76:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d78:	e002      	b.n	8005d80 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	89fa      	ldrh	r2, [r7, #14]
 8005d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff71 	bl	8005c68 <tcp_update_rcv_ann_wnd>
 8005d86:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8005d8e:	d309      	bcc.n	8005da4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8b5b      	ldrh	r3, [r3, #26]
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f004 fbc8 	bl	800a534 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	08010934 	.word	0x08010934
 8005db0:	08010bd0 	.word	0x08010bd0
 8005db4:	08010978 	.word	0x08010978
 8005db8:	08010be8 	.word	0x08010be8

08005dbc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8005dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e40 <tcp_new_port+0x84>)
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	4b1c      	ldr	r3, [pc, #112]	@ (8005e40 <tcp_new_port+0x84>)
 8005dd0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e40 <tcp_new_port+0x84>)
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d103      	bne.n	8005de6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005dde:	4b18      	ldr	r3, [pc, #96]	@ (8005e40 <tcp_new_port+0x84>)
 8005de0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8005de4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005de6:	2300      	movs	r3, #0
 8005de8:	71fb      	strb	r3, [r7, #7]
 8005dea:	e01e      	b.n	8005e2a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	4a15      	ldr	r2, [pc, #84]	@ (8005e44 <tcp_new_port+0x88>)
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	e011      	b.n	8005e1e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	8ada      	ldrh	r2, [r3, #22]
 8005dfe:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <tcp_new_port+0x84>)
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d108      	bne.n	8005e18 <tcp_new_port+0x5c>
        n++;
 8005e06:	88bb      	ldrh	r3, [r7, #4]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8005e0c:	88bb      	ldrh	r3, [r7, #4]
 8005e0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e12:	d3d8      	bcc.n	8005dc6 <tcp_new_port+0xa>
          return 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e00d      	b.n	8005e34 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1ea      	bne.n	8005dfa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	3301      	adds	r3, #1
 8005e28:	71fb      	strb	r3, [r7, #7]
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d9dd      	bls.n	8005dec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8005e30:	4b03      	ldr	r3, [pc, #12]	@ (8005e40 <tcp_new_port+0x84>)
 8005e32:	881b      	ldrh	r3, [r3, #0]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000006 	.word	0x20000006
 8005e44:	08014458 	.word	0x08014458

08005e48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005e48:	b5b0      	push	{r4, r5, r7, lr}
 8005e4a:	b090      	sub	sp, #64	@ 0x40
 8005e4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8005e54:	4b95      	ldr	r3, [pc, #596]	@ (80060ac <tcp_slowtmr+0x264>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	4a94      	ldr	r2, [pc, #592]	@ (80060ac <tcp_slowtmr+0x264>)
 8005e5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005e5e:	4b94      	ldr	r3, [pc, #592]	@ (80060b0 <tcp_slowtmr+0x268>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4b92      	ldr	r3, [pc, #584]	@ (80060b0 <tcp_slowtmr+0x268>)
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	e000      	b.n	8005e6e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8005e6c:	bf00      	nop
  prev = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8005e72:	4b90      	ldr	r3, [pc, #576]	@ (80060b4 <tcp_slowtmr+0x26c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8005e78:	e29f      	b.n	80063ba <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7c:	7d1b      	ldrb	r3, [r3, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <tcp_slowtmr+0x48>
 8005e82:	4b8d      	ldr	r3, [pc, #564]	@ (80060b8 <tcp_slowtmr+0x270>)
 8005e84:	f240 42be 	movw	r2, #1214	@ 0x4be
 8005e88:	498c      	ldr	r1, [pc, #560]	@ (80060bc <tcp_slowtmr+0x274>)
 8005e8a:	488d      	ldr	r0, [pc, #564]	@ (80060c0 <tcp_slowtmr+0x278>)
 8005e8c:	f008 ffd2 	bl	800ee34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e92:	7d1b      	ldrb	r3, [r3, #20]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d106      	bne.n	8005ea6 <tcp_slowtmr+0x5e>
 8005e98:	4b87      	ldr	r3, [pc, #540]	@ (80060b8 <tcp_slowtmr+0x270>)
 8005e9a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8005e9e:	4989      	ldr	r1, [pc, #548]	@ (80060c4 <tcp_slowtmr+0x27c>)
 8005ea0:	4887      	ldr	r0, [pc, #540]	@ (80060c0 <tcp_slowtmr+0x278>)
 8005ea2:	f008 ffc7 	bl	800ee34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea8:	7d1b      	ldrb	r3, [r3, #20]
 8005eaa:	2b0a      	cmp	r3, #10
 8005eac:	d106      	bne.n	8005ebc <tcp_slowtmr+0x74>
 8005eae:	4b82      	ldr	r3, [pc, #520]	@ (80060b8 <tcp_slowtmr+0x270>)
 8005eb0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8005eb4:	4984      	ldr	r1, [pc, #528]	@ (80060c8 <tcp_slowtmr+0x280>)
 8005eb6:	4882      	ldr	r0, [pc, #520]	@ (80060c0 <tcp_slowtmr+0x278>)
 8005eb8:	f008 ffbc 	bl	800ee34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebe:	7f9a      	ldrb	r2, [r3, #30]
 8005ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80060b0 <tcp_slowtmr+0x268>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d105      	bne.n	8005ed4 <tcp_slowtmr+0x8c>
      prev = pcb;
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8005ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8005ed2:	e272      	b.n	80063ba <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8005ed4:	4b76      	ldr	r3, [pc, #472]	@ (80060b0 <tcp_slowtmr+0x268>)
 8005ed6:	781a      	ldrb	r2, [r3, #0]
 8005ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eda:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eea:	7d1b      	ldrb	r3, [r3, #20]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d10a      	bne.n	8005f06 <tcp_slowtmr+0xbe>
 8005ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ef6:	2b05      	cmp	r3, #5
 8005ef8:	d905      	bls.n	8005f06 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005efe:	3301      	adds	r3, #1
 8005f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005f04:	e11e      	b.n	8006144 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f0c:	2b0b      	cmp	r3, #11
 8005f0e:	d905      	bls.n	8005f1c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8005f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f14:	3301      	adds	r3, #1
 8005f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005f1a:	e113      	b.n	8006144 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8005f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d075      	beq.n	8006012 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <tcp_slowtmr+0xf4>
 8005f2e:	4b62      	ldr	r3, [pc, #392]	@ (80060b8 <tcp_slowtmr+0x270>)
 8005f30:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8005f34:	4965      	ldr	r1, [pc, #404]	@ (80060cc <tcp_slowtmr+0x284>)
 8005f36:	4862      	ldr	r0, [pc, #392]	@ (80060c0 <tcp_slowtmr+0x278>)
 8005f38:	f008 ff7c 	bl	800ee34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d106      	bne.n	8005f52 <tcp_slowtmr+0x10a>
 8005f44:	4b5c      	ldr	r3, [pc, #368]	@ (80060b8 <tcp_slowtmr+0x270>)
 8005f46:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8005f4a:	4961      	ldr	r1, [pc, #388]	@ (80060d0 <tcp_slowtmr+0x288>)
 8005f4c:	485c      	ldr	r0, [pc, #368]	@ (80060c0 <tcp_slowtmr+0x278>)
 8005f4e:	f008 ff71 	bl	800ee34 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8005f58:	2b0b      	cmp	r3, #11
 8005f5a:	d905      	bls.n	8005f68 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8005f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f60:	3301      	adds	r3, #1
 8005f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005f66:	e0ed      	b.n	8006144 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	4a58      	ldr	r2, [pc, #352]	@ (80060d4 <tcp_slowtmr+0x28c>)
 8005f72:	5cd3      	ldrb	r3, [r2, r3]
 8005f74:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f78:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005f7c:	7c7a      	ldrb	r2, [r7, #17]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d907      	bls.n	8005f92 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8005f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005f88:	3301      	adds	r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8005f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005f98:	7c7a      	ldrb	r2, [r7, #17]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	f200 80d2 	bhi.w	8006144 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8005fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d108      	bne.n	8005fc0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005fae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fb0:	f005 f968 	bl	800b284 <tcp_zero_window_probe>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8005fba:	2300      	movs	r3, #0
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	e011      	b.n	8005fe4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fca:	f004 f82d 	bl	800a028 <tcp_split_unsent_seg>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d107      	bne.n	8005fe4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8005fd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fd6:	f004 faad 	bl	800a534 <tcp_output>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 80ac 	beq.w	8006144 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005ffa:	2b06      	cmp	r3, #6
 8005ffc:	f200 80a2 	bhi.w	8006144 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8006000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006002:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006006:	3301      	adds	r3, #1
 8006008:	b2da      	uxtb	r2, r3
 800600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8006010:	e098      	b.n	8006144 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006014:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006018:	2b00      	cmp	r3, #0
 800601a:	db0f      	blt.n	800603c <tcp_slowtmr+0x1f4>
 800601c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006022:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006026:	4293      	cmp	r3, r2
 8006028:	d008      	beq.n	800603c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800602a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006030:	b29b      	uxth	r3, r3
 8006032:	3301      	adds	r3, #1
 8006034:	b29b      	uxth	r3, r3
 8006036:	b21a      	sxth	r2, r3
 8006038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800603c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8006042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006044:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006048:	429a      	cmp	r2, r3
 800604a:	db7b      	blt.n	8006144 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800604c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800604e:	f004 fd65 	bl	800ab1c <tcp_rexmit_rto_prepare>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <tcp_slowtmr+0x220>
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605c:	2b00      	cmp	r3, #0
 800605e:	d171      	bne.n	8006144 <tcp_slowtmr+0x2fc>
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d06d      	beq.n	8006144 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8006068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606a:	7d1b      	ldrb	r3, [r3, #20]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d03a      	beq.n	80060e6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006076:	2b0c      	cmp	r3, #12
 8006078:	bf28      	it	cs
 800607a:	230c      	movcs	r3, #12
 800607c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800607e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006080:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006084:	10db      	asrs	r3, r3, #3
 8006086:	b21b      	sxth	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006090:	4413      	add	r3, r2
 8006092:	7efa      	ldrb	r2, [r7, #27]
 8006094:	4910      	ldr	r1, [pc, #64]	@ (80060d8 <tcp_slowtmr+0x290>)
 8006096:	5c8a      	ldrb	r2, [r1, r2]
 8006098:	4093      	lsls	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80060a2:	4293      	cmp	r3, r2
 80060a4:	dc1a      	bgt.n	80060dc <tcp_slowtmr+0x294>
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	b21a      	sxth	r2, r3
 80060aa:	e019      	b.n	80060e0 <tcp_slowtmr+0x298>
 80060ac:	20003a40 	.word	0x20003a40
 80060b0:	20003a56 	.word	0x20003a56
 80060b4:	20003a4c 	.word	0x20003a4c
 80060b8:	08010934 	.word	0x08010934
 80060bc:	08010c78 	.word	0x08010c78
 80060c0:	08010978 	.word	0x08010978
 80060c4:	08010ca4 	.word	0x08010ca4
 80060c8:	08010cd0 	.word	0x08010cd0
 80060cc:	08010d00 	.word	0x08010d00
 80060d0:	08010d34 	.word	0x08010d34
 80060d4:	08014450 	.word	0x08014450
 80060d8:	08014440 	.word	0x08014440
 80060dc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80060e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80060e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e8:	2200      	movs	r2, #0
 80060ea:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80060f8:	4293      	cmp	r3, r2
 80060fa:	bf28      	it	cs
 80060fc:	4613      	movcs	r3, r2
 80060fe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006100:	8a7b      	ldrh	r3, [r7, #18]
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006108:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	b29b      	uxth	r3, r3
 800611a:	429a      	cmp	r2, r3
 800611c:	d206      	bcs.n	800612c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800611e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006120:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006128:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8006136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006138:	2200      	movs	r2, #0
 800613a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800613e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006140:	f004 fd5c 	bl	800abfc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8006144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006146:	7d1b      	ldrb	r3, [r3, #20]
 8006148:	2b06      	cmp	r3, #6
 800614a:	d111      	bne.n	8006170 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800614c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614e:	8b5b      	ldrh	r3, [r3, #26]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006158:	4b9d      	ldr	r3, [pc, #628]	@ (80063d0 <tcp_slowtmr+0x588>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b28      	cmp	r3, #40	@ 0x28
 8006164:	d904      	bls.n	8006170 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8006166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800616a:	3301      	adds	r3, #1
 800616c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	7a5b      	ldrb	r3, [r3, #9]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d04c      	beq.n	8006216 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800617c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006180:	2b04      	cmp	r3, #4
 8006182:	d003      	beq.n	800618c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006188:	2b07      	cmp	r3, #7
 800618a:	d144      	bne.n	8006216 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800618c:	4b90      	ldr	r3, [pc, #576]	@ (80063d0 <tcp_slowtmr+0x588>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800619c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80061a0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80061a4:	498b      	ldr	r1, [pc, #556]	@ (80063d4 <tcp_slowtmr+0x58c>)
 80061a6:	fba1 1303 	umull	r1, r3, r1, r3
 80061aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d90a      	bls.n	80061c6 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80061b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061b4:	3301      	adds	r3, #1
 80061b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80061ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061be:	3301      	adds	r3, #1
 80061c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80061c4:	e027      	b.n	8006216 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80061c6:	4b82      	ldr	r3, [pc, #520]	@ (80063d0 <tcp_slowtmr+0x588>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80061dc:	4618      	mov	r0, r3
 80061de:	4b7e      	ldr	r3, [pc, #504]	@ (80063d8 <tcp_slowtmr+0x590>)
 80061e0:	fb00 f303 	mul.w	r3, r0, r3
 80061e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80061e6:	497b      	ldr	r1, [pc, #492]	@ (80063d4 <tcp_slowtmr+0x58c>)
 80061e8:	fba1 1303 	umull	r1, r3, r1, r3
 80061ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d911      	bls.n	8006216 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 80061f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061f4:	f005 f806 	bl	800b204 <tcp_keepalive>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80061fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006202:	2b00      	cmp	r3, #0
 8006204:	d107      	bne.n	8006216 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8006206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006208:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800620c:	3301      	adds	r3, #1
 800620e:	b2da      	uxtb	r2, r3
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006212:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621a:	2b00      	cmp	r3, #0
 800621c:	d011      	beq.n	8006242 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800621e:	4b6c      	ldr	r3, [pc, #432]	@ (80063d0 <tcp_slowtmr+0x588>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800622e:	4619      	mov	r1, r3
 8006230:	460b      	mov	r3, r1
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	440b      	add	r3, r1
 8006236:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006238:	429a      	cmp	r2, r3
 800623a:	d302      	bcc.n	8006242 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800623c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800623e:	f000 fec7 	bl	8006fd0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8006242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006244:	7d1b      	ldrb	r3, [r3, #20]
 8006246:	2b03      	cmp	r3, #3
 8006248:	d10b      	bne.n	8006262 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800624a:	4b61      	ldr	r3, [pc, #388]	@ (80063d0 <tcp_slowtmr+0x588>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b28      	cmp	r3, #40	@ 0x28
 8006256:	d904      	bls.n	8006262 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8006258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800625c:	3301      	adds	r3, #1
 800625e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8006262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006264:	7d1b      	ldrb	r3, [r3, #20]
 8006266:	2b09      	cmp	r3, #9
 8006268:	d10b      	bne.n	8006282 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800626a:	4b59      	ldr	r3, [pc, #356]	@ (80063d0 <tcp_slowtmr+0x588>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2bf0      	cmp	r3, #240	@ 0xf0
 8006276:	d904      	bls.n	8006282 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8006278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800627c:	3301      	adds	r3, #1
 800627e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8006282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006286:	2b00      	cmp	r3, #0
 8006288:	d060      	beq.n	800634c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006290:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006292:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006294:	f000 fce8 	bl	8006c68 <tcp_pcb_purge>
      if (prev != NULL) {
 8006298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629a:	2b00      	cmp	r3, #0
 800629c:	d010      	beq.n	80062c0 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800629e:	4b4f      	ldr	r3, [pc, #316]	@ (80063dc <tcp_slowtmr+0x594>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d106      	bne.n	80062b6 <tcp_slowtmr+0x46e>
 80062a8:	4b4d      	ldr	r3, [pc, #308]	@ (80063e0 <tcp_slowtmr+0x598>)
 80062aa:	f240 526d 	movw	r2, #1389	@ 0x56d
 80062ae:	494d      	ldr	r1, [pc, #308]	@ (80063e4 <tcp_slowtmr+0x59c>)
 80062b0:	484d      	ldr	r0, [pc, #308]	@ (80063e8 <tcp_slowtmr+0x5a0>)
 80062b2:	f008 fdbf 	bl	800ee34 <iprintf>
        prev->next = pcb->next;
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	60da      	str	r2, [r3, #12]
 80062be:	e00f      	b.n	80062e0 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80062c0:	4b46      	ldr	r3, [pc, #280]	@ (80063dc <tcp_slowtmr+0x594>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d006      	beq.n	80062d8 <tcp_slowtmr+0x490>
 80062ca:	4b45      	ldr	r3, [pc, #276]	@ (80063e0 <tcp_slowtmr+0x598>)
 80062cc:	f240 5271 	movw	r2, #1393	@ 0x571
 80062d0:	4946      	ldr	r1, [pc, #280]	@ (80063ec <tcp_slowtmr+0x5a4>)
 80062d2:	4845      	ldr	r0, [pc, #276]	@ (80063e8 <tcp_slowtmr+0x5a0>)
 80062d4:	f008 fdae 	bl	800ee34 <iprintf>
        tcp_active_pcbs = pcb->next;
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4a3f      	ldr	r2, [pc, #252]	@ (80063dc <tcp_slowtmr+0x594>)
 80062de:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80062e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d013      	beq.n	8006310 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80062ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80062f0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80062f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f4:	3304      	adds	r3, #4
 80062f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062f8:	8ad2      	ldrh	r2, [r2, #22]
 80062fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062fc:	8b09      	ldrh	r1, [r1, #24]
 80062fe:	9102      	str	r1, [sp, #8]
 8006300:	9201      	str	r2, [sp, #4]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	462b      	mov	r3, r5
 8006306:	4622      	mov	r2, r4
 8006308:	4601      	mov	r1, r0
 800630a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800630c:	f004 fec6 	bl	800b09c <tcp_rst>
      err_arg = pcb->callback_arg;
 8006310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006318:	7d1b      	ldrb	r3, [r3, #20]
 800631a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800631c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006326:	6838      	ldr	r0, [r7, #0]
 8006328:	f7ff f836 	bl	8005398 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800632c:	4b30      	ldr	r3, [pc, #192]	@ (80063f0 <tcp_slowtmr+0x5a8>)
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d004      	beq.n	8006342 <tcp_slowtmr+0x4fa>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f06f 010c 	mvn.w	r1, #12
 800633e:	68b8      	ldr	r0, [r7, #8]
 8006340:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006342:	4b2b      	ldr	r3, [pc, #172]	@ (80063f0 <tcp_slowtmr+0x5a8>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d037      	beq.n	80063ba <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800634a:	e590      	b.n	8005e6e <tcp_slowtmr+0x26>
      prev = pcb;
 800634c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	7f1b      	ldrb	r3, [r3, #28]
 800635a:	3301      	adds	r3, #1
 800635c:	b2da      	uxtb	r2, r3
 800635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006360:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	7f1a      	ldrb	r2, [r3, #28]
 8006366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006368:	7f5b      	ldrb	r3, [r3, #29]
 800636a:	429a      	cmp	r2, r3
 800636c:	d325      	bcc.n	80063ba <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	2200      	movs	r2, #0
 8006372:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8006374:	4b1e      	ldr	r3, [pc, #120]	@ (80063f0 <tcp_slowtmr+0x5a8>)
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <tcp_slowtmr+0x554>
 8006384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800638a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800638c:	6912      	ldr	r2, [r2, #16]
 800638e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006390:	4610      	mov	r0, r2
 8006392:	4798      	blx	r3
 8006394:	4603      	mov	r3, r0
 8006396:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800639a:	e002      	b.n	80063a2 <tcp_slowtmr+0x55a>
 800639c:	2300      	movs	r3, #0
 800639e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80063a2:	4b13      	ldr	r3, [pc, #76]	@ (80063f0 <tcp_slowtmr+0x5a8>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f47f ad60 	bne.w	8005e6c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80063ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <tcp_slowtmr+0x572>
          tcp_output(prev);
 80063b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063b6:	f004 f8bd 	bl	800a534 <tcp_output>
  while (pcb != NULL) {
 80063ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f47f ad5c 	bne.w	8005e7a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80063c6:	4b0b      	ldr	r3, [pc, #44]	@ (80063f4 <tcp_slowtmr+0x5ac>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80063cc:	e067      	b.n	800649e <tcp_slowtmr+0x656>
 80063ce:	bf00      	nop
 80063d0:	20003a40 	.word	0x20003a40
 80063d4:	10624dd3 	.word	0x10624dd3
 80063d8:	000124f8 	.word	0x000124f8
 80063dc:	20003a4c 	.word	0x20003a4c
 80063e0:	08010934 	.word	0x08010934
 80063e4:	08010d6c 	.word	0x08010d6c
 80063e8:	08010978 	.word	0x08010978
 80063ec:	08010d98 	.word	0x08010d98
 80063f0:	20003a54 	.word	0x20003a54
 80063f4:	20003a50 	.word	0x20003a50
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80063f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fa:	7d1b      	ldrb	r3, [r3, #20]
 80063fc:	2b0a      	cmp	r3, #10
 80063fe:	d006      	beq.n	800640e <tcp_slowtmr+0x5c6>
 8006400:	4b2b      	ldr	r3, [pc, #172]	@ (80064b0 <tcp_slowtmr+0x668>)
 8006402:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8006406:	492b      	ldr	r1, [pc, #172]	@ (80064b4 <tcp_slowtmr+0x66c>)
 8006408:	482b      	ldr	r0, [pc, #172]	@ (80064b8 <tcp_slowtmr+0x670>)
 800640a:	f008 fd13 	bl	800ee34 <iprintf>
    pcb_remove = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006414:	4b29      	ldr	r3, [pc, #164]	@ (80064bc <tcp_slowtmr+0x674>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2bf0      	cmp	r3, #240	@ 0xf0
 8006420:	d904      	bls.n	800642c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8006422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006426:	3301      	adds	r3, #1
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800642c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006430:	2b00      	cmp	r3, #0
 8006432:	d02f      	beq.n	8006494 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006434:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006436:	f000 fc17 	bl	8006c68 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006440:	4b1f      	ldr	r3, [pc, #124]	@ (80064c0 <tcp_slowtmr+0x678>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006446:	429a      	cmp	r2, r3
 8006448:	d106      	bne.n	8006458 <tcp_slowtmr+0x610>
 800644a:	4b19      	ldr	r3, [pc, #100]	@ (80064b0 <tcp_slowtmr+0x668>)
 800644c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8006450:	491c      	ldr	r1, [pc, #112]	@ (80064c4 <tcp_slowtmr+0x67c>)
 8006452:	4819      	ldr	r0, [pc, #100]	@ (80064b8 <tcp_slowtmr+0x670>)
 8006454:	f008 fcee 	bl	800ee34 <iprintf>
        prev->next = pcb->next;
 8006458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	60da      	str	r2, [r3, #12]
 8006460:	e00f      	b.n	8006482 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006462:	4b17      	ldr	r3, [pc, #92]	@ (80064c0 <tcp_slowtmr+0x678>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006468:	429a      	cmp	r2, r3
 800646a:	d006      	beq.n	800647a <tcp_slowtmr+0x632>
 800646c:	4b10      	ldr	r3, [pc, #64]	@ (80064b0 <tcp_slowtmr+0x668>)
 800646e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8006472:	4915      	ldr	r1, [pc, #84]	@ (80064c8 <tcp_slowtmr+0x680>)
 8006474:	4810      	ldr	r0, [pc, #64]	@ (80064b8 <tcp_slowtmr+0x670>)
 8006476:	f008 fcdd 	bl	800ee34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800647a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	4a10      	ldr	r2, [pc, #64]	@ (80064c0 <tcp_slowtmr+0x678>)
 8006480:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006484:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800648c:	69f8      	ldr	r0, [r7, #28]
 800648e:	f7fe ff83 	bl	8005398 <tcp_free>
 8006492:	e004      	b.n	800649e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1a9      	bne.n	80063f8 <tcp_slowtmr+0x5b0>
    }
  }
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	3730      	adds	r7, #48	@ 0x30
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bdb0      	pop	{r4, r5, r7, pc}
 80064ae:	bf00      	nop
 80064b0:	08010934 	.word	0x08010934
 80064b4:	08010dc4 	.word	0x08010dc4
 80064b8:	08010978 	.word	0x08010978
 80064bc:	20003a40 	.word	0x20003a40
 80064c0:	20003a50 	.word	0x20003a50
 80064c4:	08010df4 	.word	0x08010df4
 80064c8:	08010e1c 	.word	0x08010e1c

080064cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80064d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006588 <tcp_fasttmr+0xbc>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	3301      	adds	r3, #1
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b2b      	ldr	r3, [pc, #172]	@ (8006588 <tcp_fasttmr+0xbc>)
 80064dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80064de:	4b2b      	ldr	r3, [pc, #172]	@ (800658c <tcp_fasttmr+0xc0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80064e4:	e048      	b.n	8006578 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	7f9a      	ldrb	r2, [r3, #30]
 80064ea:	4b27      	ldr	r3, [pc, #156]	@ (8006588 <tcp_fasttmr+0xbc>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d03f      	beq.n	8006572 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80064f2:	4b25      	ldr	r3, [pc, #148]	@ (8006588 <tcp_fasttmr+0xbc>)
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8b5b      	ldrh	r3, [r3, #26]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d010      	beq.n	8006528 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	8b5b      	ldrh	r3, [r3, #26]
 800650a:	f043 0302 	orr.w	r3, r3, #2
 800650e:	b29a      	uxth	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f004 f80d 	bl	800a534 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	8b5b      	ldrh	r3, [r3, #26]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	b29a      	uxth	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8b5b      	ldrh	r3, [r3, #26]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d009      	beq.n	8006548 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8b5b      	ldrh	r3, [r3, #26]
 8006538:	f023 0308 	bic.w	r3, r3, #8
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff f8bc 	bl	80056c0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006556:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <tcp_fasttmr+0xc4>)
 8006558:	2200      	movs	r2, #0
 800655a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f819 	bl	8006594 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006562:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <tcp_fasttmr+0xc4>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d000      	beq.n	800656c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800656a:	e7b8      	b.n	80064de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	607b      	str	r3, [r7, #4]
 8006570:	e002      	b.n	8006578 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1b3      	bne.n	80064e6 <tcp_fasttmr+0x1a>
    }
  }
}
 800657e:	bf00      	nop
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20003a56 	.word	0x20003a56
 800658c:	20003a4c 	.word	0x20003a4c
 8006590:	20003a54 	.word	0x20003a54

08006594 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <tcp_process_refused_data+0x22>
 80065a2:	4b37      	ldr	r3, [pc, #220]	@ (8006680 <tcp_process_refused_data+0xec>)
 80065a4:	f240 6209 	movw	r2, #1545	@ 0x609
 80065a8:	4936      	ldr	r1, [pc, #216]	@ (8006684 <tcp_process_refused_data+0xf0>)
 80065aa:	4837      	ldr	r0, [pc, #220]	@ (8006688 <tcp_process_refused_data+0xf4>)
 80065ac:	f008 fc42 	bl	800ee34 <iprintf>
 80065b0:	f06f 030f 	mvn.w	r3, #15
 80065b4:	e060      	b.n	8006678 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065ba:	7b5b      	ldrb	r3, [r3, #13]
 80065bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <tcp_process_refused_data+0x58>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6918      	ldr	r0, [r3, #16]
 80065de:	2300      	movs	r3, #0
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	47a0      	blx	r4
 80065e6:	4603      	mov	r3, r0
 80065e8:	73fb      	strb	r3, [r7, #15]
 80065ea:	e007      	b.n	80065fc <tcp_process_refused_data+0x68>
 80065ec:	2300      	movs	r3, #0
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	2000      	movs	r0, #0
 80065f4:	f000 f8c2 	bl	800677c <tcp_recv_null>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80065fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d12a      	bne.n	800665a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d033      	beq.n	8006676 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006612:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006616:	d005      	beq.n	8006624 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661c:	3301      	adds	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00b      	beq.n	8006646 <tcp_process_refused_data+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6918      	ldr	r0, [r3, #16]
 8006638:	2300      	movs	r3, #0
 800663a:	2200      	movs	r2, #0
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	47a0      	blx	r4
 8006640:	4603      	mov	r3, r0
 8006642:	73fb      	strb	r3, [r7, #15]
 8006644:	e001      	b.n	800664a <tcp_process_refused_data+0xb6>
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800664a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800664e:	f113 0f0d 	cmn.w	r3, #13
 8006652:	d110      	bne.n	8006676 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006654:	f06f 030c 	mvn.w	r3, #12
 8006658:	e00e      	b.n	8006678 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800665a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800665e:	f113 0f0d 	cmn.w	r3, #13
 8006662:	d102      	bne.n	800666a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006664:	f06f 030c 	mvn.w	r3, #12
 8006668:	e006      	b.n	8006678 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8006670:	f06f 0304 	mvn.w	r3, #4
 8006674:	e000      	b.n	8006678 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	bd90      	pop	{r4, r7, pc}
 8006680:	08010934 	.word	0x08010934
 8006684:	08010e44 	.word	0x08010e44
 8006688:	08010978 	.word	0x08010978

0800668c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006694:	e007      	b.n	80066a6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f80a 	bl	80066b6 <tcp_seg_free>
    seg = next;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1f4      	bne.n	8006696 <tcp_segs_free+0xa>
  }
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00c      	beq.n	80066de <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fe fbc1 	bl	8004e58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	2003      	movs	r0, #3
 80066da:	f7fd fddd 	bl	8004298 <memp_free>
  }
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d107      	bne.n	800670a <tcp_setprio+0x22>
 80066fa:	4b07      	ldr	r3, [pc, #28]	@ (8006718 <tcp_setprio+0x30>)
 80066fc:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8006700:	4906      	ldr	r1, [pc, #24]	@ (800671c <tcp_setprio+0x34>)
 8006702:	4807      	ldr	r0, [pc, #28]	@ (8006720 <tcp_setprio+0x38>)
 8006704:	f008 fb96 	bl	800ee34 <iprintf>
 8006708:	e002      	b.n	8006710 <tcp_setprio+0x28>

  pcb->prio = prio;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	755a      	strb	r2, [r3, #21]
}
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	08010934 	.word	0x08010934
 800671c:	08010e6c 	.word	0x08010e6c
 8006720:	08010978 	.word	0x08010978

08006724 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <tcp_seg_copy+0x1c>
 8006732:	4b0f      	ldr	r3, [pc, #60]	@ (8006770 <tcp_seg_copy+0x4c>)
 8006734:	f240 6282 	movw	r2, #1666	@ 0x682
 8006738:	490e      	ldr	r1, [pc, #56]	@ (8006774 <tcp_seg_copy+0x50>)
 800673a:	480f      	ldr	r0, [pc, #60]	@ (8006778 <tcp_seg_copy+0x54>)
 800673c:	f008 fb7a 	bl	800ee34 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006740:	2003      	movs	r0, #3
 8006742:	f7fd fd39 	bl	80041b8 <memp_malloc>
 8006746:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <tcp_seg_copy+0x2e>
    return NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	e00a      	b.n	8006768 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006752:	2210      	movs	r2, #16
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f008 fc65 	bl	800f026 <memcpy>
  pbuf_ref(cseg->p);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fc19 	bl	8004f98 <pbuf_ref>
  return cseg;
 8006766:	68fb      	ldr	r3, [r7, #12]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	08010934 	.word	0x08010934
 8006774:	08010e88 	.word	0x08010e88
 8006778:	08010978 	.word	0x08010978

0800677c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d109      	bne.n	80067a4 <tcp_recv_null+0x28>
 8006790:	4b12      	ldr	r3, [pc, #72]	@ (80067dc <tcp_recv_null+0x60>)
 8006792:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8006796:	4912      	ldr	r1, [pc, #72]	@ (80067e0 <tcp_recv_null+0x64>)
 8006798:	4812      	ldr	r0, [pc, #72]	@ (80067e4 <tcp_recv_null+0x68>)
 800679a:	f008 fb4b 	bl	800ee34 <iprintf>
 800679e:	f06f 030f 	mvn.w	r3, #15
 80067a2:	e016      	b.n	80067d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	891b      	ldrh	r3, [r3, #8]
 80067ae:	4619      	mov	r1, r3
 80067b0:	68b8      	ldr	r0, [r7, #8]
 80067b2:	f7ff fab3 	bl	8005d1c <tcp_recved>
    pbuf_free(p);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fe fb4e 	bl	8004e58 <pbuf_free>
 80067bc:	e008      	b.n	80067d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80067be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80067c6:	68b8      	ldr	r0, [r7, #8]
 80067c8:	f7fe ffe4 	bl	8005794 <tcp_close>
 80067cc:	4603      	mov	r3, r0
 80067ce:	e000      	b.n	80067d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	08010934 	.word	0x08010934
 80067e0:	08010ea4 	.word	0x08010ea4
 80067e4:	08010978 	.word	0x08010978

080067e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80067f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	db01      	blt.n	80067fe <tcp_kill_prio+0x16>
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	e000      	b.n	8006800 <tcp_kill_prio+0x18>
 80067fe:	237f      	movs	r3, #127	@ 0x7f
 8006800:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d034      	beq.n	8006872 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	3b01      	subs	r3, #1
 800680c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006816:	4b19      	ldr	r3, [pc, #100]	@ (800687c <tcp_kill_prio+0x94>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	e01f      	b.n	800685e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	7d5b      	ldrb	r3, [r3, #21]
 8006822:	7afa      	ldrb	r2, [r7, #11]
 8006824:	429a      	cmp	r2, r3
 8006826:	d80c      	bhi.n	8006842 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800682c:	7afa      	ldrb	r2, [r7, #11]
 800682e:	429a      	cmp	r2, r3
 8006830:	d112      	bne.n	8006858 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006832:	4b13      	ldr	r3, [pc, #76]	@ (8006880 <tcp_kill_prio+0x98>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	429a      	cmp	r2, r3
 8006840:	d80a      	bhi.n	8006858 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006842:	4b0f      	ldr	r3, [pc, #60]	@ (8006880 <tcp_kill_prio+0x98>)
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	7d5b      	ldrb	r3, [r3, #21]
 8006856:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1dc      	bne.n	800681e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f7ff f87c 	bl	8005968 <tcp_abort>
 8006870:	e000      	b.n	8006874 <tcp_kill_prio+0x8c>
    return;
 8006872:	bf00      	nop
  }
}
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20003a4c 	.word	0x20003a4c
 8006880:	20003a40 	.word	0x20003a40

08006884 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800688e:	79fb      	ldrb	r3, [r7, #7]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d009      	beq.n	80068a8 <tcp_kill_state+0x24>
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	2b09      	cmp	r3, #9
 8006898:	d006      	beq.n	80068a8 <tcp_kill_state+0x24>
 800689a:	4b1a      	ldr	r3, [pc, #104]	@ (8006904 <tcp_kill_state+0x80>)
 800689c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80068a0:	4919      	ldr	r1, [pc, #100]	@ (8006908 <tcp_kill_state+0x84>)
 80068a2:	481a      	ldr	r0, [pc, #104]	@ (800690c <tcp_kill_state+0x88>)
 80068a4:	f008 fac6 	bl	800ee34 <iprintf>

  inactivity = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068b0:	4b17      	ldr	r3, [pc, #92]	@ (8006910 <tcp_kill_state+0x8c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e017      	b.n	80068e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	7d1b      	ldrb	r3, [r3, #20]
 80068bc:	79fa      	ldrb	r2, [r7, #7]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d10f      	bne.n	80068e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80068c2:	4b14      	ldr	r3, [pc, #80]	@ (8006914 <tcp_kill_state+0x90>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d807      	bhi.n	80068e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80068d2:	4b10      	ldr	r3, [pc, #64]	@ (8006914 <tcp_kill_state+0x90>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e4      	bne.n	80068b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80068f4:	2100      	movs	r1, #0
 80068f6:	6938      	ldr	r0, [r7, #16]
 80068f8:	f7fe ff78 	bl	80057ec <tcp_abandon>
  }
}
 80068fc:	bf00      	nop
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	08010934 	.word	0x08010934
 8006908:	08010ec0 	.word	0x08010ec0
 800690c:	08010978 	.word	0x08010978
 8006910:	20003a4c 	.word	0x20003a4c
 8006914:	20003a40 	.word	0x20003a40

08006918 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006926:	4b12      	ldr	r3, [pc, #72]	@ (8006970 <tcp_kill_timewait+0x58>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e012      	b.n	8006954 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800692e:	4b11      	ldr	r3, [pc, #68]	@ (8006974 <tcp_kill_timewait+0x5c>)
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	429a      	cmp	r2, r3
 800693c:	d807      	bhi.n	800694e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800693e:	4b0d      	ldr	r3, [pc, #52]	@ (8006974 <tcp_kill_timewait+0x5c>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e9      	bne.n	800692e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006960:	68b8      	ldr	r0, [r7, #8]
 8006962:	f7ff f801 	bl	8005968 <tcp_abort>
  }
}
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20003a50 	.word	0x20003a50
 8006974:	20003a40 	.word	0x20003a40

08006978 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800697e:	4b10      	ldr	r3, [pc, #64]	@ (80069c0 <tcp_handle_closepend+0x48>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006984:	e014      	b.n	80069b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	8b5b      	ldrh	r3, [r3, #26]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8b5b      	ldrh	r3, [r3, #26]
 800699c:	f023 0308 	bic.w	r3, r3, #8
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fe fe8a 	bl	80056c0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e7      	bne.n	8006986 <tcp_handle_closepend+0xe>
  }
}
 80069b6:	bf00      	nop
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20003a4c 	.word	0x20003a4c

080069c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80069ce:	2001      	movs	r0, #1
 80069d0:	f7fd fbf2 	bl	80041b8 <memp_malloc>
 80069d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d126      	bne.n	8006a2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80069dc:	f7ff ffcc 	bl	8006978 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80069e0:	f7ff ff9a 	bl	8006918 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80069e4:	2001      	movs	r0, #1
 80069e6:	f7fd fbe7 	bl	80041b8 <memp_malloc>
 80069ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d11b      	bne.n	8006a2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80069f2:	2009      	movs	r0, #9
 80069f4:	f7ff ff46 	bl	8006884 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80069f8:	2001      	movs	r0, #1
 80069fa:	f7fd fbdd 	bl	80041b8 <memp_malloc>
 80069fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d111      	bne.n	8006a2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006a06:	2008      	movs	r0, #8
 8006a08:	f7ff ff3c 	bl	8006884 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	f7fd fbd3 	bl	80041b8 <memp_malloc>
 8006a12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d107      	bne.n	8006a2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fee3 	bl	80067e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a22:	2001      	movs	r0, #1
 8006a24:	f7fd fbc8 	bl	80041b8 <memp_malloc>
 8006a28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d03f      	beq.n	8006ab0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006a30:	229c      	movs	r2, #156	@ 0x9c
 8006a32:	2100      	movs	r1, #0
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f008 fa62 	bl	800eefe <memset>
    pcb->prio = prio;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	79fa      	ldrb	r2, [r7, #7]
 8006a3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006a46:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	22ff      	movs	r2, #255	@ 0xff
 8006a5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006a66:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2206      	movs	r2, #6
 8006a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2206      	movs	r2, #6
 8006a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a7c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8006a86:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <tcp_alloc+0xf8>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <tcp_alloc+0xfc>)
 8006a90:	781a      	ldrb	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006a9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4a08      	ldr	r2, [pc, #32]	@ (8006ac4 <tcp_alloc+0x100>)
 8006aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4a07      	ldr	r2, [pc, #28]	@ (8006ac8 <tcp_alloc+0x104>)
 8006aac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20003a40 	.word	0x20003a40
 8006ac0:	20003a56 	.word	0x20003a56
 8006ac4:	0800677d 	.word	0x0800677d
 8006ac8:	006ddd00 	.word	0x006ddd00

08006acc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8006ad6:	2040      	movs	r0, #64	@ 0x40
 8006ad8:	f7ff ff74 	bl	80069c4 <tcp_alloc>
 8006adc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8006ade:	68fb      	ldr	r3, [r7, #12]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	611a      	str	r2, [r3, #16]
  }
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00e      	beq.n	8006b3a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7d1b      	ldrb	r3, [r3, #20]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d106      	bne.n	8006b32 <tcp_recv+0x26>
 8006b24:	4b07      	ldr	r3, [pc, #28]	@ (8006b44 <tcp_recv+0x38>)
 8006b26:	f240 72df 	movw	r2, #2015	@ 0x7df
 8006b2a:	4907      	ldr	r1, [pc, #28]	@ (8006b48 <tcp_recv+0x3c>)
 8006b2c:	4807      	ldr	r0, [pc, #28]	@ (8006b4c <tcp_recv+0x40>)
 8006b2e:	f008 f981 	bl	800ee34 <iprintf>
    pcb->recv = recv;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	08010934 	.word	0x08010934
 8006b48:	08010ed0 	.word	0x08010ed0
 8006b4c:	08010978 	.word	0x08010978

08006b50 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	7d1b      	ldrb	r3, [r3, #20]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d106      	bne.n	8006b76 <tcp_sent+0x26>
 8006b68:	4b07      	ldr	r3, [pc, #28]	@ (8006b88 <tcp_sent+0x38>)
 8006b6a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8006b6e:	4907      	ldr	r1, [pc, #28]	@ (8006b8c <tcp_sent+0x3c>)
 8006b70:	4807      	ldr	r0, [pc, #28]	@ (8006b90 <tcp_sent+0x40>)
 8006b72:	f008 f95f 	bl	800ee34 <iprintf>
    pcb->sent = sent;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	08010934 	.word	0x08010934
 8006b8c:	08010ef8 	.word	0x08010ef8
 8006b90:	08010978 	.word	0x08010978

08006b94 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00e      	beq.n	8006bc2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	7d1b      	ldrb	r3, [r3, #20]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d106      	bne.n	8006bba <tcp_err+0x26>
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <tcp_err+0x38>)
 8006bae:	f640 020d 	movw	r2, #2061	@ 0x80d
 8006bb2:	4907      	ldr	r1, [pc, #28]	@ (8006bd0 <tcp_err+0x3c>)
 8006bb4:	4807      	ldr	r0, [pc, #28]	@ (8006bd4 <tcp_err+0x40>)
 8006bb6:	f008 f93d 	bl	800ee34 <iprintf>
    pcb->errf = err;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	08010934 	.word	0x08010934
 8006bd0:	08010f20 	.word	0x08010f20
 8006bd4:	08010978 	.word	0x08010978

08006bd8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <tcp_accept+0x22>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7d1b      	ldrb	r3, [r3, #20]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d104      	bne.n	8006bfa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	619a      	str	r2, [r3, #24]
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d107      	bne.n	8006c2c <tcp_poll+0x24>
 8006c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c58 <tcp_poll+0x50>)
 8006c1e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8006c22:	490e      	ldr	r1, [pc, #56]	@ (8006c5c <tcp_poll+0x54>)
 8006c24:	480e      	ldr	r0, [pc, #56]	@ (8006c60 <tcp_poll+0x58>)
 8006c26:	f008 f905 	bl	800ee34 <iprintf>
 8006c2a:	e011      	b.n	8006c50 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	7d1b      	ldrb	r3, [r3, #20]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d106      	bne.n	8006c42 <tcp_poll+0x3a>
 8006c34:	4b08      	ldr	r3, [pc, #32]	@ (8006c58 <tcp_poll+0x50>)
 8006c36:	f640 023e 	movw	r2, #2110	@ 0x83e
 8006c3a:	490a      	ldr	r1, [pc, #40]	@ (8006c64 <tcp_poll+0x5c>)
 8006c3c:	4808      	ldr	r0, [pc, #32]	@ (8006c60 <tcp_poll+0x58>)
 8006c3e:	f008 f8f9 	bl	800ee34 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	79fa      	ldrb	r2, [r7, #7]
 8006c4e:	775a      	strb	r2, [r3, #29]
}
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	08010934 	.word	0x08010934
 8006c5c:	08010f48 	.word	0x08010f48
 8006c60:	08010978 	.word	0x08010978
 8006c64:	08010f60 	.word	0x08010f60

08006c68 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d107      	bne.n	8006c86 <tcp_pcb_purge+0x1e>
 8006c76:	4b21      	ldr	r3, [pc, #132]	@ (8006cfc <tcp_pcb_purge+0x94>)
 8006c78:	f640 0251 	movw	r2, #2129	@ 0x851
 8006c7c:	4920      	ldr	r1, [pc, #128]	@ (8006d00 <tcp_pcb_purge+0x98>)
 8006c7e:	4821      	ldr	r0, [pc, #132]	@ (8006d04 <tcp_pcb_purge+0x9c>)
 8006c80:	f008 f8d8 	bl	800ee34 <iprintf>
 8006c84:	e037      	b.n	8006cf6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	7d1b      	ldrb	r3, [r3, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d033      	beq.n	8006cf6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006c92:	2b0a      	cmp	r3, #10
 8006c94:	d02f      	beq.n	8006cf6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d02b      	beq.n	8006cf6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe f8d4 	bl	8004e58 <pbuf_free>
      pcb->refused_data = NULL;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f986 	bl	8006fd0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006cca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fcdb 	bl	800668c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fcd6 	bl	800668c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	08010934 	.word	0x08010934
 8006d00:	08010f80 	.word	0x08010f80
 8006d04:	08010978 	.word	0x08010978

08006d08 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d106      	bne.n	8006d26 <tcp_pcb_remove+0x1e>
 8006d18:	4b3e      	ldr	r3, [pc, #248]	@ (8006e14 <tcp_pcb_remove+0x10c>)
 8006d1a:	f640 0283 	movw	r2, #2179	@ 0x883
 8006d1e:	493e      	ldr	r1, [pc, #248]	@ (8006e18 <tcp_pcb_remove+0x110>)
 8006d20:	483e      	ldr	r0, [pc, #248]	@ (8006e1c <tcp_pcb_remove+0x114>)
 8006d22:	f008 f887 	bl	800ee34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d106      	bne.n	8006d3a <tcp_pcb_remove+0x32>
 8006d2c:	4b39      	ldr	r3, [pc, #228]	@ (8006e14 <tcp_pcb_remove+0x10c>)
 8006d2e:	f640 0284 	movw	r2, #2180	@ 0x884
 8006d32:	493b      	ldr	r1, [pc, #236]	@ (8006e20 <tcp_pcb_remove+0x118>)
 8006d34:	4839      	ldr	r0, [pc, #228]	@ (8006e1c <tcp_pcb_remove+0x114>)
 8006d36:	f008 f87d 	bl	800ee34 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d105      	bne.n	8006d50 <tcp_pcb_remove+0x48>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68da      	ldr	r2, [r3, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e013      	b.n	8006d78 <tcp_pcb_remove+0x70>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e00c      	b.n	8006d72 <tcp_pcb_remove+0x6a>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d104      	bne.n	8006d6c <tcp_pcb_remove+0x64>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	60da      	str	r2, [r3, #12]
 8006d6a:	e005      	b.n	8006d78 <tcp_pcb_remove+0x70>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1ef      	bne.n	8006d58 <tcp_pcb_remove+0x50>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006d7e:	6838      	ldr	r0, [r7, #0]
 8006d80:	f7ff ff72 	bl	8006c68 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	7d1b      	ldrb	r3, [r3, #20]
 8006d88:	2b0a      	cmp	r3, #10
 8006d8a:	d013      	beq.n	8006db4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d00f      	beq.n	8006db4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	8b5b      	ldrh	r3, [r3, #26]
 8006d98:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d009      	beq.n	8006db4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	8b5b      	ldrh	r3, [r3, #26]
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006dae:	6838      	ldr	r0, [r7, #0]
 8006db0:	f003 fbc0 	bl	800a534 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	7d1b      	ldrb	r3, [r3, #20]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d020      	beq.n	8006dfe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d006      	beq.n	8006dd2 <tcp_pcb_remove+0xca>
 8006dc4:	4b13      	ldr	r3, [pc, #76]	@ (8006e14 <tcp_pcb_remove+0x10c>)
 8006dc6:	f640 0293 	movw	r2, #2195	@ 0x893
 8006dca:	4916      	ldr	r1, [pc, #88]	@ (8006e24 <tcp_pcb_remove+0x11c>)
 8006dcc:	4813      	ldr	r0, [pc, #76]	@ (8006e1c <tcp_pcb_remove+0x114>)
 8006dce:	f008 f831 	bl	800ee34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <tcp_pcb_remove+0xe0>
 8006dda:	4b0e      	ldr	r3, [pc, #56]	@ (8006e14 <tcp_pcb_remove+0x10c>)
 8006ddc:	f640 0294 	movw	r2, #2196	@ 0x894
 8006de0:	4911      	ldr	r1, [pc, #68]	@ (8006e28 <tcp_pcb_remove+0x120>)
 8006de2:	480e      	ldr	r0, [pc, #56]	@ (8006e1c <tcp_pcb_remove+0x114>)
 8006de4:	f008 f826 	bl	800ee34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d006      	beq.n	8006dfe <tcp_pcb_remove+0xf6>
 8006df0:	4b08      	ldr	r3, [pc, #32]	@ (8006e14 <tcp_pcb_remove+0x10c>)
 8006df2:	f640 0296 	movw	r2, #2198	@ 0x896
 8006df6:	490d      	ldr	r1, [pc, #52]	@ (8006e2c <tcp_pcb_remove+0x124>)
 8006df8:	4808      	ldr	r0, [pc, #32]	@ (8006e1c <tcp_pcb_remove+0x114>)
 8006dfa:	f008 f81b 	bl	800ee34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2200      	movs	r2, #0
 8006e02:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	08010934 	.word	0x08010934
 8006e18:	08010f9c 	.word	0x08010f9c
 8006e1c:	08010978 	.word	0x08010978
 8006e20:	08010fb8 	.word	0x08010fb8
 8006e24:	08010fd8 	.word	0x08010fd8
 8006e28:	08010ff0 	.word	0x08010ff0
 8006e2c:	0801100c 	.word	0x0801100c

08006e30 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <tcp_next_iss+0x1c>
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e68 <tcp_next_iss+0x38>)
 8006e40:	f640 02af 	movw	r2, #2223	@ 0x8af
 8006e44:	4909      	ldr	r1, [pc, #36]	@ (8006e6c <tcp_next_iss+0x3c>)
 8006e46:	480a      	ldr	r0, [pc, #40]	@ (8006e70 <tcp_next_iss+0x40>)
 8006e48:	f007 fff4 	bl	800ee34 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006e4c:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <tcp_next_iss+0x44>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	4b09      	ldr	r3, [pc, #36]	@ (8006e78 <tcp_next_iss+0x48>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4413      	add	r3, r2
 8006e56:	4a07      	ldr	r2, [pc, #28]	@ (8006e74 <tcp_next_iss+0x44>)
 8006e58:	6013      	str	r3, [r2, #0]
  return iss;
 8006e5a:	4b06      	ldr	r3, [pc, #24]	@ (8006e74 <tcp_next_iss+0x44>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	08010934 	.word	0x08010934
 8006e6c:	08011024 	.word	0x08011024
 8006e70:	08010978 	.word	0x08010978
 8006e74:	20000008 	.word	0x20000008
 8006e78:	20003a40 	.word	0x20003a40

08006e7c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4603      	mov	r3, r0
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <tcp_eff_send_mss_netif+0x22>
 8006e90:	4b14      	ldr	r3, [pc, #80]	@ (8006ee4 <tcp_eff_send_mss_netif+0x68>)
 8006e92:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8006e96:	4914      	ldr	r1, [pc, #80]	@ (8006ee8 <tcp_eff_send_mss_netif+0x6c>)
 8006e98:	4814      	ldr	r0, [pc, #80]	@ (8006eec <tcp_eff_send_mss_netif+0x70>)
 8006e9a:	f007 ffcb 	bl	800ee34 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006ea4:	89fb      	ldrh	r3, [r7, #14]
 8006ea6:	e019      	b.n	8006edc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006eac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006eae:	8afb      	ldrh	r3, [r7, #22]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d012      	beq.n	8006eda <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006eb4:	2328      	movs	r3, #40	@ 0x28
 8006eb6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006eb8:	8afa      	ldrh	r2, [r7, #22]
 8006eba:	8abb      	ldrh	r3, [r7, #20]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d904      	bls.n	8006eca <tcp_eff_send_mss_netif+0x4e>
 8006ec0:	8afa      	ldrh	r2, [r7, #22]
 8006ec2:	8abb      	ldrh	r3, [r7, #20]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	e000      	b.n	8006ecc <tcp_eff_send_mss_netif+0x50>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006ece:	8a7a      	ldrh	r2, [r7, #18]
 8006ed0:	89fb      	ldrh	r3, [r7, #14]
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	bf28      	it	cs
 8006ed6:	4613      	movcs	r3, r2
 8006ed8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006eda:	89fb      	ldrh	r3, [r7, #14]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	08010934 	.word	0x08010934
 8006ee8:	08011040 	.word	0x08011040
 8006eec:	08010978 	.word	0x08010978

08006ef0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d119      	bne.n	8006f38 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006f04:	4b10      	ldr	r3, [pc, #64]	@ (8006f48 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006f06:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8006f0a:	4910      	ldr	r1, [pc, #64]	@ (8006f4c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006f0c:	4810      	ldr	r0, [pc, #64]	@ (8006f50 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006f0e:	f007 ff91 	bl	800ee34 <iprintf>

  while (pcb != NULL) {
 8006f12:	e011      	b.n	8006f38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d108      	bne.n	8006f32 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7fe fd1e 	bl	8005968 <tcp_abort>
      pcb = next;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e002      	b.n	8006f38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1ea      	bne.n	8006f14 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	08010934 	.word	0x08010934
 8006f4c:	08011068 	.word	0x08011068
 8006f50:	08010978 	.word	0x08010978

08006f54 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d02a      	beq.n	8006fba <tcp_netif_ip_addr_changed+0x66>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d026      	beq.n	8006fba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006f6c:	4b15      	ldr	r3, [pc, #84]	@ (8006fc4 <tcp_netif_ip_addr_changed+0x70>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff ffbc 	bl	8006ef0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006f78:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <tcp_netif_ip_addr_changed+0x74>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff ffb6 	bl	8006ef0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d017      	beq.n	8006fba <tcp_netif_ip_addr_changed+0x66>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d013      	beq.n	8006fba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f92:	4b0e      	ldr	r3, [pc, #56]	@ (8006fcc <tcp_netif_ip_addr_changed+0x78>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	e00c      	b.n	8006fb4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d103      	bne.n	8006fae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ef      	bne.n	8006f9a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20003a4c 	.word	0x20003a4c
 8006fc8:	20003a44 	.word	0x20003a44
 8006fcc:	20003a48 	.word	0x20003a48

08006fd0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fb51 	bl	800668c <tcp_segs_free>
    pcb->ooseq = NULL;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006ff8:	b590      	push	{r4, r7, lr}
 8006ffa:	b08d      	sub	sp, #52	@ 0x34
 8006ffc:	af04      	add	r7, sp, #16
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d105      	bne.n	8007014 <tcp_input+0x1c>
 8007008:	4b9b      	ldr	r3, [pc, #620]	@ (8007278 <tcp_input+0x280>)
 800700a:	2283      	movs	r2, #131	@ 0x83
 800700c:	499b      	ldr	r1, [pc, #620]	@ (800727c <tcp_input+0x284>)
 800700e:	489c      	ldr	r0, [pc, #624]	@ (8007280 <tcp_input+0x288>)
 8007010:	f007 ff10 	bl	800ee34 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	4a9a      	ldr	r2, [pc, #616]	@ (8007284 <tcp_input+0x28c>)
 800701a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	895b      	ldrh	r3, [r3, #10]
 8007020:	2b13      	cmp	r3, #19
 8007022:	f240 83d1 	bls.w	80077c8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007026:	4b98      	ldr	r3, [pc, #608]	@ (8007288 <tcp_input+0x290>)
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	4a97      	ldr	r2, [pc, #604]	@ (8007288 <tcp_input+0x290>)
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	4611      	mov	r1, r2
 8007030:	4618      	mov	r0, r3
 8007032:	f006 f839 	bl	800d0a8 <ip4_addr_isbroadcast_u32>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f040 83c7 	bne.w	80077cc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800703e:	4b92      	ldr	r3, [pc, #584]	@ (8007288 <tcp_input+0x290>)
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007046:	2be0      	cmp	r3, #224	@ 0xe0
 8007048:	f000 83c0 	beq.w	80077cc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800704c:	4b8d      	ldr	r3, [pc, #564]	@ (8007284 <tcp_input+0x28c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	899b      	ldrh	r3, [r3, #12]
 8007052:	b29b      	uxth	r3, r3
 8007054:	4618      	mov	r0, r3
 8007056:	f7fc fc01 	bl	800385c <lwip_htons>
 800705a:	4603      	mov	r3, r0
 800705c:	0b1b      	lsrs	r3, r3, #12
 800705e:	b29b      	uxth	r3, r3
 8007060:	b2db      	uxtb	r3, r3
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007066:	7cbb      	ldrb	r3, [r7, #18]
 8007068:	2b13      	cmp	r3, #19
 800706a:	f240 83b1 	bls.w	80077d0 <tcp_input+0x7d8>
 800706e:	7cbb      	ldrb	r3, [r7, #18]
 8007070:	b29a      	uxth	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	891b      	ldrh	r3, [r3, #8]
 8007076:	429a      	cmp	r2, r3
 8007078:	f200 83aa 	bhi.w	80077d0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800707c:	7cbb      	ldrb	r3, [r7, #18]
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b14      	subs	r3, #20
 8007082:	b29a      	uxth	r2, r3
 8007084:	4b81      	ldr	r3, [pc, #516]	@ (800728c <tcp_input+0x294>)
 8007086:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007088:	4b81      	ldr	r3, [pc, #516]	@ (8007290 <tcp_input+0x298>)
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	895a      	ldrh	r2, [r3, #10]
 8007092:	7cbb      	ldrb	r3, [r7, #18]
 8007094:	b29b      	uxth	r3, r3
 8007096:	429a      	cmp	r2, r3
 8007098:	d309      	bcc.n	80070ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800709a:	4b7c      	ldr	r3, [pc, #496]	@ (800728c <tcp_input+0x294>)
 800709c:	881a      	ldrh	r2, [r3, #0]
 800709e:	4b7d      	ldr	r3, [pc, #500]	@ (8007294 <tcp_input+0x29c>)
 80070a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80070a2:	7cbb      	ldrb	r3, [r7, #18]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fd fe50 	bl	8004d4c <pbuf_remove_header>
 80070ac:	e04e      	b.n	800714c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d105      	bne.n	80070c2 <tcp_input+0xca>
 80070b6:	4b70      	ldr	r3, [pc, #448]	@ (8007278 <tcp_input+0x280>)
 80070b8:	22c2      	movs	r2, #194	@ 0xc2
 80070ba:	4977      	ldr	r1, [pc, #476]	@ (8007298 <tcp_input+0x2a0>)
 80070bc:	4870      	ldr	r0, [pc, #448]	@ (8007280 <tcp_input+0x288>)
 80070be:	f007 feb9 	bl	800ee34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80070c2:	2114      	movs	r1, #20
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fd fe41 	bl	8004d4c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	895a      	ldrh	r2, [r3, #10]
 80070ce:	4b71      	ldr	r3, [pc, #452]	@ (8007294 <tcp_input+0x29c>)
 80070d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80070d2:	4b6e      	ldr	r3, [pc, #440]	@ (800728c <tcp_input+0x294>)
 80070d4:	881a      	ldrh	r2, [r3, #0]
 80070d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007294 <tcp_input+0x29c>)
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80070de:	4b6d      	ldr	r3, [pc, #436]	@ (8007294 <tcp_input+0x29c>)
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fd fe31 	bl	8004d4c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	895b      	ldrh	r3, [r3, #10]
 80070f0:	8a3a      	ldrh	r2, [r7, #16]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	f200 836e 	bhi.w	80077d4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	4a64      	ldr	r2, [pc, #400]	@ (8007290 <tcp_input+0x298>)
 8007100:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	8a3a      	ldrh	r2, [r7, #16]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7fd fe1e 	bl	8004d4c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	891a      	ldrh	r2, [r3, #8]
 8007114:	8a3b      	ldrh	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	895b      	ldrh	r3, [r3, #10]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <tcp_input+0x13a>
 8007126:	4b54      	ldr	r3, [pc, #336]	@ (8007278 <tcp_input+0x280>)
 8007128:	22df      	movs	r2, #223	@ 0xdf
 800712a:	495c      	ldr	r1, [pc, #368]	@ (800729c <tcp_input+0x2a4>)
 800712c:	4854      	ldr	r0, [pc, #336]	@ (8007280 <tcp_input+0x288>)
 800712e:	f007 fe81 	bl	800ee34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	891a      	ldrh	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	891b      	ldrh	r3, [r3, #8]
 800713c:	429a      	cmp	r2, r3
 800713e:	d005      	beq.n	800714c <tcp_input+0x154>
 8007140:	4b4d      	ldr	r3, [pc, #308]	@ (8007278 <tcp_input+0x280>)
 8007142:	22e0      	movs	r2, #224	@ 0xe0
 8007144:	4956      	ldr	r1, [pc, #344]	@ (80072a0 <tcp_input+0x2a8>)
 8007146:	484e      	ldr	r0, [pc, #312]	@ (8007280 <tcp_input+0x288>)
 8007148:	f007 fe74 	bl	800ee34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800714c:	4b4d      	ldr	r3, [pc, #308]	@ (8007284 <tcp_input+0x28c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	4a4b      	ldr	r2, [pc, #300]	@ (8007284 <tcp_input+0x28c>)
 8007156:	6814      	ldr	r4, [r2, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f7fc fb7f 	bl	800385c <lwip_htons>
 800715e:	4603      	mov	r3, r0
 8007160:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007162:	4b48      	ldr	r3, [pc, #288]	@ (8007284 <tcp_input+0x28c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	885b      	ldrh	r3, [r3, #2]
 8007168:	b29b      	uxth	r3, r3
 800716a:	4a46      	ldr	r2, [pc, #280]	@ (8007284 <tcp_input+0x28c>)
 800716c:	6814      	ldr	r4, [r2, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc fb74 	bl	800385c <lwip_htons>
 8007174:	4603      	mov	r3, r0
 8007176:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007178:	4b42      	ldr	r3, [pc, #264]	@ (8007284 <tcp_input+0x28c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4a41      	ldr	r2, [pc, #260]	@ (8007284 <tcp_input+0x28c>)
 8007180:	6814      	ldr	r4, [r2, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f7fc fb7f 	bl	8003886 <lwip_htonl>
 8007188:	4603      	mov	r3, r0
 800718a:	6063      	str	r3, [r4, #4]
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	4a45      	ldr	r2, [pc, #276]	@ (80072a4 <tcp_input+0x2ac>)
 8007190:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007192:	4b3c      	ldr	r3, [pc, #240]	@ (8007284 <tcp_input+0x28c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	4a3a      	ldr	r2, [pc, #232]	@ (8007284 <tcp_input+0x28c>)
 800719a:	6814      	ldr	r4, [r2, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f7fc fb72 	bl	8003886 <lwip_htonl>
 80071a2:	4603      	mov	r3, r0
 80071a4:	60a3      	str	r3, [r4, #8]
 80071a6:	68a3      	ldr	r3, [r4, #8]
 80071a8:	4a3f      	ldr	r2, [pc, #252]	@ (80072a8 <tcp_input+0x2b0>)
 80071aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80071ac:	4b35      	ldr	r3, [pc, #212]	@ (8007284 <tcp_input+0x28c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	89db      	ldrh	r3, [r3, #14]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	4a33      	ldr	r2, [pc, #204]	@ (8007284 <tcp_input+0x28c>)
 80071b6:	6814      	ldr	r4, [r2, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fc fb4f 	bl	800385c <lwip_htons>
 80071be:	4603      	mov	r3, r0
 80071c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80071c2:	4b30      	ldr	r3, [pc, #192]	@ (8007284 <tcp_input+0x28c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	899b      	ldrh	r3, [r3, #12]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fc fb46 	bl	800385c <lwip_htons>
 80071d0:	4603      	mov	r3, r0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	4b34      	ldr	r3, [pc, #208]	@ (80072ac <tcp_input+0x2b4>)
 80071dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	891a      	ldrh	r2, [r3, #8]
 80071e2:	4b33      	ldr	r3, [pc, #204]	@ (80072b0 <tcp_input+0x2b8>)
 80071e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80071e6:	4b31      	ldr	r3, [pc, #196]	@ (80072ac <tcp_input+0x2b4>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00c      	beq.n	800720c <tcp_input+0x214>
    tcplen++;
 80071f2:	4b2f      	ldr	r3, [pc, #188]	@ (80072b0 <tcp_input+0x2b8>)
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	3301      	adds	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	4b2d      	ldr	r3, [pc, #180]	@ (80072b0 <tcp_input+0x2b8>)
 80071fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	891a      	ldrh	r2, [r3, #8]
 8007202:	4b2b      	ldr	r3, [pc, #172]	@ (80072b0 <tcp_input+0x2b8>)
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	f200 82e6 	bhi.w	80077d8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800720c:	2300      	movs	r3, #0
 800720e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007210:	4b28      	ldr	r3, [pc, #160]	@ (80072b4 <tcp_input+0x2bc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e09d      	b.n	8007354 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	7d1b      	ldrb	r3, [r3, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <tcp_input+0x234>
 8007220:	4b15      	ldr	r3, [pc, #84]	@ (8007278 <tcp_input+0x280>)
 8007222:	22fb      	movs	r2, #251	@ 0xfb
 8007224:	4924      	ldr	r1, [pc, #144]	@ (80072b8 <tcp_input+0x2c0>)
 8007226:	4816      	ldr	r0, [pc, #88]	@ (8007280 <tcp_input+0x288>)
 8007228:	f007 fe04 	bl	800ee34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	7d1b      	ldrb	r3, [r3, #20]
 8007230:	2b0a      	cmp	r3, #10
 8007232:	d105      	bne.n	8007240 <tcp_input+0x248>
 8007234:	4b10      	ldr	r3, [pc, #64]	@ (8007278 <tcp_input+0x280>)
 8007236:	22fc      	movs	r2, #252	@ 0xfc
 8007238:	4920      	ldr	r1, [pc, #128]	@ (80072bc <tcp_input+0x2c4>)
 800723a:	4811      	ldr	r0, [pc, #68]	@ (8007280 <tcp_input+0x288>)
 800723c:	f007 fdfa 	bl	800ee34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	7d1b      	ldrb	r3, [r3, #20]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d105      	bne.n	8007254 <tcp_input+0x25c>
 8007248:	4b0b      	ldr	r3, [pc, #44]	@ (8007278 <tcp_input+0x280>)
 800724a:	22fd      	movs	r2, #253	@ 0xfd
 800724c:	491c      	ldr	r1, [pc, #112]	@ (80072c0 <tcp_input+0x2c8>)
 800724e:	480c      	ldr	r0, [pc, #48]	@ (8007280 <tcp_input+0x288>)
 8007250:	f007 fdf0 	bl	800ee34 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	7a1b      	ldrb	r3, [r3, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d033      	beq.n	80072c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	7a1a      	ldrb	r2, [r3, #8]
 8007260:	4b09      	ldr	r3, [pc, #36]	@ (8007288 <tcp_input+0x290>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007268:	3301      	adds	r3, #1
 800726a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800726c:	429a      	cmp	r2, r3
 800726e:	d029      	beq.n	80072c4 <tcp_input+0x2cc>
      prev = pcb;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	61bb      	str	r3, [r7, #24]
      continue;
 8007274:	e06b      	b.n	800734e <tcp_input+0x356>
 8007276:	bf00      	nop
 8007278:	0801109c 	.word	0x0801109c
 800727c:	080110d0 	.word	0x080110d0
 8007280:	080110e8 	.word	0x080110e8
 8007284:	20003a68 	.word	0x20003a68
 8007288:	200004d0 	.word	0x200004d0
 800728c:	20003a6c 	.word	0x20003a6c
 8007290:	20003a70 	.word	0x20003a70
 8007294:	20003a6e 	.word	0x20003a6e
 8007298:	08011110 	.word	0x08011110
 800729c:	08011120 	.word	0x08011120
 80072a0:	0801112c 	.word	0x0801112c
 80072a4:	20003a78 	.word	0x20003a78
 80072a8:	20003a7c 	.word	0x20003a7c
 80072ac:	20003a84 	.word	0x20003a84
 80072b0:	20003a82 	.word	0x20003a82
 80072b4:	20003a4c 	.word	0x20003a4c
 80072b8:	0801114c 	.word	0x0801114c
 80072bc:	08011174 	.word	0x08011174
 80072c0:	080111a0 	.word	0x080111a0
    }

    if (pcb->remote_port == tcphdr->src &&
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	8b1a      	ldrh	r2, [r3, #24]
 80072c8:	4b72      	ldr	r3, [pc, #456]	@ (8007494 <tcp_input+0x49c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d13a      	bne.n	800734a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	8ada      	ldrh	r2, [r3, #22]
 80072d8:	4b6e      	ldr	r3, [pc, #440]	@ (8007494 <tcp_input+0x49c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d132      	bne.n	800734a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	4b6b      	ldr	r3, [pc, #428]	@ (8007498 <tcp_input+0x4a0>)
 80072ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d12c      	bne.n	800734a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	4b68      	ldr	r3, [pc, #416]	@ (8007498 <tcp_input+0x4a0>)
 80072f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d126      	bne.n	800734a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	429a      	cmp	r2, r3
 8007304:	d106      	bne.n	8007314 <tcp_input+0x31c>
 8007306:	4b65      	ldr	r3, [pc, #404]	@ (800749c <tcp_input+0x4a4>)
 8007308:	f240 120d 	movw	r2, #269	@ 0x10d
 800730c:	4964      	ldr	r1, [pc, #400]	@ (80074a0 <tcp_input+0x4a8>)
 800730e:	4865      	ldr	r0, [pc, #404]	@ (80074a4 <tcp_input+0x4ac>)
 8007310:	f007 fd90 	bl	800ee34 <iprintf>
      if (prev != NULL) {
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <tcp_input+0x338>
        prev->next = pcb->next;
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007322:	4b61      	ldr	r3, [pc, #388]	@ (80074a8 <tcp_input+0x4b0>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800732a:	4a5f      	ldr	r2, [pc, #380]	@ (80074a8 <tcp_input+0x4b0>)
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	429a      	cmp	r2, r3
 8007338:	d111      	bne.n	800735e <tcp_input+0x366>
 800733a:	4b58      	ldr	r3, [pc, #352]	@ (800749c <tcp_input+0x4a4>)
 800733c:	f240 1215 	movw	r2, #277	@ 0x115
 8007340:	495a      	ldr	r1, [pc, #360]	@ (80074ac <tcp_input+0x4b4>)
 8007342:	4858      	ldr	r0, [pc, #352]	@ (80074a4 <tcp_input+0x4ac>)
 8007344:	f007 fd76 	bl	800ee34 <iprintf>
      break;
 8007348:	e009      	b.n	800735e <tcp_input+0x366>
    }
    prev = pcb;
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f47f af5e 	bne.w	8007218 <tcp_input+0x220>
 800735c:	e000      	b.n	8007360 <tcp_input+0x368>
      break;
 800735e:	bf00      	nop
  }

  if (pcb == NULL) {
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 80aa 	bne.w	80074bc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007368:	4b51      	ldr	r3, [pc, #324]	@ (80074b0 <tcp_input+0x4b8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	e03f      	b.n	80073f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	7d1b      	ldrb	r3, [r3, #20]
 8007374:	2b0a      	cmp	r3, #10
 8007376:	d006      	beq.n	8007386 <tcp_input+0x38e>
 8007378:	4b48      	ldr	r3, [pc, #288]	@ (800749c <tcp_input+0x4a4>)
 800737a:	f240 121f 	movw	r2, #287	@ 0x11f
 800737e:	494d      	ldr	r1, [pc, #308]	@ (80074b4 <tcp_input+0x4bc>)
 8007380:	4848      	ldr	r0, [pc, #288]	@ (80074a4 <tcp_input+0x4ac>)
 8007382:	f007 fd57 	bl	800ee34 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	7a1b      	ldrb	r3, [r3, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	7a1a      	ldrb	r2, [r3, #8]
 8007392:	4b41      	ldr	r3, [pc, #260]	@ (8007498 <tcp_input+0x4a0>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800739a:	3301      	adds	r3, #1
 800739c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800739e:	429a      	cmp	r2, r3
 80073a0:	d122      	bne.n	80073e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	8b1a      	ldrh	r2, [r3, #24]
 80073a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007494 <tcp_input+0x49c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d11b      	bne.n	80073ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	8ada      	ldrh	r2, [r3, #22]
 80073b6:	4b37      	ldr	r3, [pc, #220]	@ (8007494 <tcp_input+0x49c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	885b      	ldrh	r3, [r3, #2]
 80073bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80073be:	429a      	cmp	r2, r3
 80073c0:	d113      	bne.n	80073ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	4b34      	ldr	r3, [pc, #208]	@ (8007498 <tcp_input+0x4a0>)
 80073c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d10d      	bne.n	80073ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b31      	ldr	r3, [pc, #196]	@ (8007498 <tcp_input+0x4a0>)
 80073d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d107      	bne.n	80073ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80073da:	69f8      	ldr	r0, [r7, #28]
 80073dc:	f000 fb56 	bl	8007a8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7fd fd39 	bl	8004e58 <pbuf_free>
        return;
 80073e6:	e1fd      	b.n	80077e4 <tcp_input+0x7ec>
        continue;
 80073e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	61fb      	str	r3, [r7, #28]
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1bc      	bne.n	8007370 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80073fa:	4b2f      	ldr	r3, [pc, #188]	@ (80074b8 <tcp_input+0x4c0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e02a      	b.n	8007458 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	7a1b      	ldrb	r3, [r3, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00c      	beq.n	8007424 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	7a1a      	ldrb	r2, [r3, #8]
 800740e:	4b22      	ldr	r3, [pc, #136]	@ (8007498 <tcp_input+0x4a0>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007416:	3301      	adds	r3, #1
 8007418:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800741a:	429a      	cmp	r2, r3
 800741c:	d002      	beq.n	8007424 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	61bb      	str	r3, [r7, #24]
        continue;
 8007422:	e016      	b.n	8007452 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	8ada      	ldrh	r2, [r3, #22]
 8007428:	4b1a      	ldr	r3, [pc, #104]	@ (8007494 <tcp_input+0x49c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	885b      	ldrh	r3, [r3, #2]
 800742e:	b29b      	uxth	r3, r3
 8007430:	429a      	cmp	r2, r3
 8007432:	d10c      	bne.n	800744e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4b17      	ldr	r3, [pc, #92]	@ (8007498 <tcp_input+0x4a0>)
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	429a      	cmp	r2, r3
 800743e:	d00f      	beq.n	8007460 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00d      	beq.n	8007462 <tcp_input+0x46a>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1d1      	bne.n	8007402 <tcp_input+0x40a>
 800745e:	e000      	b.n	8007462 <tcp_input+0x46a>
            break;
 8007460:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d029      	beq.n	80074bc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007476:	4b10      	ldr	r3, [pc, #64]	@ (80074b8 <tcp_input+0x4c0>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800747e:	4a0e      	ldr	r2, [pc, #56]	@ (80074b8 <tcp_input+0x4c0>)
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007484:	6978      	ldr	r0, [r7, #20]
 8007486:	f000 fa03 	bl	8007890 <tcp_listen_input>
      }
      pbuf_free(p);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fd fce4 	bl	8004e58 <pbuf_free>
      return;
 8007490:	e1a8      	b.n	80077e4 <tcp_input+0x7ec>
 8007492:	bf00      	nop
 8007494:	20003a68 	.word	0x20003a68
 8007498:	200004d0 	.word	0x200004d0
 800749c:	0801109c 	.word	0x0801109c
 80074a0:	080111c8 	.word	0x080111c8
 80074a4:	080110e8 	.word	0x080110e8
 80074a8:	20003a4c 	.word	0x20003a4c
 80074ac:	080111f4 	.word	0x080111f4
 80074b0:	20003a50 	.word	0x20003a50
 80074b4:	08011220 	.word	0x08011220
 80074b8:	20003a48 	.word	0x20003a48
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 8158 	beq.w	8007774 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80074c4:	4b95      	ldr	r3, [pc, #596]	@ (800771c <tcp_input+0x724>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	891a      	ldrh	r2, [r3, #8]
 80074ce:	4b93      	ldr	r3, [pc, #588]	@ (800771c <tcp_input+0x724>)
 80074d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80074d2:	4a92      	ldr	r2, [pc, #584]	@ (800771c <tcp_input+0x724>)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80074d8:	4b91      	ldr	r3, [pc, #580]	@ (8007720 <tcp_input+0x728>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a8f      	ldr	r2, [pc, #572]	@ (800771c <tcp_input+0x724>)
 80074de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80074e0:	4b90      	ldr	r3, [pc, #576]	@ (8007724 <tcp_input+0x72c>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80074e6:	4b90      	ldr	r3, [pc, #576]	@ (8007728 <tcp_input+0x730>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80074ec:	4b8f      	ldr	r3, [pc, #572]	@ (800772c <tcp_input+0x734>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80074f2:	4b8f      	ldr	r3, [pc, #572]	@ (8007730 <tcp_input+0x738>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d006      	beq.n	800750c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7b5b      	ldrb	r3, [r3, #13]
 8007502:	f043 0301 	orr.w	r3, r3, #1
 8007506:	b2da      	uxtb	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007510:	2b00      	cmp	r3, #0
 8007512:	d017      	beq.n	8007544 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007514:	69f8      	ldr	r0, [r7, #28]
 8007516:	f7ff f83d 	bl	8006594 <tcp_process_refused_data>
 800751a:	4603      	mov	r3, r0
 800751c:	f113 0f0d 	cmn.w	r3, #13
 8007520:	d007      	beq.n	8007532 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00c      	beq.n	8007544 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800752a:	4b82      	ldr	r3, [pc, #520]	@ (8007734 <tcp_input+0x73c>)
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007536:	2b00      	cmp	r3, #0
 8007538:	f040 80e3 	bne.w	8007702 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800753c:	69f8      	ldr	r0, [r7, #28]
 800753e:	f003 fdff 	bl	800b140 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007542:	e0de      	b.n	8007702 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007544:	4a7c      	ldr	r2, [pc, #496]	@ (8007738 <tcp_input+0x740>)
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800754a:	69f8      	ldr	r0, [r7, #28]
 800754c:	f000 fb18 	bl	8007b80 <tcp_process>
 8007550:	4603      	mov	r3, r0
 8007552:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007558:	f113 0f0d 	cmn.w	r3, #13
 800755c:	f000 80d3 	beq.w	8007706 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007560:	4b71      	ldr	r3, [pc, #452]	@ (8007728 <tcp_input+0x730>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d015      	beq.n	8007598 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007572:	2b00      	cmp	r3, #0
 8007574:	d008      	beq.n	8007588 <tcp_input+0x590>
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	6912      	ldr	r2, [r2, #16]
 8007580:	f06f 010d 	mvn.w	r1, #13
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007588:	69f9      	ldr	r1, [r7, #28]
 800758a:	486c      	ldr	r0, [pc, #432]	@ (800773c <tcp_input+0x744>)
 800758c:	f7ff fbbc 	bl	8006d08 <tcp_pcb_remove>
        tcp_free(pcb);
 8007590:	69f8      	ldr	r0, [r7, #28]
 8007592:	f7fd ff01 	bl	8005398 <tcp_free>
 8007596:	e0da      	b.n	800774e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800759c:	4b63      	ldr	r3, [pc, #396]	@ (800772c <tcp_input+0x734>)
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01d      	beq.n	80075e0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80075a4:	4b61      	ldr	r3, [pc, #388]	@ (800772c <tcp_input+0x734>)
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <tcp_input+0x5d2>
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	6910      	ldr	r0, [r2, #16]
 80075be:	89fa      	ldrh	r2, [r7, #14]
 80075c0:	69f9      	ldr	r1, [r7, #28]
 80075c2:	4798      	blx	r3
 80075c4:	4603      	mov	r3, r0
 80075c6:	74fb      	strb	r3, [r7, #19]
 80075c8:	e001      	b.n	80075ce <tcp_input+0x5d6>
 80075ca:	2300      	movs	r3, #0
 80075cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80075ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80075d2:	f113 0f0d 	cmn.w	r3, #13
 80075d6:	f000 8098 	beq.w	800770a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80075da:	4b54      	ldr	r3, [pc, #336]	@ (800772c <tcp_input+0x734>)
 80075dc:	2200      	movs	r2, #0
 80075de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80075e0:	69f8      	ldr	r0, [r7, #28]
 80075e2:	f000 f915 	bl	8007810 <tcp_input_delayed_close>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 8090 	bne.w	800770e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80075ee:	4b4d      	ldr	r3, [pc, #308]	@ (8007724 <tcp_input+0x72c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d041      	beq.n	800767a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d006      	beq.n	800760c <tcp_input+0x614>
 80075fe:	4b50      	ldr	r3, [pc, #320]	@ (8007740 <tcp_input+0x748>)
 8007600:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8007604:	494f      	ldr	r1, [pc, #316]	@ (8007744 <tcp_input+0x74c>)
 8007606:	4850      	ldr	r0, [pc, #320]	@ (8007748 <tcp_input+0x750>)
 8007608:	f007 fc14 	bl	800ee34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	8b5b      	ldrh	r3, [r3, #26]
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	2b00      	cmp	r3, #0
 8007616:	d008      	beq.n	800762a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007618:	4b42      	ldr	r3, [pc, #264]	@ (8007724 <tcp_input+0x72c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f7fd fc1b 	bl	8004e58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007622:	69f8      	ldr	r0, [r7, #28]
 8007624:	f7fe f9a0 	bl	8005968 <tcp_abort>
            goto aborted;
 8007628:	e091      	b.n	800774e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00c      	beq.n	800764e <tcp_input+0x656>
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	6918      	ldr	r0, [r3, #16]
 800763e:	4b39      	ldr	r3, [pc, #228]	@ (8007724 <tcp_input+0x72c>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	2300      	movs	r3, #0
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	47a0      	blx	r4
 8007648:	4603      	mov	r3, r0
 800764a:	74fb      	strb	r3, [r7, #19]
 800764c:	e008      	b.n	8007660 <tcp_input+0x668>
 800764e:	4b35      	ldr	r3, [pc, #212]	@ (8007724 <tcp_input+0x72c>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	2300      	movs	r3, #0
 8007654:	69f9      	ldr	r1, [r7, #28]
 8007656:	2000      	movs	r0, #0
 8007658:	f7ff f890 	bl	800677c <tcp_recv_null>
 800765c:	4603      	mov	r3, r0
 800765e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007660:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007664:	f113 0f0d 	cmn.w	r3, #13
 8007668:	d053      	beq.n	8007712 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800766a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007672:	4b2c      	ldr	r3, [pc, #176]	@ (8007724 <tcp_input+0x72c>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800767a:	4b2b      	ldr	r3, [pc, #172]	@ (8007728 <tcp_input+0x730>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d030      	beq.n	80076e8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007692:	7b5a      	ldrb	r2, [r3, #13]
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007698:	f042 0220 	orr.w	r2, r2, #32
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	735a      	strb	r2, [r3, #13]
 80076a0:	e022      	b.n	80076e8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80076aa:	d005      	beq.n	80076b8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076b0:	3301      	adds	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <tcp_input+0x6e2>
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	6918      	ldr	r0, [r3, #16]
 80076cc:	2300      	movs	r3, #0
 80076ce:	2200      	movs	r2, #0
 80076d0:	69f9      	ldr	r1, [r7, #28]
 80076d2:	47a0      	blx	r4
 80076d4:	4603      	mov	r3, r0
 80076d6:	74fb      	strb	r3, [r7, #19]
 80076d8:	e001      	b.n	80076de <tcp_input+0x6e6>
 80076da:	2300      	movs	r3, #0
 80076dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80076de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80076e2:	f113 0f0d 	cmn.w	r3, #13
 80076e6:	d016      	beq.n	8007716 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80076e8:	4b13      	ldr	r3, [pc, #76]	@ (8007738 <tcp_input+0x740>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80076ee:	69f8      	ldr	r0, [r7, #28]
 80076f0:	f000 f88e 	bl	8007810 <tcp_input_delayed_close>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d128      	bne.n	800774c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80076fa:	69f8      	ldr	r0, [r7, #28]
 80076fc:	f002 ff1a 	bl	800a534 <tcp_output>
 8007700:	e025      	b.n	800774e <tcp_input+0x756>
        goto aborted;
 8007702:	bf00      	nop
 8007704:	e023      	b.n	800774e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007706:	bf00      	nop
 8007708:	e021      	b.n	800774e <tcp_input+0x756>
              goto aborted;
 800770a:	bf00      	nop
 800770c:	e01f      	b.n	800774e <tcp_input+0x756>
          goto aborted;
 800770e:	bf00      	nop
 8007710:	e01d      	b.n	800774e <tcp_input+0x756>
            goto aborted;
 8007712:	bf00      	nop
 8007714:	e01b      	b.n	800774e <tcp_input+0x756>
              goto aborted;
 8007716:	bf00      	nop
 8007718:	e019      	b.n	800774e <tcp_input+0x756>
 800771a:	bf00      	nop
 800771c:	20003a58 	.word	0x20003a58
 8007720:	20003a68 	.word	0x20003a68
 8007724:	20003a88 	.word	0x20003a88
 8007728:	20003a85 	.word	0x20003a85
 800772c:	20003a80 	.word	0x20003a80
 8007730:	20003a84 	.word	0x20003a84
 8007734:	20003a82 	.word	0x20003a82
 8007738:	20003a8c 	.word	0x20003a8c
 800773c:	20003a4c 	.word	0x20003a4c
 8007740:	0801109c 	.word	0x0801109c
 8007744:	08011250 	.word	0x08011250
 8007748:	080110e8 	.word	0x080110e8
          goto aborted;
 800774c:	bf00      	nop
    tcp_input_pcb = NULL;
 800774e:	4b27      	ldr	r3, [pc, #156]	@ (80077ec <tcp_input+0x7f4>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007754:	4b26      	ldr	r3, [pc, #152]	@ (80077f0 <tcp_input+0x7f8>)
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800775a:	4b26      	ldr	r3, [pc, #152]	@ (80077f4 <tcp_input+0x7fc>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d03f      	beq.n	80077e2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007762:	4b24      	ldr	r3, [pc, #144]	@ (80077f4 <tcp_input+0x7fc>)
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	4618      	mov	r0, r3
 8007768:	f7fd fb76 	bl	8004e58 <pbuf_free>
      inseg.p = NULL;
 800776c:	4b21      	ldr	r3, [pc, #132]	@ (80077f4 <tcp_input+0x7fc>)
 800776e:	2200      	movs	r2, #0
 8007770:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007772:	e036      	b.n	80077e2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007774:	4b20      	ldr	r3, [pc, #128]	@ (80077f8 <tcp_input+0x800>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	899b      	ldrh	r3, [r3, #12]
 800777a:	b29b      	uxth	r3, r3
 800777c:	4618      	mov	r0, r3
 800777e:	f7fc f86d 	bl	800385c <lwip_htons>
 8007782:	4603      	mov	r3, r0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d118      	bne.n	80077c0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800778e:	4b1b      	ldr	r3, [pc, #108]	@ (80077fc <tcp_input+0x804>)
 8007790:	6819      	ldr	r1, [r3, #0]
 8007792:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <tcp_input+0x808>)
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	4b1a      	ldr	r3, [pc, #104]	@ (8007804 <tcp_input+0x80c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800779e:	4b16      	ldr	r3, [pc, #88]	@ (80077f8 <tcp_input+0x800>)
 80077a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077a2:	885b      	ldrh	r3, [r3, #2]
 80077a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80077a6:	4a14      	ldr	r2, [pc, #80]	@ (80077f8 <tcp_input+0x800>)
 80077a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077aa:	8812      	ldrh	r2, [r2, #0]
 80077ac:	b292      	uxth	r2, r2
 80077ae:	9202      	str	r2, [sp, #8]
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	4b15      	ldr	r3, [pc, #84]	@ (8007808 <tcp_input+0x810>)
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4b15      	ldr	r3, [pc, #84]	@ (800780c <tcp_input+0x814>)
 80077b8:	4602      	mov	r2, r0
 80077ba:	2000      	movs	r0, #0
 80077bc:	f003 fc6e 	bl	800b09c <tcp_rst>
    pbuf_free(p);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fd fb49 	bl	8004e58 <pbuf_free>
  return;
 80077c6:	e00c      	b.n	80077e2 <tcp_input+0x7ea>
    goto dropped;
 80077c8:	bf00      	nop
 80077ca:	e006      	b.n	80077da <tcp_input+0x7e2>
    goto dropped;
 80077cc:	bf00      	nop
 80077ce:	e004      	b.n	80077da <tcp_input+0x7e2>
    goto dropped;
 80077d0:	bf00      	nop
 80077d2:	e002      	b.n	80077da <tcp_input+0x7e2>
      goto dropped;
 80077d4:	bf00      	nop
 80077d6:	e000      	b.n	80077da <tcp_input+0x7e2>
      goto dropped;
 80077d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fd fb3c 	bl	8004e58 <pbuf_free>
 80077e0:	e000      	b.n	80077e4 <tcp_input+0x7ec>
  return;
 80077e2:	bf00      	nop
}
 80077e4:	3724      	adds	r7, #36	@ 0x24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd90      	pop	{r4, r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20003a8c 	.word	0x20003a8c
 80077f0:	20003a88 	.word	0x20003a88
 80077f4:	20003a58 	.word	0x20003a58
 80077f8:	20003a68 	.word	0x20003a68
 80077fc:	20003a7c 	.word	0x20003a7c
 8007800:	20003a82 	.word	0x20003a82
 8007804:	20003a78 	.word	0x20003a78
 8007808:	200004e0 	.word	0x200004e0
 800780c:	200004e4 	.word	0x200004e4

08007810 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <tcp_input_delayed_close+0x1c>
 800781e:	4b17      	ldr	r3, [pc, #92]	@ (800787c <tcp_input_delayed_close+0x6c>)
 8007820:	f240 225a 	movw	r2, #602	@ 0x25a
 8007824:	4916      	ldr	r1, [pc, #88]	@ (8007880 <tcp_input_delayed_close+0x70>)
 8007826:	4817      	ldr	r0, [pc, #92]	@ (8007884 <tcp_input_delayed_close+0x74>)
 8007828:	f007 fb04 	bl	800ee34 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800782c:	4b16      	ldr	r3, [pc, #88]	@ (8007888 <tcp_input_delayed_close+0x78>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01c      	beq.n	8007872 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8b5b      	ldrh	r3, [r3, #26]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10d      	bne.n	8007860 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800784a:	2b00      	cmp	r3, #0
 800784c:	d008      	beq.n	8007860 <tcp_input_delayed_close+0x50>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	6912      	ldr	r2, [r2, #16]
 8007858:	f06f 010e 	mvn.w	r1, #14
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007860:	6879      	ldr	r1, [r7, #4]
 8007862:	480a      	ldr	r0, [pc, #40]	@ (800788c <tcp_input_delayed_close+0x7c>)
 8007864:	f7ff fa50 	bl	8006d08 <tcp_pcb_remove>
    tcp_free(pcb);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fd fd95 	bl	8005398 <tcp_free>
    return 1;
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	0801109c 	.word	0x0801109c
 8007880:	0801126c 	.word	0x0801126c
 8007884:	080110e8 	.word	0x080110e8
 8007888:	20003a85 	.word	0x20003a85
 800788c:	20003a4c 	.word	0x20003a4c

08007890 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b08b      	sub	sp, #44	@ 0x2c
 8007894:	af04      	add	r7, sp, #16
 8007896:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007898:	4b6f      	ldr	r3, [pc, #444]	@ (8007a58 <tcp_listen_input+0x1c8>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 80d2 	bne.w	8007a4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d106      	bne.n	80078ba <tcp_listen_input+0x2a>
 80078ac:	4b6b      	ldr	r3, [pc, #428]	@ (8007a5c <tcp_listen_input+0x1cc>)
 80078ae:	f240 2281 	movw	r2, #641	@ 0x281
 80078b2:	496b      	ldr	r1, [pc, #428]	@ (8007a60 <tcp_listen_input+0x1d0>)
 80078b4:	486b      	ldr	r0, [pc, #428]	@ (8007a64 <tcp_listen_input+0x1d4>)
 80078b6:	f007 fabd 	bl	800ee34 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80078ba:	4b67      	ldr	r3, [pc, #412]	@ (8007a58 <tcp_listen_input+0x1c8>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d019      	beq.n	80078fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078c6:	4b68      	ldr	r3, [pc, #416]	@ (8007a68 <tcp_listen_input+0x1d8>)
 80078c8:	6819      	ldr	r1, [r3, #0]
 80078ca:	4b68      	ldr	r3, [pc, #416]	@ (8007a6c <tcp_listen_input+0x1dc>)
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	4b67      	ldr	r3, [pc, #412]	@ (8007a70 <tcp_listen_input+0x1e0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078d6:	4b67      	ldr	r3, [pc, #412]	@ (8007a74 <tcp_listen_input+0x1e4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078da:	885b      	ldrh	r3, [r3, #2]
 80078dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078de:	4a65      	ldr	r2, [pc, #404]	@ (8007a74 <tcp_listen_input+0x1e4>)
 80078e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078e2:	8812      	ldrh	r2, [r2, #0]
 80078e4:	b292      	uxth	r2, r2
 80078e6:	9202      	str	r2, [sp, #8]
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	4b63      	ldr	r3, [pc, #396]	@ (8007a78 <tcp_listen_input+0x1e8>)
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	4b63      	ldr	r3, [pc, #396]	@ (8007a7c <tcp_listen_input+0x1ec>)
 80078f0:	4602      	mov	r2, r0
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f003 fbd2 	bl	800b09c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80078f8:	e0a9      	b.n	8007a4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80078fa:	4b57      	ldr	r3, [pc, #348]	@ (8007a58 <tcp_listen_input+0x1c8>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80a3 	beq.w	8007a4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7d5b      	ldrb	r3, [r3, #21]
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff f859 	bl	80069c4 <tcp_alloc>
 8007912:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d111      	bne.n	800793e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <tcp_listen_input+0xa8>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6910      	ldr	r0, [r2, #16]
 800792a:	f04f 32ff 	mov.w	r2, #4294967295
 800792e:	2100      	movs	r1, #0
 8007930:	4798      	blx	r3
 8007932:	4603      	mov	r3, r0
 8007934:	73bb      	strb	r3, [r7, #14]
      return;
 8007936:	e08b      	b.n	8007a50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007938:	23f0      	movs	r3, #240	@ 0xf0
 800793a:	73bb      	strb	r3, [r7, #14]
      return;
 800793c:	e088      	b.n	8007a50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800793e:	4b50      	ldr	r3, [pc, #320]	@ (8007a80 <tcp_listen_input+0x1f0>)
 8007940:	695a      	ldr	r2, [r3, #20]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007946:	4b4e      	ldr	r3, [pc, #312]	@ (8007a80 <tcp_listen_input+0x1f0>)
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8ada      	ldrh	r2, [r3, #22]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007956:	4b47      	ldr	r3, [pc, #284]	@ (8007a74 <tcp_listen_input+0x1e4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29a      	uxth	r2, r3
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2203      	movs	r2, #3
 8007966:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007968:	4b41      	ldr	r3, [pc, #260]	@ (8007a70 <tcp_listen_input+0x1e0>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800797a:	6978      	ldr	r0, [r7, #20]
 800797c:	f7ff fa58 	bl	8006e30 <tcp_next_iss>
 8007980:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800799a:	4b35      	ldr	r3, [pc, #212]	@ (8007a70 <tcp_listen_input+0x1e0>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	1e5a      	subs	r2, r3, #1
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691a      	ldr	r2, [r3, #16]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	7a5b      	ldrb	r3, [r3, #9]
 80079b6:	f003 030c 	and.w	r3, r3, #12
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	7a1a      	ldrb	r2, [r3, #8]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80079c8:	4b2e      	ldr	r3, [pc, #184]	@ (8007a84 <tcp_listen_input+0x1f4>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	60da      	str	r2, [r3, #12]
 80079d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007a84 <tcp_listen_input+0x1f4>)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	f003 fd23 	bl	800b420 <tcp_timer_needed>
 80079da:	4b2b      	ldr	r3, [pc, #172]	@ (8007a88 <tcp_listen_input+0x1f8>)
 80079dc:	2201      	movs	r2, #1
 80079de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80079e0:	6978      	ldr	r0, [r7, #20]
 80079e2:	f001 fd8b 	bl	80094fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80079e6:	4b23      	ldr	r3, [pc, #140]	@ (8007a74 <tcp_listen_input+0x1e4>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	89db      	ldrh	r3, [r3, #14]
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f005 f8b7 	bl	800cb7c <ip4_route>
 8007a0e:	4601      	mov	r1, r0
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	3304      	adds	r3, #4
 8007a14:	461a      	mov	r2, r3
 8007a16:	4620      	mov	r0, r4
 8007a18:	f7ff fa30 	bl	8006e7c <tcp_eff_send_mss_netif>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	461a      	mov	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007a24:	2112      	movs	r1, #18
 8007a26:	6978      	ldr	r0, [r7, #20]
 8007a28:	f002 fc96 	bl	800a358 <tcp_enqueue_flags>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6978      	ldr	r0, [r7, #20]
 8007a3c:	f7fd fed6 	bl	80057ec <tcp_abandon>
      return;
 8007a40:	e006      	b.n	8007a50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007a42:	6978      	ldr	r0, [r7, #20]
 8007a44:	f002 fd76 	bl	800a534 <tcp_output>
  return;
 8007a48:	e001      	b.n	8007a4e <tcp_listen_input+0x1be>
    return;
 8007a4a:	bf00      	nop
 8007a4c:	e000      	b.n	8007a50 <tcp_listen_input+0x1c0>
  return;
 8007a4e:	bf00      	nop
}
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd90      	pop	{r4, r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20003a84 	.word	0x20003a84
 8007a5c:	0801109c 	.word	0x0801109c
 8007a60:	08011294 	.word	0x08011294
 8007a64:	080110e8 	.word	0x080110e8
 8007a68:	20003a7c 	.word	0x20003a7c
 8007a6c:	20003a82 	.word	0x20003a82
 8007a70:	20003a78 	.word	0x20003a78
 8007a74:	20003a68 	.word	0x20003a68
 8007a78:	200004e0 	.word	0x200004e0
 8007a7c:	200004e4 	.word	0x200004e4
 8007a80:	200004d0 	.word	0x200004d0
 8007a84:	20003a4c 	.word	0x20003a4c
 8007a88:	20003a54 	.word	0x20003a54

08007a8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af04      	add	r7, sp, #16
 8007a92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007a94:	4b2f      	ldr	r3, [pc, #188]	@ (8007b54 <tcp_timewait_input+0xc8>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d153      	bne.n	8007b48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <tcp_timewait_input+0x28>
 8007aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b58 <tcp_timewait_input+0xcc>)
 8007aa8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8007aac:	492b      	ldr	r1, [pc, #172]	@ (8007b5c <tcp_timewait_input+0xd0>)
 8007aae:	482c      	ldr	r0, [pc, #176]	@ (8007b60 <tcp_timewait_input+0xd4>)
 8007ab0:	f007 f9c0 	bl	800ee34 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007ab4:	4b27      	ldr	r3, [pc, #156]	@ (8007b54 <tcp_timewait_input+0xc8>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d02a      	beq.n	8007b16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007ac0:	4b28      	ldr	r3, [pc, #160]	@ (8007b64 <tcp_timewait_input+0xd8>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	db2d      	blt.n	8007b2a <tcp_timewait_input+0x9e>
 8007ace:	4b25      	ldr	r3, [pc, #148]	@ (8007b64 <tcp_timewait_input+0xd8>)
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007ada:	440b      	add	r3, r1
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	dc23      	bgt.n	8007b2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ae2:	4b21      	ldr	r3, [pc, #132]	@ (8007b68 <tcp_timewait_input+0xdc>)
 8007ae4:	6819      	ldr	r1, [r3, #0]
 8007ae6:	4b21      	ldr	r3, [pc, #132]	@ (8007b6c <tcp_timewait_input+0xe0>)
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	4b1d      	ldr	r3, [pc, #116]	@ (8007b64 <tcp_timewait_input+0xd8>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007af2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b70 <tcp_timewait_input+0xe4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007af6:	885b      	ldrh	r3, [r3, #2]
 8007af8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007afa:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <tcp_timewait_input+0xe4>)
 8007afc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007afe:	8812      	ldrh	r2, [r2, #0]
 8007b00:	b292      	uxth	r2, r2
 8007b02:	9202      	str	r2, [sp, #8]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	4b1b      	ldr	r3, [pc, #108]	@ (8007b74 <tcp_timewait_input+0xe8>)
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8007b78 <tcp_timewait_input+0xec>)
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f003 fac4 	bl	800b09c <tcp_rst>
      return;
 8007b14:	e01b      	b.n	8007b4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <tcp_timewait_input+0xc8>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007b22:	4b16      	ldr	r3, [pc, #88]	@ (8007b7c <tcp_timewait_input+0xf0>)
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007b2a:	4b10      	ldr	r3, [pc, #64]	@ (8007b6c <tcp_timewait_input+0xe0>)
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00c      	beq.n	8007b4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	8b5b      	ldrh	r3, [r3, #26]
 8007b36:	f043 0302 	orr.w	r3, r3, #2
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f002 fcf7 	bl	800a534 <tcp_output>
  }
  return;
 8007b46:	e001      	b.n	8007b4c <tcp_timewait_input+0xc0>
    return;
 8007b48:	bf00      	nop
 8007b4a:	e000      	b.n	8007b4e <tcp_timewait_input+0xc2>
  return;
 8007b4c:	bf00      	nop
}
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20003a84 	.word	0x20003a84
 8007b58:	0801109c 	.word	0x0801109c
 8007b5c:	080112b4 	.word	0x080112b4
 8007b60:	080110e8 	.word	0x080110e8
 8007b64:	20003a78 	.word	0x20003a78
 8007b68:	20003a7c 	.word	0x20003a7c
 8007b6c:	20003a82 	.word	0x20003a82
 8007b70:	20003a68 	.word	0x20003a68
 8007b74:	200004e0 	.word	0x200004e0
 8007b78:	200004e4 	.word	0x200004e4
 8007b7c:	20003a40 	.word	0x20003a40

08007b80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007b80:	b590      	push	{r4, r7, lr}
 8007b82:	b08d      	sub	sp, #52	@ 0x34
 8007b84:	af04      	add	r7, sp, #16
 8007b86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d106      	bne.n	8007ba4 <tcp_process+0x24>
 8007b96:	4b9d      	ldr	r3, [pc, #628]	@ (8007e0c <tcp_process+0x28c>)
 8007b98:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8007b9c:	499c      	ldr	r1, [pc, #624]	@ (8007e10 <tcp_process+0x290>)
 8007b9e:	489d      	ldr	r0, [pc, #628]	@ (8007e14 <tcp_process+0x294>)
 8007ba0:	f007 f948 	bl	800ee34 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8007e18 <tcp_process+0x298>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d04e      	beq.n	8007c4e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	7d1b      	ldrb	r3, [r3, #20]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d108      	bne.n	8007bca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bbc:	4b97      	ldr	r3, [pc, #604]	@ (8007e1c <tcp_process+0x29c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d123      	bne.n	8007c0c <tcp_process+0x8c>
        acceptable = 1;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	76fb      	strb	r3, [r7, #27]
 8007bc8:	e020      	b.n	8007c0c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bce:	4b94      	ldr	r3, [pc, #592]	@ (8007e20 <tcp_process+0x2a0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d102      	bne.n	8007bdc <tcp_process+0x5c>
        acceptable = 1;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	76fb      	strb	r3, [r7, #27]
 8007bda:	e017      	b.n	8007c0c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007bdc:	4b90      	ldr	r3, [pc, #576]	@ (8007e20 <tcp_process+0x2a0>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	db10      	blt.n	8007c0c <tcp_process+0x8c>
 8007bea:	4b8d      	ldr	r3, [pc, #564]	@ (8007e20 <tcp_process+0x2a0>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007bf6:	440b      	add	r3, r1
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	dc06      	bgt.n	8007c0c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8b5b      	ldrh	r3, [r3, #26]
 8007c02:	f043 0302 	orr.w	r3, r3, #2
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007c0c:	7efb      	ldrb	r3, [r7, #27]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d01b      	beq.n	8007c4a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7d1b      	ldrb	r3, [r3, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <tcp_process+0xa8>
 8007c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8007e0c <tcp_process+0x28c>)
 8007c1c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8007c20:	4980      	ldr	r1, [pc, #512]	@ (8007e24 <tcp_process+0x2a4>)
 8007c22:	487c      	ldr	r0, [pc, #496]	@ (8007e14 <tcp_process+0x294>)
 8007c24:	f007 f906 	bl	800ee34 <iprintf>
      recv_flags |= TF_RESET;
 8007c28:	4b7f      	ldr	r3, [pc, #508]	@ (8007e28 <tcp_process+0x2a8>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	f043 0308 	orr.w	r3, r3, #8
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	4b7d      	ldr	r3, [pc, #500]	@ (8007e28 <tcp_process+0x2a8>)
 8007c34:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	8b5b      	ldrh	r3, [r3, #26]
 8007c3a:	f023 0301 	bic.w	r3, r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007c44:	f06f 030d 	mvn.w	r3, #13
 8007c48:	e37a      	b.n	8008340 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e378      	b.n	8008340 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007c4e:	4b72      	ldr	r3, [pc, #456]	@ (8007e18 <tcp_process+0x298>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d010      	beq.n	8007c7c <tcp_process+0xfc>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	7d1b      	ldrb	r3, [r3, #20]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d00c      	beq.n	8007c7c <tcp_process+0xfc>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7d1b      	ldrb	r3, [r3, #20]
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d008      	beq.n	8007c7c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8b5b      	ldrh	r3, [r3, #26]
 8007c6e:	f043 0302 	orr.w	r3, r3, #2
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e361      	b.n	8008340 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8b5b      	ldrh	r3, [r3, #26]
 8007c80:	f003 0310 	and.w	r3, r3, #16
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d103      	bne.n	8007c90 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007c88:	4b68      	ldr	r3, [pc, #416]	@ (8007e2c <tcp_process+0x2ac>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fc2b 	bl	80094fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	7d1b      	ldrb	r3, [r3, #20]
 8007caa:	3b02      	subs	r3, #2
 8007cac:	2b07      	cmp	r3, #7
 8007cae:	f200 8337 	bhi.w	8008320 <tcp_process+0x7a0>
 8007cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <tcp_process+0x138>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007cd9 	.word	0x08007cd9
 8007cbc:	08007f09 	.word	0x08007f09
 8007cc0:	08008081 	.word	0x08008081
 8007cc4:	080080ab 	.word	0x080080ab
 8007cc8:	080081cf 	.word	0x080081cf
 8007ccc:	08008081 	.word	0x08008081
 8007cd0:	0800825b 	.word	0x0800825b
 8007cd4:	080082eb 	.word	0x080082eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8007e18 <tcp_process+0x298>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80e4 	beq.w	8007eae <tcp_process+0x32e>
 8007ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8007e18 <tcp_process+0x298>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80dd 	beq.w	8007eae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	4b48      	ldr	r3, [pc, #288]	@ (8007e1c <tcp_process+0x29c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	f040 80d5 	bne.w	8007eae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007d04:	4b46      	ldr	r3, [pc, #280]	@ (8007e20 <tcp_process+0x2a0>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8007d16:	4b41      	ldr	r3, [pc, #260]	@ (8007e1c <tcp_process+0x29c>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007d1e:	4b44      	ldr	r3, [pc, #272]	@ (8007e30 <tcp_process+0x2b0>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	89db      	ldrh	r3, [r3, #14]
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007d38:	4b39      	ldr	r3, [pc, #228]	@ (8007e20 <tcp_process+0x2a0>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	1e5a      	subs	r2, r3, #1
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2204      	movs	r2, #4
 8007d46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4618      	mov	r0, r3
 8007d52:	f004 ff13 	bl	800cb7c <ip4_route>
 8007d56:	4601      	mov	r1, r0
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f7ff f88c 	bl	8006e7c <tcp_eff_send_mss_netif>
 8007d64:	4603      	mov	r3, r0
 8007d66:	461a      	mov	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d70:	009a      	lsls	r2, r3, #2
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	f241 111c 	movw	r1, #4380	@ 0x111c
 8007d7c:	428b      	cmp	r3, r1
 8007d7e:	bf38      	it	cc
 8007d80:	460b      	movcc	r3, r1
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d204      	bcs.n	8007d90 <tcp_process+0x210>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	e00d      	b.n	8007dac <tcp_process+0x22c>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d904      	bls.n	8007da8 <tcp_process+0x228>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	e001      	b.n	8007dac <tcp_process+0x22c>
 8007da8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <tcp_process+0x24a>
 8007dbc:	4b13      	ldr	r3, [pc, #76]	@ (8007e0c <tcp_process+0x28c>)
 8007dbe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8007dc2:	491c      	ldr	r1, [pc, #112]	@ (8007e34 <tcp_process+0x2b4>)
 8007dc4:	4813      	ldr	r0, [pc, #76]	@ (8007e14 <tcp_process+0x294>)
 8007dc6:	f007 f835 	bl	800ee34 <iprintf>
        --pcb->snd_queuelen;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dde:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d12a      	bne.n	8007e3c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d106      	bne.n	8007e00 <tcp_process+0x280>
 8007df2:	4b06      	ldr	r3, [pc, #24]	@ (8007e0c <tcp_process+0x28c>)
 8007df4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8007df8:	490f      	ldr	r1, [pc, #60]	@ (8007e38 <tcp_process+0x2b8>)
 8007dfa:	4806      	ldr	r0, [pc, #24]	@ (8007e14 <tcp_process+0x294>)
 8007dfc:	f007 f81a 	bl	800ee34 <iprintf>
          pcb->unsent = rseg->next;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007e08:	e01c      	b.n	8007e44 <tcp_process+0x2c4>
 8007e0a:	bf00      	nop
 8007e0c:	0801109c 	.word	0x0801109c
 8007e10:	080112d4 	.word	0x080112d4
 8007e14:	080110e8 	.word	0x080110e8
 8007e18:	20003a84 	.word	0x20003a84
 8007e1c:	20003a7c 	.word	0x20003a7c
 8007e20:	20003a78 	.word	0x20003a78
 8007e24:	080112f0 	.word	0x080112f0
 8007e28:	20003a85 	.word	0x20003a85
 8007e2c:	20003a40 	.word	0x20003a40
 8007e30:	20003a68 	.word	0x20003a68
 8007e34:	08011310 	.word	0x08011310
 8007e38:	08011328 	.word	0x08011328
        } else {
          pcb->unacked = rseg->next;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8007e44:	69f8      	ldr	r0, [r7, #28]
 8007e46:	f7fe fc36 	bl	80066b6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007e58:	861a      	strh	r2, [r3, #48]	@ 0x30
 8007e5a:	e006      	b.n	8007e6a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <tcp_process+0x30a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6910      	ldr	r0, [r2, #16]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4798      	blx	r3
 8007e84:	4603      	mov	r3, r0
 8007e86:	76bb      	strb	r3, [r7, #26]
 8007e88:	e001      	b.n	8007e8e <tcp_process+0x30e>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007e8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007e92:	f113 0f0d 	cmn.w	r3, #13
 8007e96:	d102      	bne.n	8007e9e <tcp_process+0x31e>
          return ERR_ABRT;
 8007e98:	f06f 030c 	mvn.w	r3, #12
 8007e9c:	e250      	b.n	8008340 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8b5b      	ldrh	r3, [r3, #26]
 8007ea2:	f043 0302 	orr.w	r3, r3, #2
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007eac:	e23a      	b.n	8008324 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007eae:	4b98      	ldr	r3, [pc, #608]	@ (8008110 <tcp_process+0x590>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	f003 0310 	and.w	r3, r3, #16
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 8234 	beq.w	8008324 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ebc:	4b95      	ldr	r3, [pc, #596]	@ (8008114 <tcp_process+0x594>)
 8007ebe:	6819      	ldr	r1, [r3, #0]
 8007ec0:	4b95      	ldr	r3, [pc, #596]	@ (8008118 <tcp_process+0x598>)
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	4b95      	ldr	r3, [pc, #596]	@ (800811c <tcp_process+0x59c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ecc:	4b94      	ldr	r3, [pc, #592]	@ (8008120 <tcp_process+0x5a0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ed0:	885b      	ldrh	r3, [r3, #2]
 8007ed2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ed4:	4a92      	ldr	r2, [pc, #584]	@ (8008120 <tcp_process+0x5a0>)
 8007ed6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ed8:	8812      	ldrh	r2, [r2, #0]
 8007eda:	b292      	uxth	r2, r2
 8007edc:	9202      	str	r2, [sp, #8]
 8007ede:	9301      	str	r3, [sp, #4]
 8007ee0:	4b90      	ldr	r3, [pc, #576]	@ (8008124 <tcp_process+0x5a4>)
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	4b90      	ldr	r3, [pc, #576]	@ (8008128 <tcp_process+0x5a8>)
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f003 f8d7 	bl	800b09c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ef4:	2b05      	cmp	r3, #5
 8007ef6:	f200 8215 	bhi.w	8008324 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f002 fea3 	bl	800ac4c <tcp_rexmit_rto>
      break;
 8007f06:	e20d      	b.n	8008324 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007f08:	4b81      	ldr	r3, [pc, #516]	@ (8008110 <tcp_process+0x590>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80a1 	beq.w	8008058 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007f16:	4b7f      	ldr	r3, [pc, #508]	@ (8008114 <tcp_process+0x594>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	3b01      	subs	r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	db7e      	blt.n	8008024 <tcp_process+0x4a4>
 8007f26:	4b7b      	ldr	r3, [pc, #492]	@ (8008114 <tcp_process+0x594>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	dc77      	bgt.n	8008024 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2204      	movs	r2, #4
 8007f38:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d102      	bne.n	8007f48 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007f42:	23fa      	movs	r3, #250	@ 0xfa
 8007f44:	76bb      	strb	r3, [r7, #26]
 8007f46:	e01d      	b.n	8007f84 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <tcp_process+0x3e0>
 8007f52:	4b76      	ldr	r3, [pc, #472]	@ (800812c <tcp_process+0x5ac>)
 8007f54:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8007f58:	4975      	ldr	r1, [pc, #468]	@ (8008130 <tcp_process+0x5b0>)
 8007f5a:	4876      	ldr	r0, [pc, #472]	@ (8008134 <tcp_process+0x5b4>)
 8007f5c:	f006 ff6a 	bl	800ee34 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00a      	beq.n	8007f80 <tcp_process+0x400>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6910      	ldr	r0, [r2, #16]
 8007f74:	2200      	movs	r2, #0
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	4798      	blx	r3
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	76bb      	strb	r3, [r7, #26]
 8007f7e:	e001      	b.n	8007f84 <tcp_process+0x404>
 8007f80:	23f0      	movs	r3, #240	@ 0xf0
 8007f82:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007f84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007f8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f90:	f113 0f0d 	cmn.w	r3, #13
 8007f94:	d002      	beq.n	8007f9c <tcp_process+0x41c>
              tcp_abort(pcb);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fd fce6 	bl	8005968 <tcp_abort>
            }
            return ERR_ABRT;
 8007f9c:	f06f 030c 	mvn.w	r3, #12
 8007fa0:	e1ce      	b.n	8008340 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fae0 	bl	8008568 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007fa8:	4b63      	ldr	r3, [pc, #396]	@ (8008138 <tcp_process+0x5b8>)
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d005      	beq.n	8007fbc <tcp_process+0x43c>
            recv_acked--;
 8007fb0:	4b61      	ldr	r3, [pc, #388]	@ (8008138 <tcp_process+0x5b8>)
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8008138 <tcp_process+0x5b8>)
 8007fba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007fc0:	009a      	lsls	r2, r3, #2
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8007fcc:	428b      	cmp	r3, r1
 8007fce:	bf38      	it	cc
 8007fd0:	460b      	movcc	r3, r1
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d204      	bcs.n	8007fe0 <tcp_process+0x460>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	e00d      	b.n	8007ffc <tcp_process+0x47c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d904      	bls.n	8007ff8 <tcp_process+0x478>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	e001      	b.n	8007ffc <tcp_process+0x47c>
 8007ff8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008002:	4b4e      	ldr	r3, [pc, #312]	@ (800813c <tcp_process+0x5bc>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d037      	beq.n	800807e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8b5b      	ldrh	r3, [r3, #26]
 8008012:	f043 0302 	orr.w	r3, r3, #2
 8008016:	b29a      	uxth	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2207      	movs	r2, #7
 8008020:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008022:	e02c      	b.n	800807e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008024:	4b3b      	ldr	r3, [pc, #236]	@ (8008114 <tcp_process+0x594>)
 8008026:	6819      	ldr	r1, [r3, #0]
 8008028:	4b3b      	ldr	r3, [pc, #236]	@ (8008118 <tcp_process+0x598>)
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	4b3b      	ldr	r3, [pc, #236]	@ (800811c <tcp_process+0x59c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008034:	4b3a      	ldr	r3, [pc, #232]	@ (8008120 <tcp_process+0x5a0>)
 8008036:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008038:	885b      	ldrh	r3, [r3, #2]
 800803a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800803c:	4a38      	ldr	r2, [pc, #224]	@ (8008120 <tcp_process+0x5a0>)
 800803e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008040:	8812      	ldrh	r2, [r2, #0]
 8008042:	b292      	uxth	r2, r2
 8008044:	9202      	str	r2, [sp, #8]
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	4b36      	ldr	r3, [pc, #216]	@ (8008124 <tcp_process+0x5a4>)
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	4b36      	ldr	r3, [pc, #216]	@ (8008128 <tcp_process+0x5a8>)
 800804e:	4602      	mov	r2, r0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f003 f823 	bl	800b09c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008056:	e167      	b.n	8008328 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008058:	4b2d      	ldr	r3, [pc, #180]	@ (8008110 <tcp_process+0x590>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 8161 	beq.w	8008328 <tcp_process+0x7a8>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806a:	1e5a      	subs	r2, r3, #1
 800806c:	4b2b      	ldr	r3, [pc, #172]	@ (800811c <tcp_process+0x59c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	f040 8159 	bne.w	8008328 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f002 fe0a 	bl	800ac90 <tcp_rexmit>
      break;
 800807c:	e154      	b.n	8008328 <tcp_process+0x7a8>
 800807e:	e153      	b.n	8008328 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fa71 	bl	8008568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008086:	4b2d      	ldr	r3, [pc, #180]	@ (800813c <tcp_process+0x5bc>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	f003 0320 	and.w	r3, r3, #32
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 814c 	beq.w	800832c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	8b5b      	ldrh	r3, [r3, #26]
 8008098:	f043 0302 	orr.w	r3, r3, #2
 800809c:	b29a      	uxth	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2207      	movs	r2, #7
 80080a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080a8:	e140      	b.n	800832c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa5c 	bl	8008568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80080b0:	4b22      	ldr	r3, [pc, #136]	@ (800813c <tcp_process+0x5bc>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d071      	beq.n	80081a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80080bc:	4b14      	ldr	r3, [pc, #80]	@ (8008110 <tcp_process+0x590>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d060      	beq.n	800818a <tcp_process+0x60a>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080cc:	4b11      	ldr	r3, [pc, #68]	@ (8008114 <tcp_process+0x594>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d15a      	bne.n	800818a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d156      	bne.n	800818a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	8b5b      	ldrh	r3, [r3, #26]
 80080e0:	f043 0302 	orr.w	r3, r3, #2
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fe fdbc 	bl	8006c68 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80080f0:	4b13      	ldr	r3, [pc, #76]	@ (8008140 <tcp_process+0x5c0>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d105      	bne.n	8008106 <tcp_process+0x586>
 80080fa:	4b11      	ldr	r3, [pc, #68]	@ (8008140 <tcp_process+0x5c0>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	4a0f      	ldr	r2, [pc, #60]	@ (8008140 <tcp_process+0x5c0>)
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	e02e      	b.n	8008164 <tcp_process+0x5e4>
 8008106:	4b0e      	ldr	r3, [pc, #56]	@ (8008140 <tcp_process+0x5c0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e027      	b.n	800815e <tcp_process+0x5de>
 800810e:	bf00      	nop
 8008110:	20003a84 	.word	0x20003a84
 8008114:	20003a7c 	.word	0x20003a7c
 8008118:	20003a82 	.word	0x20003a82
 800811c:	20003a78 	.word	0x20003a78
 8008120:	20003a68 	.word	0x20003a68
 8008124:	200004e0 	.word	0x200004e0
 8008128:	200004e4 	.word	0x200004e4
 800812c:	0801109c 	.word	0x0801109c
 8008130:	0801133c 	.word	0x0801133c
 8008134:	080110e8 	.word	0x080110e8
 8008138:	20003a80 	.word	0x20003a80
 800813c:	20003a85 	.word	0x20003a85
 8008140:	20003a4c 	.word	0x20003a4c
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d104      	bne.n	8008158 <tcp_process+0x5d8>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	60da      	str	r2, [r3, #12]
 8008156:	e005      	b.n	8008164 <tcp_process+0x5e4>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1ef      	bne.n	8008144 <tcp_process+0x5c4>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	4b77      	ldr	r3, [pc, #476]	@ (8008348 <tcp_process+0x7c8>)
 800816c:	2201      	movs	r2, #1
 800816e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	220a      	movs	r2, #10
 8008174:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008176:	4b75      	ldr	r3, [pc, #468]	@ (800834c <tcp_process+0x7cc>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	60da      	str	r2, [r3, #12]
 800817e:	4a73      	ldr	r2, [pc, #460]	@ (800834c <tcp_process+0x7cc>)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	f003 f94c 	bl	800b420 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008188:	e0d2      	b.n	8008330 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	8b5b      	ldrh	r3, [r3, #26]
 800818e:	f043 0302 	orr.w	r3, r3, #2
 8008192:	b29a      	uxth	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2208      	movs	r2, #8
 800819c:	751a      	strb	r2, [r3, #20]
      break;
 800819e:	e0c7      	b.n	8008330 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081a0:	4b6b      	ldr	r3, [pc, #428]	@ (8008350 <tcp_process+0x7d0>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80c1 	beq.w	8008330 <tcp_process+0x7b0>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081b2:	4b68      	ldr	r3, [pc, #416]	@ (8008354 <tcp_process+0x7d4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	f040 80ba 	bne.w	8008330 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f040 80b5 	bne.w	8008330 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2206      	movs	r2, #6
 80081ca:	751a      	strb	r2, [r3, #20]
      break;
 80081cc:	e0b0      	b.n	8008330 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f9ca 	bl	8008568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80081d4:	4b60      	ldr	r3, [pc, #384]	@ (8008358 <tcp_process+0x7d8>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 80a9 	beq.w	8008334 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	8b5b      	ldrh	r3, [r3, #26]
 80081e6:	f043 0302 	orr.w	r3, r3, #2
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7fe fd39 	bl	8006c68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80081f6:	4b59      	ldr	r3, [pc, #356]	@ (800835c <tcp_process+0x7dc>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d105      	bne.n	800820c <tcp_process+0x68c>
 8008200:	4b56      	ldr	r3, [pc, #344]	@ (800835c <tcp_process+0x7dc>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	4a55      	ldr	r2, [pc, #340]	@ (800835c <tcp_process+0x7dc>)
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	e013      	b.n	8008234 <tcp_process+0x6b4>
 800820c:	4b53      	ldr	r3, [pc, #332]	@ (800835c <tcp_process+0x7dc>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	613b      	str	r3, [r7, #16]
 8008212:	e00c      	b.n	800822e <tcp_process+0x6ae>
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	429a      	cmp	r2, r3
 800821c:	d104      	bne.n	8008228 <tcp_process+0x6a8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	e005      	b.n	8008234 <tcp_process+0x6b4>
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1ef      	bne.n	8008214 <tcp_process+0x694>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	4b43      	ldr	r3, [pc, #268]	@ (8008348 <tcp_process+0x7c8>)
 800823c:	2201      	movs	r2, #1
 800823e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	220a      	movs	r2, #10
 8008244:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008246:	4b41      	ldr	r3, [pc, #260]	@ (800834c <tcp_process+0x7cc>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60da      	str	r2, [r3, #12]
 800824e:	4a3f      	ldr	r2, [pc, #252]	@ (800834c <tcp_process+0x7cc>)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	f003 f8e4 	bl	800b420 <tcp_timer_needed>
      }
      break;
 8008258:	e06c      	b.n	8008334 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f984 	bl	8008568 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008260:	4b3b      	ldr	r3, [pc, #236]	@ (8008350 <tcp_process+0x7d0>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b00      	cmp	r3, #0
 800826a:	d065      	beq.n	8008338 <tcp_process+0x7b8>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008270:	4b38      	ldr	r3, [pc, #224]	@ (8008354 <tcp_process+0x7d4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d15f      	bne.n	8008338 <tcp_process+0x7b8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d15b      	bne.n	8008338 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7fe fcf1 	bl	8006c68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008286:	4b35      	ldr	r3, [pc, #212]	@ (800835c <tcp_process+0x7dc>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d105      	bne.n	800829c <tcp_process+0x71c>
 8008290:	4b32      	ldr	r3, [pc, #200]	@ (800835c <tcp_process+0x7dc>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	4a31      	ldr	r2, [pc, #196]	@ (800835c <tcp_process+0x7dc>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e013      	b.n	80082c4 <tcp_process+0x744>
 800829c:	4b2f      	ldr	r3, [pc, #188]	@ (800835c <tcp_process+0x7dc>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	e00c      	b.n	80082be <tcp_process+0x73e>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d104      	bne.n	80082b8 <tcp_process+0x738>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	60da      	str	r2, [r3, #12]
 80082b6:	e005      	b.n	80082c4 <tcp_process+0x744>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1ef      	bne.n	80082a4 <tcp_process+0x724>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	60da      	str	r2, [r3, #12]
 80082ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008348 <tcp_process+0x7c8>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	220a      	movs	r2, #10
 80082d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80082d6:	4b1d      	ldr	r3, [pc, #116]	@ (800834c <tcp_process+0x7cc>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	4a1b      	ldr	r2, [pc, #108]	@ (800834c <tcp_process+0x7cc>)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	f003 f89c 	bl	800b420 <tcp_timer_needed>
      }
      break;
 80082e8:	e026      	b.n	8008338 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f93c 	bl	8008568 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80082f0:	4b17      	ldr	r3, [pc, #92]	@ (8008350 <tcp_process+0x7d0>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d01f      	beq.n	800833c <tcp_process+0x7bc>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008300:	4b14      	ldr	r3, [pc, #80]	@ (8008354 <tcp_process+0x7d4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d119      	bne.n	800833c <tcp_process+0x7bc>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800830c:	2b00      	cmp	r3, #0
 800830e:	d115      	bne.n	800833c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008310:	4b11      	ldr	r3, [pc, #68]	@ (8008358 <tcp_process+0x7d8>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	f043 0310 	orr.w	r3, r3, #16
 8008318:	b2da      	uxtb	r2, r3
 800831a:	4b0f      	ldr	r3, [pc, #60]	@ (8008358 <tcp_process+0x7d8>)
 800831c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800831e:	e00d      	b.n	800833c <tcp_process+0x7bc>
    default:
      break;
 8008320:	bf00      	nop
 8008322:	e00c      	b.n	800833e <tcp_process+0x7be>
      break;
 8008324:	bf00      	nop
 8008326:	e00a      	b.n	800833e <tcp_process+0x7be>
      break;
 8008328:	bf00      	nop
 800832a:	e008      	b.n	800833e <tcp_process+0x7be>
      break;
 800832c:	bf00      	nop
 800832e:	e006      	b.n	800833e <tcp_process+0x7be>
      break;
 8008330:	bf00      	nop
 8008332:	e004      	b.n	800833e <tcp_process+0x7be>
      break;
 8008334:	bf00      	nop
 8008336:	e002      	b.n	800833e <tcp_process+0x7be>
      break;
 8008338:	bf00      	nop
 800833a:	e000      	b.n	800833e <tcp_process+0x7be>
      break;
 800833c:	bf00      	nop
  }
  return ERR_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3724      	adds	r7, #36	@ 0x24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd90      	pop	{r4, r7, pc}
 8008348:	20003a54 	.word	0x20003a54
 800834c:	20003a50 	.word	0x20003a50
 8008350:	20003a84 	.word	0x20003a84
 8008354:	20003a7c 	.word	0x20003a7c
 8008358:	20003a85 	.word	0x20003a85
 800835c:	20003a4c 	.word	0x20003a4c

08008360 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d106      	bne.n	800837e <tcp_oos_insert_segment+0x1e>
 8008370:	4b3b      	ldr	r3, [pc, #236]	@ (8008460 <tcp_oos_insert_segment+0x100>)
 8008372:	f240 421f 	movw	r2, #1055	@ 0x41f
 8008376:	493b      	ldr	r1, [pc, #236]	@ (8008464 <tcp_oos_insert_segment+0x104>)
 8008378:	483b      	ldr	r0, [pc, #236]	@ (8008468 <tcp_oos_insert_segment+0x108>)
 800837a:	f006 fd5b 	bl	800ee34 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	899b      	ldrh	r3, [r3, #12]
 8008384:	b29b      	uxth	r3, r3
 8008386:	4618      	mov	r0, r3
 8008388:	f7fb fa68 	bl	800385c <lwip_htons>
 800838c:	4603      	mov	r3, r0
 800838e:	b2db      	uxtb	r3, r3
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d028      	beq.n	80083ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008398:	6838      	ldr	r0, [r7, #0]
 800839a:	f7fe f977 	bl	800668c <tcp_segs_free>
    next = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	603b      	str	r3, [r7, #0]
 80083a2:	e056      	b.n	8008452 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	899b      	ldrh	r3, [r3, #12]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fb fa55 	bl	800385c <lwip_htons>
 80083b2:	4603      	mov	r3, r0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00d      	beq.n	80083da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	899b      	ldrh	r3, [r3, #12]
 80083c4:	b29c      	uxth	r4, r3
 80083c6:	2001      	movs	r0, #1
 80083c8:	f7fb fa48 	bl	800385c <lwip_htons>
 80083cc:	4603      	mov	r3, r0
 80083ce:	461a      	mov	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	4322      	orrs	r2, r4
 80083d6:	b292      	uxth	r2, r2
 80083d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7fe f966 	bl	80066b6 <tcp_seg_free>
    while (next &&
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00e      	beq.n	800840e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	891b      	ldrh	r3, [r3, #8]
 80083f4:	461a      	mov	r2, r3
 80083f6:	4b1d      	ldr	r3, [pc, #116]	@ (800846c <tcp_oos_insert_segment+0x10c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	441a      	add	r2, r3
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	8909      	ldrh	r1, [r1, #8]
 8008406:	440b      	add	r3, r1
 8008408:	1ad3      	subs	r3, r2, r3
    while (next &&
 800840a:	2b00      	cmp	r3, #0
 800840c:	daca      	bge.n	80083a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01e      	beq.n	8008452 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	891b      	ldrh	r3, [r3, #8]
 8008418:	461a      	mov	r2, r3
 800841a:	4b14      	ldr	r3, [pc, #80]	@ (800846c <tcp_oos_insert_segment+0x10c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	441a      	add	r2, r3
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008428:	2b00      	cmp	r3, #0
 800842a:	dd12      	ble.n	8008452 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	b29a      	uxth	r2, r3
 8008434:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <tcp_oos_insert_segment+0x10c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	b29a      	uxth	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	891b      	ldrh	r3, [r3, #8]
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7fc fb7d 	bl	8004b4c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	601a      	str	r2, [r3, #0]
}
 8008458:	bf00      	nop
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	bd90      	pop	{r4, r7, pc}
 8008460:	0801109c 	.word	0x0801109c
 8008464:	0801135c 	.word	0x0801135c
 8008468:	080110e8 	.word	0x080110e8
 800846c:	20003a78 	.word	0x20003a78

08008470 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008470:	b5b0      	push	{r4, r5, r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800847e:	e03e      	b.n	80084fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	4618      	mov	r0, r3
 8008490:	f7fc fd6a 	bl	8004f68 <pbuf_clen>
 8008494:	4603      	mov	r3, r0
 8008496:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800849e:	8a7a      	ldrh	r2, [r7, #18]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d906      	bls.n	80084b2 <tcp_free_acked_segments+0x42>
 80084a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008550 <tcp_free_acked_segments+0xe0>)
 80084a6:	f240 4257 	movw	r2, #1111	@ 0x457
 80084aa:	492a      	ldr	r1, [pc, #168]	@ (8008554 <tcp_free_acked_segments+0xe4>)
 80084ac:	482a      	ldr	r0, [pc, #168]	@ (8008558 <tcp_free_acked_segments+0xe8>)
 80084ae:	f006 fcc1 	bl	800ee34 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80084b8:	8a7b      	ldrh	r3, [r7, #18]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	891a      	ldrh	r2, [r3, #8]
 80084c8:	4b24      	ldr	r3, [pc, #144]	@ (800855c <tcp_free_acked_segments+0xec>)
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	4413      	add	r3, r2
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	4b22      	ldr	r3, [pc, #136]	@ (800855c <tcp_free_acked_segments+0xec>)
 80084d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80084d4:	6978      	ldr	r0, [r7, #20]
 80084d6:	f7fe f8ee 	bl	80066b6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00c      	beq.n	80084fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <tcp_free_acked_segments+0x8e>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d106      	bne.n	80084fe <tcp_free_acked_segments+0x8e>
 80084f0:	4b17      	ldr	r3, [pc, #92]	@ (8008550 <tcp_free_acked_segments+0xe0>)
 80084f2:	f240 4261 	movw	r2, #1121	@ 0x461
 80084f6:	491a      	ldr	r1, [pc, #104]	@ (8008560 <tcp_free_acked_segments+0xf0>)
 80084f8:	4817      	ldr	r0, [pc, #92]	@ (8008558 <tcp_free_acked_segments+0xe8>)
 80084fa:	f006 fc9b 	bl	800ee34 <iprintf>
  while (seg_list != NULL &&
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d020      	beq.n	8008546 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	4618      	mov	r0, r3
 800850c:	f7fb f9bb 	bl	8003886 <lwip_htonl>
 8008510:	4604      	mov	r4, r0
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	891b      	ldrh	r3, [r3, #8]
 8008516:	461d      	mov	r5, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	899b      	ldrh	r3, [r3, #12]
 800851e:	b29b      	uxth	r3, r3
 8008520:	4618      	mov	r0, r3
 8008522:	f7fb f99b 	bl	800385c <lwip_htons>
 8008526:	4603      	mov	r3, r0
 8008528:	b2db      	uxtb	r3, r3
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <tcp_free_acked_segments+0xc6>
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <tcp_free_acked_segments+0xc8>
 8008536:	2300      	movs	r3, #0
 8008538:	442b      	add	r3, r5
 800853a:	18e2      	adds	r2, r4, r3
 800853c:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <tcp_free_acked_segments+0xf4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd9c      	ble.n	8008480 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008546:	68bb      	ldr	r3, [r7, #8]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bdb0      	pop	{r4, r5, r7, pc}
 8008550:	0801109c 	.word	0x0801109c
 8008554:	08011384 	.word	0x08011384
 8008558:	080110e8 	.word	0x080110e8
 800855c:	20003a80 	.word	0x20003a80
 8008560:	080113ac 	.word	0x080113ac
 8008564:	20003a7c 	.word	0x20003a7c

08008568 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008568:	b5b0      	push	{r4, r5, r7, lr}
 800856a:	b094      	sub	sp, #80	@ 0x50
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d106      	bne.n	8008588 <tcp_receive+0x20>
 800857a:	4b91      	ldr	r3, [pc, #580]	@ (80087c0 <tcp_receive+0x258>)
 800857c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8008580:	4990      	ldr	r1, [pc, #576]	@ (80087c4 <tcp_receive+0x25c>)
 8008582:	4891      	ldr	r0, [pc, #580]	@ (80087c8 <tcp_receive+0x260>)
 8008584:	f006 fc56 	bl	800ee34 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	7d1b      	ldrb	r3, [r3, #20]
 800858c:	2b03      	cmp	r3, #3
 800858e:	d806      	bhi.n	800859e <tcp_receive+0x36>
 8008590:	4b8b      	ldr	r3, [pc, #556]	@ (80087c0 <tcp_receive+0x258>)
 8008592:	f240 427c 	movw	r2, #1148	@ 0x47c
 8008596:	498d      	ldr	r1, [pc, #564]	@ (80087cc <tcp_receive+0x264>)
 8008598:	488b      	ldr	r0, [pc, #556]	@ (80087c8 <tcp_receive+0x260>)
 800859a:	f006 fc4b 	bl	800ee34 <iprintf>

  if (flags & TCP_ACK) {
 800859e:	4b8c      	ldr	r3, [pc, #560]	@ (80087d0 <tcp_receive+0x268>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	f003 0310 	and.w	r3, r3, #16
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 8264 	beq.w	8008a74 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80085b2:	461a      	mov	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085b8:	4413      	add	r3, r2
 80085ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085c0:	4b84      	ldr	r3, [pc, #528]	@ (80087d4 <tcp_receive+0x26c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	db1b      	blt.n	8008602 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085ce:	4b81      	ldr	r3, [pc, #516]	@ (80087d4 <tcp_receive+0x26c>)
 80085d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d106      	bne.n	80085e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085da:	4b7f      	ldr	r3, [pc, #508]	@ (80087d8 <tcp_receive+0x270>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	db0e      	blt.n	8008602 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085e8:	4b7b      	ldr	r3, [pc, #492]	@ (80087d8 <tcp_receive+0x270>)
 80085ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d125      	bne.n	800863c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80085f0:	4b7a      	ldr	r3, [pc, #488]	@ (80087dc <tcp_receive+0x274>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	89db      	ldrh	r3, [r3, #14]
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80085fe:	429a      	cmp	r2, r3
 8008600:	d91c      	bls.n	800863c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008602:	4b76      	ldr	r3, [pc, #472]	@ (80087dc <tcp_receive+0x274>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	89db      	ldrh	r3, [r3, #14]
 8008608:	b29a      	uxth	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800861c:	429a      	cmp	r2, r3
 800861e:	d205      	bcs.n	800862c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800862c:	4b69      	ldr	r3, [pc, #420]	@ (80087d4 <tcp_receive+0x26c>)
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8008634:	4b68      	ldr	r3, [pc, #416]	@ (80087d8 <tcp_receive+0x270>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800863c:	4b66      	ldr	r3, [pc, #408]	@ (80087d8 <tcp_receive+0x270>)
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	dc58      	bgt.n	80086fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800864a:	4b65      	ldr	r3, [pc, #404]	@ (80087e0 <tcp_receive+0x278>)
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d14b      	bne.n	80086ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800865c:	4413      	add	r3, r2
 800865e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008660:	429a      	cmp	r2, r3
 8008662:	d142      	bne.n	80086ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800866a:	2b00      	cmp	r3, #0
 800866c:	db3d      	blt.n	80086ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008672:	4b59      	ldr	r3, [pc, #356]	@ (80087d8 <tcp_receive+0x270>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d137      	bne.n	80086ea <tcp_receive+0x182>
              found_dupack = 1;
 800867a:	2301      	movs	r3, #1
 800867c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008684:	2bff      	cmp	r3, #255	@ 0xff
 8008686:	d007      	beq.n	8008698 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800868e:	3301      	adds	r3, #1
 8008690:	b2da      	uxtb	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d91b      	bls.n	80086da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80086ac:	4413      	add	r3, r2
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d30a      	bcc.n	80086d0 <tcp_receive+0x168>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80086c4:	4413      	add	r3, r2
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80086ce:	e004      	b.n	80086da <tcp_receive+0x172>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80086d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d902      	bls.n	80086ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f002 fb3f 	bl	800ad68 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80086ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f040 8161 	bne.w	80089b4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086fa:	e15b      	b.n	80089b4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80086fc:	4b36      	ldr	r3, [pc, #216]	@ (80087d8 <tcp_receive+0x270>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	3b01      	subs	r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	f2c0 814e 	blt.w	80089aa <tcp_receive+0x442>
 800870e:	4b32      	ldr	r3, [pc, #200]	@ (80087d8 <tcp_receive+0x270>)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	f300 8146 	bgt.w	80089aa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	8b5b      	ldrh	r3, [r3, #26]
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d010      	beq.n	800874c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	8b5b      	ldrh	r3, [r3, #26]
 800872e:	f023 0304 	bic.w	r3, r3, #4
 8008732:	b29a      	uxth	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800875a:	10db      	asrs	r3, r3, #3
 800875c:	b21b      	sxth	r3, r3
 800875e:	b29a      	uxth	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008766:	b29b      	uxth	r3, r3
 8008768:	4413      	add	r3, r2
 800876a:	b29b      	uxth	r3, r3
 800876c:	b21a      	sxth	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008774:	4b18      	ldr	r3, [pc, #96]	@ (80087d8 <tcp_receive+0x270>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	b29a      	uxth	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877e:	b29b      	uxth	r3, r3
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800878c:	4b12      	ldr	r3, [pc, #72]	@ (80087d8 <tcp_receive+0x270>)
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	7d1b      	ldrb	r3, [r3, #20]
 8008798:	2b03      	cmp	r3, #3
 800879a:	f240 8097 	bls.w	80088cc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d245      	bcs.n	800883a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	8b5b      	ldrh	r3, [r3, #26]
 80087b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d014      	beq.n	80087e4 <tcp_receive+0x27c>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e013      	b.n	80087e6 <tcp_receive+0x27e>
 80087be:	bf00      	nop
 80087c0:	0801109c 	.word	0x0801109c
 80087c4:	080113cc 	.word	0x080113cc
 80087c8:	080110e8 	.word	0x080110e8
 80087cc:	080113e8 	.word	0x080113e8
 80087d0:	20003a84 	.word	0x20003a84
 80087d4:	20003a78 	.word	0x20003a78
 80087d8:	20003a7c 	.word	0x20003a7c
 80087dc:	20003a68 	.word	0x20003a68
 80087e0:	20003a82 	.word	0x20003a82
 80087e4:	2302      	movs	r3, #2
 80087e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80087ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80087f4:	fb12 f303 	smulbb	r3, r2, r3
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bf28      	it	cs
 8008800:	4613      	movcs	r3, r2
 8008802:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800880a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800880c:	4413      	add	r3, r2
 800880e:	b29a      	uxth	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008816:	429a      	cmp	r2, r3
 8008818:	d309      	bcc.n	800882e <tcp_receive+0x2c6>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008820:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008822:	4413      	add	r3, r2
 8008824:	b29a      	uxth	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800882c:	e04e      	b.n	80088cc <tcp_receive+0x364>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008834:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008838:	e048      	b.n	80088cc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008840:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008842:	4413      	add	r3, r2
 8008844:	b29a      	uxth	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800884c:	429a      	cmp	r2, r3
 800884e:	d309      	bcc.n	8008864 <tcp_receive+0x2fc>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008856:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008858:	4413      	add	r3, r2
 800885a:	b29a      	uxth	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008862:	e004      	b.n	800886e <tcp_receive+0x306>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800886a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800887a:	429a      	cmp	r2, r3
 800887c:	d326      	bcc.n	80088cc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	b29a      	uxth	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800889e:	4413      	add	r3, r2
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d30a      	bcc.n	80088c2 <tcp_receive+0x35a>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80088b6:	4413      	add	r3, r2
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80088c0:	e004      	b.n	80088cc <tcp_receive+0x364>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80088c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088d4:	4a98      	ldr	r2, [pc, #608]	@ (8008b38 <tcp_receive+0x5d0>)
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff fdca 	bl	8008470 <tcp_free_acked_segments>
 80088dc:	4602      	mov	r2, r0
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ea:	4a94      	ldr	r2, [pc, #592]	@ (8008b3c <tcp_receive+0x5d4>)
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7ff fdbf 	bl	8008470 <tcp_free_acked_segments>
 80088f2:	4602      	mov	r2, r0
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d104      	bne.n	800890a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008906:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008908:	e002      	b.n	8008910 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d103      	bne.n	8008926 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800892c:	4b84      	ldr	r3, [pc, #528]	@ (8008b40 <tcp_receive+0x5d8>)
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	4413      	add	r3, r2
 8008932:	b29a      	uxth	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	8b5b      	ldrh	r3, [r3, #26]
 800893e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008942:	2b00      	cmp	r3, #0
 8008944:	d035      	beq.n	80089b2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800894a:	2b00      	cmp	r3, #0
 800894c:	d118      	bne.n	8008980 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00c      	beq.n	8008970 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	4618      	mov	r0, r3
 8008964:	f7fa ff8f 	bl	8003886 <lwip_htonl>
 8008968:	4603      	mov	r3, r0
 800896a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800896c:	2b00      	cmp	r3, #0
 800896e:	dc20      	bgt.n	80089b2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	8b5b      	ldrh	r3, [r3, #26]
 8008974:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008978:	b29a      	uxth	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800897e:	e018      	b.n	80089b2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4618      	mov	r0, r3
 800898e:	f7fa ff7a 	bl	8003886 <lwip_htonl>
 8008992:	4603      	mov	r3, r0
 8008994:	1ae3      	subs	r3, r4, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	dc0b      	bgt.n	80089b2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	8b5b      	ldrh	r3, [r3, #26]
 800899e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80089a8:	e003      	b.n	80089b2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f002 fbc8 	bl	800b140 <tcp_send_empty_ack>
 80089b0:	e000      	b.n	80089b4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80089b2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d05b      	beq.n	8008a74 <tcp_receive+0x50c>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089c0:	4b60      	ldr	r3, [pc, #384]	@ (8008b44 <tcp_receive+0x5dc>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	da54      	bge.n	8008a74 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80089ca:	4b5f      	ldr	r3, [pc, #380]	@ (8008b48 <tcp_receive+0x5e0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80089de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80089e8:	10db      	asrs	r3, r3, #3
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008a02:	4413      	add	r3, r2
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	b21a      	sxth	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008a0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	da05      	bge.n	8008a20 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008a14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008a18:	425b      	negs	r3, r3
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008a20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a2a:	109b      	asrs	r3, r3, #2
 8008a2c:	b21b      	sxth	r3, r3
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008a44:	4413      	add	r3, r2
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	b21a      	sxth	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a54:	10db      	asrs	r3, r3, #3
 8008a56:	b21b      	sxth	r3, r3
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	4413      	add	r3, r2
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	b21a      	sxth	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008a74:	4b35      	ldr	r3, [pc, #212]	@ (8008b4c <tcp_receive+0x5e4>)
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 84df 	beq.w	800943c <tcp_receive+0xed4>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7d1b      	ldrb	r3, [r3, #20]
 8008a82:	2b06      	cmp	r3, #6
 8008a84:	f200 84da 	bhi.w	800943c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a8c:	4b30      	ldr	r3, [pc, #192]	@ (8008b50 <tcp_receive+0x5e8>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f2c0 808f 	blt.w	8008bb8 <tcp_receive+0x650>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8008b4c <tcp_receive+0x5e4>)
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8008b50 <tcp_receive+0x5e8>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	440b      	add	r3, r1
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	3301      	adds	r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f300 8082 	bgt.w	8008bb8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008ab4:	4b27      	ldr	r3, [pc, #156]	@ (8008b54 <tcp_receive+0x5ec>)
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008abe:	4b24      	ldr	r3, [pc, #144]	@ (8008b50 <tcp_receive+0x5e8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008ac6:	4b23      	ldr	r3, [pc, #140]	@ (8008b54 <tcp_receive+0x5ec>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d106      	bne.n	8008adc <tcp_receive+0x574>
 8008ace:	4b22      	ldr	r3, [pc, #136]	@ (8008b58 <tcp_receive+0x5f0>)
 8008ad0:	f240 5294 	movw	r2, #1428	@ 0x594
 8008ad4:	4921      	ldr	r1, [pc, #132]	@ (8008b5c <tcp_receive+0x5f4>)
 8008ad6:	4822      	ldr	r0, [pc, #136]	@ (8008b60 <tcp_receive+0x5f8>)
 8008ad8:	f006 f9ac 	bl	800ee34 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ade:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d906      	bls.n	8008af4 <tcp_receive+0x58c>
 8008ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8008b58 <tcp_receive+0x5f0>)
 8008ae8:	f240 5295 	movw	r2, #1429	@ 0x595
 8008aec:	491d      	ldr	r1, [pc, #116]	@ (8008b64 <tcp_receive+0x5fc>)
 8008aee:	481c      	ldr	r0, [pc, #112]	@ (8008b60 <tcp_receive+0x5f8>)
 8008af0:	f006 f9a0 	bl	800ee34 <iprintf>
      off = (u16_t)off32;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008afa:	4b16      	ldr	r3, [pc, #88]	@ (8008b54 <tcp_receive+0x5ec>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	891b      	ldrh	r3, [r3, #8]
 8008b00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d906      	bls.n	8008b16 <tcp_receive+0x5ae>
 8008b08:	4b13      	ldr	r3, [pc, #76]	@ (8008b58 <tcp_receive+0x5f0>)
 8008b0a:	f240 5297 	movw	r2, #1431	@ 0x597
 8008b0e:	4916      	ldr	r1, [pc, #88]	@ (8008b68 <tcp_receive+0x600>)
 8008b10:	4813      	ldr	r0, [pc, #76]	@ (8008b60 <tcp_receive+0x5f8>)
 8008b12:	f006 f98f 	bl	800ee34 <iprintf>
      inseg.len -= off;
 8008b16:	4b0f      	ldr	r3, [pc, #60]	@ (8008b54 <tcp_receive+0x5ec>)
 8008b18:	891a      	ldrh	r2, [r3, #8]
 8008b1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	4b0c      	ldr	r3, [pc, #48]	@ (8008b54 <tcp_receive+0x5ec>)
 8008b24:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008b26:	4b0b      	ldr	r3, [pc, #44]	@ (8008b54 <tcp_receive+0x5ec>)
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	891a      	ldrh	r2, [r3, #8]
 8008b2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8008b34:	e02a      	b.n	8008b8c <tcp_receive+0x624>
 8008b36:	bf00      	nop
 8008b38:	08011404 	.word	0x08011404
 8008b3c:	0801140c 	.word	0x0801140c
 8008b40:	20003a80 	.word	0x20003a80
 8008b44:	20003a7c 	.word	0x20003a7c
 8008b48:	20003a40 	.word	0x20003a40
 8008b4c:	20003a82 	.word	0x20003a82
 8008b50:	20003a78 	.word	0x20003a78
 8008b54:	20003a58 	.word	0x20003a58
 8008b58:	0801109c 	.word	0x0801109c
 8008b5c:	08011414 	.word	0x08011414
 8008b60:	080110e8 	.word	0x080110e8
 8008b64:	08011424 	.word	0x08011424
 8008b68:	08011434 	.word	0x08011434
        off -= p->len;
 8008b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b6e:	895b      	ldrh	r3, [r3, #10]
 8008b70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008b7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b82:	2200      	movs	r2, #0
 8008b84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8008b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b8e:	895b      	ldrh	r3, [r3, #10]
 8008b90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d8e9      	bhi.n	8008b6c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008b98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008ba0:	f7fc f8d4 	bl	8004d4c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba8:	4a90      	ldr	r2, [pc, #576]	@ (8008dec <tcp_receive+0x884>)
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	4b90      	ldr	r3, [pc, #576]	@ (8008df0 <tcp_receive+0x888>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	4a8e      	ldr	r2, [pc, #568]	@ (8008dec <tcp_receive+0x884>)
 8008bb2:	6812      	ldr	r2, [r2, #0]
 8008bb4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008bb6:	e00d      	b.n	8008bd4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008bb8:	4b8c      	ldr	r3, [pc, #560]	@ (8008dec <tcp_receive+0x884>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	da06      	bge.n	8008bd4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	8b5b      	ldrh	r3, [r3, #26]
 8008bca:	f043 0302 	orr.w	r3, r3, #2
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008bd4:	4b85      	ldr	r3, [pc, #532]	@ (8008dec <tcp_receive+0x884>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f2c0 8427 	blt.w	8009432 <tcp_receive+0xeca>
 8008be4:	4b81      	ldr	r3, [pc, #516]	@ (8008dec <tcp_receive+0x884>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bec:	6879      	ldr	r1, [r7, #4]
 8008bee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008bf0:	440b      	add	r3, r1
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f300 841b 	bgt.w	8009432 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c00:	4b7a      	ldr	r3, [pc, #488]	@ (8008dec <tcp_receive+0x884>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	f040 8298 	bne.w	800913a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008c0a:	4b79      	ldr	r3, [pc, #484]	@ (8008df0 <tcp_receive+0x888>)
 8008c0c:	891c      	ldrh	r4, [r3, #8]
 8008c0e:	4b78      	ldr	r3, [pc, #480]	@ (8008df0 <tcp_receive+0x888>)
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	899b      	ldrh	r3, [r3, #12]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fa fe20 	bl	800385c <lwip_htons>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	f003 0303 	and.w	r3, r3, #3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <tcp_receive+0x6c4>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e000      	b.n	8008c2e <tcp_receive+0x6c6>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4423      	add	r3, r4
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	4b70      	ldr	r3, [pc, #448]	@ (8008df4 <tcp_receive+0x88c>)
 8008c34:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8008df4 <tcp_receive+0x88c>)
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d274      	bcs.n	8008d2c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c42:	4b6b      	ldr	r3, [pc, #428]	@ (8008df0 <tcp_receive+0x888>)
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	899b      	ldrh	r3, [r3, #12]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fa fe06 	bl	800385c <lwip_htons>
 8008c50:	4603      	mov	r3, r0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01e      	beq.n	8008c9a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008c5c:	4b64      	ldr	r3, [pc, #400]	@ (8008df0 <tcp_receive+0x888>)
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	899b      	ldrh	r3, [r3, #12]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	b21b      	sxth	r3, r3
 8008c66:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008c6a:	b21c      	sxth	r4, r3
 8008c6c:	4b60      	ldr	r3, [pc, #384]	@ (8008df0 <tcp_receive+0x888>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	899b      	ldrh	r3, [r3, #12]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fa fdf1 	bl	800385c <lwip_htons>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fa fde9 	bl	800385c <lwip_htons>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	b21b      	sxth	r3, r3
 8008c8e:	4323      	orrs	r3, r4
 8008c90:	b21a      	sxth	r2, r3
 8008c92:	4b57      	ldr	r3, [pc, #348]	@ (8008df0 <tcp_receive+0x888>)
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	b292      	uxth	r2, r2
 8008c98:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008c9e:	4b54      	ldr	r3, [pc, #336]	@ (8008df0 <tcp_receive+0x888>)
 8008ca0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008ca2:	4b53      	ldr	r3, [pc, #332]	@ (8008df0 <tcp_receive+0x888>)
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	899b      	ldrh	r3, [r3, #12]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fa fdd6 	bl	800385c <lwip_htons>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d005      	beq.n	8008cc8 <tcp_receive+0x760>
            inseg.len -= 1;
 8008cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8008df0 <tcp_receive+0x888>)
 8008cbe:	891b      	ldrh	r3, [r3, #8]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8008df0 <tcp_receive+0x888>)
 8008cc6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008cc8:	4b49      	ldr	r3, [pc, #292]	@ (8008df0 <tcp_receive+0x888>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	4a48      	ldr	r2, [pc, #288]	@ (8008df0 <tcp_receive+0x888>)
 8008cce:	8912      	ldrh	r2, [r2, #8]
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fb ff3a 	bl	8004b4c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008cd8:	4b45      	ldr	r3, [pc, #276]	@ (8008df0 <tcp_receive+0x888>)
 8008cda:	891c      	ldrh	r4, [r3, #8]
 8008cdc:	4b44      	ldr	r3, [pc, #272]	@ (8008df0 <tcp_receive+0x888>)
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	899b      	ldrh	r3, [r3, #12]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fa fdb9 	bl	800385c <lwip_htons>
 8008cea:	4603      	mov	r3, r0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <tcp_receive+0x792>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e000      	b.n	8008cfc <tcp_receive+0x794>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	4423      	add	r3, r4
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	4b3c      	ldr	r3, [pc, #240]	@ (8008df4 <tcp_receive+0x88c>)
 8008d02:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d04:	4b3b      	ldr	r3, [pc, #236]	@ (8008df4 <tcp_receive+0x88c>)
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4b38      	ldr	r3, [pc, #224]	@ (8008dec <tcp_receive+0x884>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	441a      	add	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008d18:	440b      	add	r3, r1
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d006      	beq.n	8008d2c <tcp_receive+0x7c4>
 8008d1e:	4b36      	ldr	r3, [pc, #216]	@ (8008df8 <tcp_receive+0x890>)
 8008d20:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8008d24:	4935      	ldr	r1, [pc, #212]	@ (8008dfc <tcp_receive+0x894>)
 8008d26:	4836      	ldr	r0, [pc, #216]	@ (8008e00 <tcp_receive+0x898>)
 8008d28:	f006 f884 	bl	800ee34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 80e6 	beq.w	8008f02 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d36:	4b2e      	ldr	r3, [pc, #184]	@ (8008df0 <tcp_receive+0x888>)
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	899b      	ldrh	r3, [r3, #12]
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fa fd8c 	bl	800385c <lwip_htons>
 8008d44:	4603      	mov	r3, r0
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d010      	beq.n	8008d72 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008d50:	e00a      	b.n	8008d68 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d56:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7fd fca7 	bl	80066b6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1f0      	bne.n	8008d52 <tcp_receive+0x7ea>
 8008d70:	e0c7      	b.n	8008f02 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008d78:	e051      	b.n	8008e1e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	899b      	ldrh	r3, [r3, #12]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fa fd6a 	bl	800385c <lwip_htons>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d03c      	beq.n	8008e0e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008d94:	4b16      	ldr	r3, [pc, #88]	@ (8008df0 <tcp_receive+0x888>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	899b      	ldrh	r3, [r3, #12]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fa fd5d 	bl	800385c <lwip_htons>
 8008da2:	4603      	mov	r3, r0
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d12f      	bne.n	8008e0e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008dae:	4b10      	ldr	r3, [pc, #64]	@ (8008df0 <tcp_receive+0x888>)
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	899b      	ldrh	r3, [r3, #12]
 8008db4:	b29c      	uxth	r4, r3
 8008db6:	2001      	movs	r0, #1
 8008db8:	f7fa fd50 	bl	800385c <lwip_htons>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8008df0 <tcp_receive+0x888>)
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	4322      	orrs	r2, r4
 8008dc6:	b292      	uxth	r2, r2
 8008dc8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008dca:	4b09      	ldr	r3, [pc, #36]	@ (8008df0 <tcp_receive+0x888>)
 8008dcc:	891c      	ldrh	r4, [r3, #8]
 8008dce:	4b08      	ldr	r3, [pc, #32]	@ (8008df0 <tcp_receive+0x888>)
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	899b      	ldrh	r3, [r3, #12]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fa fd40 	bl	800385c <lwip_htons>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f003 0303 	and.w	r3, r3, #3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00d      	beq.n	8008e04 <tcp_receive+0x89c>
 8008de8:	2301      	movs	r3, #1
 8008dea:	e00c      	b.n	8008e06 <tcp_receive+0x89e>
 8008dec:	20003a78 	.word	0x20003a78
 8008df0:	20003a58 	.word	0x20003a58
 8008df4:	20003a82 	.word	0x20003a82
 8008df8:	0801109c 	.word	0x0801109c
 8008dfc:	08011444 	.word	0x08011444
 8008e00:	080110e8 	.word	0x080110e8
 8008e04:	2300      	movs	r3, #0
 8008e06:	4423      	add	r3, r4
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	4b98      	ldr	r3, [pc, #608]	@ (800906c <tcp_receive+0xb04>)
 8008e0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e10:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8008e18:	6938      	ldr	r0, [r7, #16]
 8008e1a:	f7fd fc4c 	bl	80066b6 <tcp_seg_free>
            while (next &&
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00e      	beq.n	8008e42 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008e24:	4b91      	ldr	r3, [pc, #580]	@ (800906c <tcp_receive+0xb04>)
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4b91      	ldr	r3, [pc, #580]	@ (8009070 <tcp_receive+0xb08>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	441a      	add	r2, r3
 8008e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e38:	8909      	ldrh	r1, [r1, #8]
 8008e3a:	440b      	add	r3, r1
 8008e3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da9b      	bge.n	8008d7a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d059      	beq.n	8008efc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008e48:	4b88      	ldr	r3, [pc, #544]	@ (800906c <tcp_receive+0xb04>)
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	4b88      	ldr	r3, [pc, #544]	@ (8009070 <tcp_receive+0xb08>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	441a      	add	r2, r3
 8008e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	dd4d      	ble.n	8008efc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	4b81      	ldr	r3, [pc, #516]	@ (8009070 <tcp_receive+0xb08>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	4b80      	ldr	r3, [pc, #512]	@ (8009074 <tcp_receive+0xb0c>)
 8008e74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e76:	4b7f      	ldr	r3, [pc, #508]	@ (8009074 <tcp_receive+0xb0c>)
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	899b      	ldrh	r3, [r3, #12]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fa fcec 	bl	800385c <lwip_htons>
 8008e84:	4603      	mov	r3, r0
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d005      	beq.n	8008e9c <tcp_receive+0x934>
                inseg.len -= 1;
 8008e90:	4b78      	ldr	r3, [pc, #480]	@ (8009074 <tcp_receive+0xb0c>)
 8008e92:	891b      	ldrh	r3, [r3, #8]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	4b76      	ldr	r3, [pc, #472]	@ (8009074 <tcp_receive+0xb0c>)
 8008e9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008e9c:	4b75      	ldr	r3, [pc, #468]	@ (8009074 <tcp_receive+0xb0c>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	4a74      	ldr	r2, [pc, #464]	@ (8009074 <tcp_receive+0xb0c>)
 8008ea2:	8912      	ldrh	r2, [r2, #8]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fb fe50 	bl	8004b4c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008eac:	4b71      	ldr	r3, [pc, #452]	@ (8009074 <tcp_receive+0xb0c>)
 8008eae:	891c      	ldrh	r4, [r3, #8]
 8008eb0:	4b70      	ldr	r3, [pc, #448]	@ (8009074 <tcp_receive+0xb0c>)
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	899b      	ldrh	r3, [r3, #12]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fa fccf 	bl	800385c <lwip_htons>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	f003 0303 	and.w	r3, r3, #3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <tcp_receive+0x966>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <tcp_receive+0x968>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4423      	add	r3, r4
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	4b65      	ldr	r3, [pc, #404]	@ (800906c <tcp_receive+0xb04>)
 8008ed6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008ed8:	4b64      	ldr	r3, [pc, #400]	@ (800906c <tcp_receive+0xb04>)
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	4b64      	ldr	r3, [pc, #400]	@ (8009070 <tcp_receive+0xb08>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	441a      	add	r2, r3
 8008ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d006      	beq.n	8008efc <tcp_receive+0x994>
 8008eee:	4b62      	ldr	r3, [pc, #392]	@ (8009078 <tcp_receive+0xb10>)
 8008ef0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8008ef4:	4961      	ldr	r1, [pc, #388]	@ (800907c <tcp_receive+0xb14>)
 8008ef6:	4862      	ldr	r0, [pc, #392]	@ (8009080 <tcp_receive+0xb18>)
 8008ef8:	f005 ff9c 	bl	800ee34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f00:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008f02:	4b5a      	ldr	r3, [pc, #360]	@ (800906c <tcp_receive+0xb04>)
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	4b59      	ldr	r3, [pc, #356]	@ (8009070 <tcp_receive+0xb08>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	441a      	add	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008f16:	4b55      	ldr	r3, [pc, #340]	@ (800906c <tcp_receive+0xb04>)
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d206      	bcs.n	8008f2c <tcp_receive+0x9c4>
 8008f1e:	4b56      	ldr	r3, [pc, #344]	@ (8009078 <tcp_receive+0xb10>)
 8008f20:	f240 6207 	movw	r2, #1543	@ 0x607
 8008f24:	4957      	ldr	r1, [pc, #348]	@ (8009084 <tcp_receive+0xb1c>)
 8008f26:	4856      	ldr	r0, [pc, #344]	@ (8009080 <tcp_receive+0xb18>)
 8008f28:	f005 ff84 	bl	800ee34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008f30:	4b4e      	ldr	r3, [pc, #312]	@ (800906c <tcp_receive+0xb04>)
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7fc fe93 	bl	8005c68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008f42:	4b4c      	ldr	r3, [pc, #304]	@ (8009074 <tcp_receive+0xb0c>)
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	891b      	ldrh	r3, [r3, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d006      	beq.n	8008f5a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008f4c:	4b49      	ldr	r3, [pc, #292]	@ (8009074 <tcp_receive+0xb0c>)
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	4a4d      	ldr	r2, [pc, #308]	@ (8009088 <tcp_receive+0xb20>)
 8008f52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008f54:	4b47      	ldr	r3, [pc, #284]	@ (8009074 <tcp_receive+0xb0c>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f5a:	4b46      	ldr	r3, [pc, #280]	@ (8009074 <tcp_receive+0xb0c>)
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	899b      	ldrh	r3, [r3, #12]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fa fc7a 	bl	800385c <lwip_htons>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 80b8 	beq.w	80090e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008f76:	4b45      	ldr	r3, [pc, #276]	@ (800908c <tcp_receive+0xb24>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	f043 0320 	orr.w	r3, r3, #32
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	4b42      	ldr	r3, [pc, #264]	@ (800908c <tcp_receive+0xb24>)
 8008f82:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008f84:	e0af      	b.n	80090e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f8a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	4a36      	ldr	r2, [pc, #216]	@ (8009070 <tcp_receive+0xb08>)
 8008f96:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	891b      	ldrh	r3, [r3, #8]
 8008f9c:	461c      	mov	r4, r3
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	899b      	ldrh	r3, [r3, #12]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fa fc58 	bl	800385c <lwip_htons>
 8008fac:	4603      	mov	r3, r0
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	f003 0303 	and.w	r3, r3, #3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <tcp_receive+0xa54>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e000      	b.n	8008fbe <tcp_receive+0xa56>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	191a      	adds	r2, r3, r4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc4:	441a      	add	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fce:	461c      	mov	r4, r3
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	891b      	ldrh	r3, [r3, #8]
 8008fd4:	461d      	mov	r5, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	899b      	ldrh	r3, [r3, #12]
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fa fc3c 	bl	800385c <lwip_htons>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f003 0303 	and.w	r3, r3, #3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d001      	beq.n	8008ff4 <tcp_receive+0xa8c>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e000      	b.n	8008ff6 <tcp_receive+0xa8e>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	442b      	add	r3, r5
 8008ff8:	429c      	cmp	r4, r3
 8008ffa:	d206      	bcs.n	800900a <tcp_receive+0xaa2>
 8008ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8009078 <tcp_receive+0xb10>)
 8008ffe:	f240 622b 	movw	r2, #1579	@ 0x62b
 8009002:	4923      	ldr	r1, [pc, #140]	@ (8009090 <tcp_receive+0xb28>)
 8009004:	481e      	ldr	r0, [pc, #120]	@ (8009080 <tcp_receive+0xb18>)
 8009006:	f005 ff15 	bl	800ee34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	891b      	ldrh	r3, [r3, #8]
 800900e:	461c      	mov	r4, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	899b      	ldrh	r3, [r3, #12]
 8009016:	b29b      	uxth	r3, r3
 8009018:	4618      	mov	r0, r3
 800901a:	f7fa fc1f 	bl	800385c <lwip_htons>
 800901e:	4603      	mov	r3, r0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <tcp_receive+0xac6>
 800902a:	2301      	movs	r3, #1
 800902c:	e000      	b.n	8009030 <tcp_receive+0xac8>
 800902e:	2300      	movs	r3, #0
 8009030:	1919      	adds	r1, r3, r4
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009036:	b28b      	uxth	r3, r1
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7fc fe11 	bl	8005c68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	891b      	ldrh	r3, [r3, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d028      	beq.n	80090a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009050:	4b0d      	ldr	r3, [pc, #52]	@ (8009088 <tcp_receive+0xb20>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01d      	beq.n	8009094 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009058:	4b0b      	ldr	r3, [pc, #44]	@ (8009088 <tcp_receive+0xb20>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	4619      	mov	r1, r3
 8009062:	4610      	mov	r0, r2
 8009064:	f7fb ffba 	bl	8004fdc <pbuf_cat>
 8009068:	e018      	b.n	800909c <tcp_receive+0xb34>
 800906a:	bf00      	nop
 800906c:	20003a82 	.word	0x20003a82
 8009070:	20003a78 	.word	0x20003a78
 8009074:	20003a58 	.word	0x20003a58
 8009078:	0801109c 	.word	0x0801109c
 800907c:	0801147c 	.word	0x0801147c
 8009080:	080110e8 	.word	0x080110e8
 8009084:	080114b8 	.word	0x080114b8
 8009088:	20003a88 	.word	0x20003a88
 800908c:	20003a85 	.word	0x20003a85
 8009090:	080114d8 	.word	0x080114d8
            } else {
              recv_data = cseg->p;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	4a70      	ldr	r2, [pc, #448]	@ (800925c <tcp_receive+0xcf4>)
 800909a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2200      	movs	r2, #0
 80090a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	899b      	ldrh	r3, [r3, #12]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fa fbd6 	bl	800385c <lwip_htons>
 80090b0:	4603      	mov	r3, r0
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00d      	beq.n	80090d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80090bc:	4b68      	ldr	r3, [pc, #416]	@ (8009260 <tcp_receive+0xcf8>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	f043 0320 	orr.w	r3, r3, #32
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	4b66      	ldr	r3, [pc, #408]	@ (8009260 <tcp_receive+0xcf8>)
 80090c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	7d1b      	ldrb	r3, [r3, #20]
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d102      	bne.n	80090d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2207      	movs	r2, #7
 80090d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80090e0:	68b8      	ldr	r0, [r7, #8]
 80090e2:	f7fd fae8 	bl	80066b6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d008      	beq.n	8009100 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80090fa:	429a      	cmp	r2, r3
 80090fc:	f43f af43 	beq.w	8008f86 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	8b5b      	ldrh	r3, [r3, #26]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00e      	beq.n	800912a <tcp_receive+0xbc2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	8b5b      	ldrh	r3, [r3, #26]
 8009110:	f023 0301 	bic.w	r3, r3, #1
 8009114:	b29a      	uxth	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	835a      	strh	r2, [r3, #26]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	8b5b      	ldrh	r3, [r3, #26]
 800911e:	f043 0302 	orr.w	r3, r3, #2
 8009122:	b29a      	uxth	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009128:	e187      	b.n	800943a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	8b5b      	ldrh	r3, [r3, #26]
 800912e:	f043 0301 	orr.w	r3, r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009138:	e17f      	b.n	800943a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009142:	4848      	ldr	r0, [pc, #288]	@ (8009264 <tcp_receive+0xcfc>)
 8009144:	f7fd faee 	bl	8006724 <tcp_seg_copy>
 8009148:	4602      	mov	r2, r0
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	675a      	str	r2, [r3, #116]	@ 0x74
 800914e:	e16c      	b.n	800942a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009150:	2300      	movs	r3, #0
 8009152:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009158:	63bb      	str	r3, [r7, #56]	@ 0x38
 800915a:	e156      	b.n	800940a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800915c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	4b41      	ldr	r3, [pc, #260]	@ (8009268 <tcp_receive+0xd00>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d11d      	bne.n	80091a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800916a:	4b3e      	ldr	r3, [pc, #248]	@ (8009264 <tcp_receive+0xcfc>)
 800916c:	891a      	ldrh	r2, [r3, #8]
 800916e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009170:	891b      	ldrh	r3, [r3, #8]
 8009172:	429a      	cmp	r2, r3
 8009174:	f240 814e 	bls.w	8009414 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009178:	483a      	ldr	r0, [pc, #232]	@ (8009264 <tcp_receive+0xcfc>)
 800917a:	f7fd fad3 	bl	8006724 <tcp_seg_copy>
 800917e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 8148 	beq.w	8009418 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8009188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800918e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	e002      	b.n	800919c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800919c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800919e:	6978      	ldr	r0, [r7, #20]
 80091a0:	f7ff f8de 	bl	8008360 <tcp_oos_insert_segment>
                }
                break;
 80091a4:	e138      	b.n	8009418 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80091a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d117      	bne.n	80091dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80091ac:	4b2e      	ldr	r3, [pc, #184]	@ (8009268 <tcp_receive+0xd00>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	da57      	bge.n	800926c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80091bc:	4829      	ldr	r0, [pc, #164]	@ (8009264 <tcp_receive+0xcfc>)
 80091be:	f7fd fab1 	bl	8006724 <tcp_seg_copy>
 80091c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 8128 	beq.w	800941c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80091d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091d4:	69b8      	ldr	r0, [r7, #24]
 80091d6:	f7ff f8c3 	bl	8008360 <tcp_oos_insert_segment>
                  }
                  break;
 80091da:	e11f      	b.n	800941c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80091dc:	4b22      	ldr	r3, [pc, #136]	@ (8009268 <tcp_receive+0xd00>)
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	3b01      	subs	r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	db3e      	blt.n	800926c <tcp_receive+0xd04>
 80091ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009268 <tcp_receive+0xd00>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	3301      	adds	r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dc35      	bgt.n	800926c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009200:	4818      	ldr	r0, [pc, #96]	@ (8009264 <tcp_receive+0xcfc>)
 8009202:	f7fd fa8f 	bl	8006724 <tcp_seg_copy>
 8009206:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 8108 	beq.w	8009420 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009218:	8912      	ldrh	r2, [r2, #8]
 800921a:	441a      	add	r2, r3
 800921c:	4b12      	ldr	r3, [pc, #72]	@ (8009268 <tcp_receive+0xd00>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	dd12      	ble.n	800924c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009226:	4b10      	ldr	r3, [pc, #64]	@ (8009268 <tcp_receive+0xd00>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	b29a      	uxth	r2, r3
 800922c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	b29b      	uxth	r3, r3
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	b29a      	uxth	r2, r3
 8009238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800923c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009242:	891b      	ldrh	r3, [r3, #8]
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f7fb fc80 	bl	8004b4c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800924c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009252:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009254:	69f8      	ldr	r0, [r7, #28]
 8009256:	f7ff f883 	bl	8008360 <tcp_oos_insert_segment>
                  }
                  break;
 800925a:	e0e1      	b.n	8009420 <tcp_receive+0xeb8>
 800925c:	20003a88 	.word	0x20003a88
 8009260:	20003a85 	.word	0x20003a85
 8009264:	20003a58 	.word	0x20003a58
 8009268:	20003a78 	.word	0x20003a78
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800926c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	f040 80c5 	bne.w	8009404 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800927a:	4b7f      	ldr	r3, [pc, #508]	@ (8009478 <tcp_receive+0xf10>)
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009286:	2b00      	cmp	r3, #0
 8009288:	f340 80bc 	ble.w	8009404 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800928c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	899b      	ldrh	r3, [r3, #12]
 8009292:	b29b      	uxth	r3, r3
 8009294:	4618      	mov	r0, r3
 8009296:	f7fa fae1 	bl	800385c <lwip_htons>
 800929a:	4603      	mov	r3, r0
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f040 80be 	bne.w	8009424 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80092a8:	4874      	ldr	r0, [pc, #464]	@ (800947c <tcp_receive+0xf14>)
 80092aa:	f7fd fa3b 	bl	8006724 <tcp_seg_copy>
 80092ae:	4602      	mov	r2, r0
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80092b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 80b5 	beq.w	8009428 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80092be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092c6:	8912      	ldrh	r2, [r2, #8]
 80092c8:	441a      	add	r2, r3
 80092ca:	4b6b      	ldr	r3, [pc, #428]	@ (8009478 <tcp_receive+0xf10>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dd12      	ble.n	80092fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80092d4:	4b68      	ldr	r3, [pc, #416]	@ (8009478 <tcp_receive+0xf10>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	b29a      	uxth	r2, r3
 80092da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80092ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f0:	891b      	ldrh	r3, [r3, #8]
 80092f2:	4619      	mov	r1, r3
 80092f4:	4610      	mov	r0, r2
 80092f6:	f7fb fc29 	bl	8004b4c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80092fa:	4b61      	ldr	r3, [pc, #388]	@ (8009480 <tcp_receive+0xf18>)
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	461a      	mov	r2, r3
 8009300:	4b5d      	ldr	r3, [pc, #372]	@ (8009478 <tcp_receive+0xf10>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	441a      	add	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800930e:	440b      	add	r3, r1
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	f340 8088 	ble.w	8009428 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	899b      	ldrh	r3, [r3, #12]
 8009320:	b29b      	uxth	r3, r3
 8009322:	4618      	mov	r0, r3
 8009324:	f7fa fa9a 	bl	800385c <lwip_htons>
 8009328:	4603      	mov	r3, r0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	d021      	beq.n	8009378 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	899b      	ldrh	r3, [r3, #12]
 800933c:	b29b      	uxth	r3, r3
 800933e:	b21b      	sxth	r3, r3
 8009340:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009344:	b21c      	sxth	r4, r3
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	899b      	ldrh	r3, [r3, #12]
 800934e:	b29b      	uxth	r3, r3
 8009350:	4618      	mov	r0, r3
 8009352:	f7fa fa83 	bl	800385c <lwip_htons>
 8009356:	4603      	mov	r3, r0
 8009358:	b2db      	uxtb	r3, r3
 800935a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800935e:	b29b      	uxth	r3, r3
 8009360:	4618      	mov	r0, r3
 8009362:	f7fa fa7b 	bl	800385c <lwip_htons>
 8009366:	4603      	mov	r3, r0
 8009368:	b21b      	sxth	r3, r3
 800936a:	4323      	orrs	r3, r4
 800936c:	b21a      	sxth	r2, r3
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	b292      	uxth	r2, r2
 8009376:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937c:	b29a      	uxth	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009382:	4413      	add	r3, r2
 8009384:	b299      	uxth	r1, r3
 8009386:	4b3c      	ldr	r3, [pc, #240]	@ (8009478 <tcp_receive+0xf10>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	b29a      	uxth	r2, r3
 800938c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	1a8a      	subs	r2, r1, r2
 8009392:	b292      	uxth	r2, r2
 8009394:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	891b      	ldrh	r3, [r3, #8]
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f7fb fbd1 	bl	8004b4c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80093aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	891c      	ldrh	r4, [r3, #8]
 80093b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	899b      	ldrh	r3, [r3, #12]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fa fa4e 	bl	800385c <lwip_htons>
 80093c0:	4603      	mov	r3, r0
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	f003 0303 	and.w	r3, r3, #3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <tcp_receive+0xe68>
 80093cc:	2301      	movs	r3, #1
 80093ce:	e000      	b.n	80093d2 <tcp_receive+0xe6a>
 80093d0:	2300      	movs	r3, #0
 80093d2:	4423      	add	r3, r4
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009480 <tcp_receive+0xf18>)
 80093d8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80093da:	4b29      	ldr	r3, [pc, #164]	@ (8009480 <tcp_receive+0xf18>)
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	4b25      	ldr	r3, [pc, #148]	@ (8009478 <tcp_receive+0xf10>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	441a      	add	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80093ee:	440b      	add	r3, r1
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d019      	beq.n	8009428 <tcp_receive+0xec0>
 80093f4:	4b23      	ldr	r3, [pc, #140]	@ (8009484 <tcp_receive+0xf1c>)
 80093f6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80093fa:	4923      	ldr	r1, [pc, #140]	@ (8009488 <tcp_receive+0xf20>)
 80093fc:	4823      	ldr	r0, [pc, #140]	@ (800948c <tcp_receive+0xf24>)
 80093fe:	f005 fd19 	bl	800ee34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009402:	e011      	b.n	8009428 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	63bb      	str	r3, [r7, #56]	@ 0x38
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	2b00      	cmp	r3, #0
 800940e:	f47f aea5 	bne.w	800915c <tcp_receive+0xbf4>
 8009412:	e00a      	b.n	800942a <tcp_receive+0xec2>
                break;
 8009414:	bf00      	nop
 8009416:	e008      	b.n	800942a <tcp_receive+0xec2>
                break;
 8009418:	bf00      	nop
 800941a:	e006      	b.n	800942a <tcp_receive+0xec2>
                  break;
 800941c:	bf00      	nop
 800941e:	e004      	b.n	800942a <tcp_receive+0xec2>
                  break;
 8009420:	bf00      	nop
 8009422:	e002      	b.n	800942a <tcp_receive+0xec2>
                  break;
 8009424:	bf00      	nop
 8009426:	e000      	b.n	800942a <tcp_receive+0xec2>
                break;
 8009428:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 fe88 	bl	800b140 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009430:	e003      	b.n	800943a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 fe84 	bl	800b140 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009438:	e01a      	b.n	8009470 <tcp_receive+0xf08>
 800943a:	e019      	b.n	8009470 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800943c:	4b0e      	ldr	r3, [pc, #56]	@ (8009478 <tcp_receive+0xf10>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	db0a      	blt.n	8009460 <tcp_receive+0xef8>
 800944a:	4b0b      	ldr	r3, [pc, #44]	@ (8009478 <tcp_receive+0xf10>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009456:	440b      	add	r3, r1
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	3301      	adds	r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	dd07      	ble.n	8009470 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	8b5b      	ldrh	r3, [r3, #26]
 8009464:	f043 0302 	orr.w	r3, r3, #2
 8009468:	b29a      	uxth	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800946e:	e7ff      	b.n	8009470 <tcp_receive+0xf08>
 8009470:	bf00      	nop
 8009472:	3750      	adds	r7, #80	@ 0x50
 8009474:	46bd      	mov	sp, r7
 8009476:	bdb0      	pop	{r4, r5, r7, pc}
 8009478:	20003a78 	.word	0x20003a78
 800947c:	20003a58 	.word	0x20003a58
 8009480:	20003a82 	.word	0x20003a82
 8009484:	0801109c 	.word	0x0801109c
 8009488:	08011444 	.word	0x08011444
 800948c:	080110e8 	.word	0x080110e8

08009490 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009496:	4b15      	ldr	r3, [pc, #84]	@ (80094ec <tcp_get_next_optbyte+0x5c>)
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	b291      	uxth	r1, r2
 800949e:	4a13      	ldr	r2, [pc, #76]	@ (80094ec <tcp_get_next_optbyte+0x5c>)
 80094a0:	8011      	strh	r1, [r2, #0]
 80094a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80094a4:	4b12      	ldr	r3, [pc, #72]	@ (80094f0 <tcp_get_next_optbyte+0x60>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d004      	beq.n	80094b6 <tcp_get_next_optbyte+0x26>
 80094ac:	4b11      	ldr	r3, [pc, #68]	@ (80094f4 <tcp_get_next_optbyte+0x64>)
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	88fa      	ldrh	r2, [r7, #6]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d208      	bcs.n	80094c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80094b6:	4b10      	ldr	r3, [pc, #64]	@ (80094f8 <tcp_get_next_optbyte+0x68>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3314      	adds	r3, #20
 80094bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80094be:	88fb      	ldrh	r3, [r7, #6]
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	4413      	add	r3, r2
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	e00b      	b.n	80094e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80094c8:	88fb      	ldrh	r3, [r7, #6]
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	4b09      	ldr	r3, [pc, #36]	@ (80094f4 <tcp_get_next_optbyte+0x64>)
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80094d6:	4b06      	ldr	r3, [pc, #24]	@ (80094f0 <tcp_get_next_optbyte+0x60>)
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	797b      	ldrb	r3, [r7, #5]
 80094dc:	4413      	add	r3, r2
 80094de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	20003a74 	.word	0x20003a74
 80094f0:	20003a70 	.word	0x20003a70
 80094f4:	20003a6e 	.word	0x20003a6e
 80094f8:	20003a68 	.word	0x20003a68

080094fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d106      	bne.n	8009518 <tcp_parseopt+0x1c>
 800950a:	4b32      	ldr	r3, [pc, #200]	@ (80095d4 <tcp_parseopt+0xd8>)
 800950c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8009510:	4931      	ldr	r1, [pc, #196]	@ (80095d8 <tcp_parseopt+0xdc>)
 8009512:	4832      	ldr	r0, [pc, #200]	@ (80095dc <tcp_parseopt+0xe0>)
 8009514:	f005 fc8e 	bl	800ee34 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009518:	4b31      	ldr	r3, [pc, #196]	@ (80095e0 <tcp_parseopt+0xe4>)
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d056      	beq.n	80095ce <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009520:	4b30      	ldr	r3, [pc, #192]	@ (80095e4 <tcp_parseopt+0xe8>)
 8009522:	2200      	movs	r2, #0
 8009524:	801a      	strh	r2, [r3, #0]
 8009526:	e046      	b.n	80095b6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8009528:	f7ff ffb2 	bl	8009490 <tcp_get_next_optbyte>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b02      	cmp	r3, #2
 8009534:	d006      	beq.n	8009544 <tcp_parseopt+0x48>
 8009536:	2b02      	cmp	r3, #2
 8009538:	dc2a      	bgt.n	8009590 <tcp_parseopt+0x94>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d042      	beq.n	80095c4 <tcp_parseopt+0xc8>
 800953e:	2b01      	cmp	r3, #1
 8009540:	d038      	beq.n	80095b4 <tcp_parseopt+0xb8>
 8009542:	e025      	b.n	8009590 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009544:	f7ff ffa4 	bl	8009490 <tcp_get_next_optbyte>
 8009548:	4603      	mov	r3, r0
 800954a:	2b04      	cmp	r3, #4
 800954c:	d13c      	bne.n	80095c8 <tcp_parseopt+0xcc>
 800954e:	4b25      	ldr	r3, [pc, #148]	@ (80095e4 <tcp_parseopt+0xe8>)
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	4a22      	ldr	r2, [pc, #136]	@ (80095e0 <tcp_parseopt+0xe4>)
 8009556:	8812      	ldrh	r2, [r2, #0]
 8009558:	4293      	cmp	r3, r2
 800955a:	da35      	bge.n	80095c8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800955c:	f7ff ff98 	bl	8009490 <tcp_get_next_optbyte>
 8009560:	4603      	mov	r3, r0
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009566:	f7ff ff93 	bl	8009490 <tcp_get_next_optbyte>
 800956a:	4603      	mov	r3, r0
 800956c:	461a      	mov	r2, r3
 800956e:	89bb      	ldrh	r3, [r7, #12]
 8009570:	4313      	orrs	r3, r2
 8009572:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009574:	89bb      	ldrh	r3, [r7, #12]
 8009576:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800957a:	d804      	bhi.n	8009586 <tcp_parseopt+0x8a>
 800957c:	89bb      	ldrh	r3, [r7, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <tcp_parseopt+0x8a>
 8009582:	89ba      	ldrh	r2, [r7, #12]
 8009584:	e001      	b.n	800958a <tcp_parseopt+0x8e>
 8009586:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800958e:	e012      	b.n	80095b6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009590:	f7ff ff7e 	bl	8009490 <tcp_get_next_optbyte>
 8009594:	4603      	mov	r3, r0
 8009596:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009598:	7afb      	ldrb	r3, [r7, #11]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d916      	bls.n	80095cc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800959e:	7afb      	ldrb	r3, [r7, #11]
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	4b10      	ldr	r3, [pc, #64]	@ (80095e4 <tcp_parseopt+0xe8>)
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	4413      	add	r3, r2
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	3b02      	subs	r3, #2
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	4b0d      	ldr	r3, [pc, #52]	@ (80095e4 <tcp_parseopt+0xe8>)
 80095b0:	801a      	strh	r2, [r3, #0]
 80095b2:	e000      	b.n	80095b6 <tcp_parseopt+0xba>
          break;
 80095b4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80095b6:	4b0b      	ldr	r3, [pc, #44]	@ (80095e4 <tcp_parseopt+0xe8>)
 80095b8:	881a      	ldrh	r2, [r3, #0]
 80095ba:	4b09      	ldr	r3, [pc, #36]	@ (80095e0 <tcp_parseopt+0xe4>)
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d3b2      	bcc.n	8009528 <tcp_parseopt+0x2c>
 80095c2:	e004      	b.n	80095ce <tcp_parseopt+0xd2>
          return;
 80095c4:	bf00      	nop
 80095c6:	e002      	b.n	80095ce <tcp_parseopt+0xd2>
            return;
 80095c8:	bf00      	nop
 80095ca:	e000      	b.n	80095ce <tcp_parseopt+0xd2>
            return;
 80095cc:	bf00      	nop
      }
    }
  }
}
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	0801109c 	.word	0x0801109c
 80095d8:	08011500 	.word	0x08011500
 80095dc:	080110e8 	.word	0x080110e8
 80095e0:	20003a6c 	.word	0x20003a6c
 80095e4:	20003a74 	.word	0x20003a74

080095e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80095ec:	4b05      	ldr	r3, [pc, #20]	@ (8009604 <tcp_trigger_input_pcb_close+0x1c>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f043 0310 	orr.w	r3, r3, #16
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	4b03      	ldr	r3, [pc, #12]	@ (8009604 <tcp_trigger_input_pcb_close+0x1c>)
 80095f8:	701a      	strb	r2, [r3, #0]
}
 80095fa:	bf00      	nop
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	20003a85 	.word	0x20003a85

08009608 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00a      	beq.n	8009630 <tcp_route+0x28>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	7a1b      	ldrb	r3, [r3, #8]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d006      	beq.n	8009630 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	7a1b      	ldrb	r3, [r3, #8]
 8009626:	4618      	mov	r0, r3
 8009628:	f7fb f8b6 	bl	8004798 <netif_get_by_index>
 800962c:	4603      	mov	r3, r0
 800962e:	e003      	b.n	8009638 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f003 faa3 	bl	800cb7c <ip4_route>
 8009636:	4603      	mov	r3, r0
  }
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009640:	b590      	push	{r4, r7, lr}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	4613      	mov	r3, r2
 800964e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d105      	bne.n	8009662 <tcp_create_segment+0x22>
 8009656:	4b43      	ldr	r3, [pc, #268]	@ (8009764 <tcp_create_segment+0x124>)
 8009658:	22a3      	movs	r2, #163	@ 0xa3
 800965a:	4943      	ldr	r1, [pc, #268]	@ (8009768 <tcp_create_segment+0x128>)
 800965c:	4843      	ldr	r0, [pc, #268]	@ (800976c <tcp_create_segment+0x12c>)
 800965e:	f005 fbe9 	bl	800ee34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d105      	bne.n	8009674 <tcp_create_segment+0x34>
 8009668:	4b3e      	ldr	r3, [pc, #248]	@ (8009764 <tcp_create_segment+0x124>)
 800966a:	22a4      	movs	r2, #164	@ 0xa4
 800966c:	4940      	ldr	r1, [pc, #256]	@ (8009770 <tcp_create_segment+0x130>)
 800966e:	483f      	ldr	r0, [pc, #252]	@ (800976c <tcp_create_segment+0x12c>)
 8009670:	f005 fbe0 	bl	800ee34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009674:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	b2db      	uxtb	r3, r3
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009682:	2003      	movs	r0, #3
 8009684:	f7fa fd98 	bl	80041b8 <memp_malloc>
 8009688:	6138      	str	r0, [r7, #16]
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d104      	bne.n	800969a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009690:	68b8      	ldr	r0, [r7, #8]
 8009692:	f7fb fbe1 	bl	8004e58 <pbuf_free>
    return NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	e060      	b.n	800975c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80096a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	891a      	ldrh	r2, [r3, #8]
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d205      	bcs.n	80096c6 <tcp_create_segment+0x86>
 80096ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009764 <tcp_create_segment+0x124>)
 80096bc:	22b0      	movs	r2, #176	@ 0xb0
 80096be:	492d      	ldr	r1, [pc, #180]	@ (8009774 <tcp_create_segment+0x134>)
 80096c0:	482a      	ldr	r0, [pc, #168]	@ (800976c <tcp_create_segment+0x12c>)
 80096c2:	f005 fbb7 	bl	800ee34 <iprintf>
  seg->len = p->tot_len - optlen;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	891a      	ldrh	r2, [r3, #8]
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80096d6:	2114      	movs	r1, #20
 80096d8:	68b8      	ldr	r0, [r7, #8]
 80096da:	f7fb fb27 	bl	8004d2c <pbuf_add_header>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d004      	beq.n	80096ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80096e4:	6938      	ldr	r0, [r7, #16]
 80096e6:	f7fc ffe6 	bl	80066b6 <tcp_seg_free>
    return NULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	e036      	b.n	800975c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	8ada      	ldrh	r2, [r3, #22]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	68dc      	ldr	r4, [r3, #12]
 8009700:	4610      	mov	r0, r2
 8009702:	f7fa f8ab 	bl	800385c <lwip_htons>
 8009706:	4603      	mov	r3, r0
 8009708:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	8b1a      	ldrh	r2, [r3, #24]
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	68dc      	ldr	r4, [r3, #12]
 8009712:	4610      	mov	r0, r2
 8009714:	f7fa f8a2 	bl	800385c <lwip_htons>
 8009718:	4603      	mov	r3, r0
 800971a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	68dc      	ldr	r4, [r3, #12]
 8009720:	6838      	ldr	r0, [r7, #0]
 8009722:	f7fa f8b0 	bl	8003886 <lwip_htonl>
 8009726:	4603      	mov	r3, r0
 8009728:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	089b      	lsrs	r3, r3, #2
 800972e:	b2db      	uxtb	r3, r3
 8009730:	3305      	adds	r3, #5
 8009732:	b29b      	uxth	r3, r3
 8009734:	031b      	lsls	r3, r3, #12
 8009736:	b29a      	uxth	r2, r3
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	b29b      	uxth	r3, r3
 800973c:	4313      	orrs	r3, r2
 800973e:	b29a      	uxth	r2, r3
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	68dc      	ldr	r4, [r3, #12]
 8009744:	4610      	mov	r0, r2
 8009746:	f7fa f889 	bl	800385c <lwip_htons>
 800974a:	4603      	mov	r3, r0
 800974c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	749a      	strb	r2, [r3, #18]
 8009756:	2200      	movs	r2, #0
 8009758:	74da      	strb	r2, [r3, #19]
  return seg;
 800975a:	693b      	ldr	r3, [r7, #16]
}
 800975c:	4618      	mov	r0, r3
 800975e:	371c      	adds	r7, #28
 8009760:	46bd      	mov	sp, r7
 8009762:	bd90      	pop	{r4, r7, pc}
 8009764:	0801151c 	.word	0x0801151c
 8009768:	08011550 	.word	0x08011550
 800976c:	08011570 	.word	0x08011570
 8009770:	08011598 	.word	0x08011598
 8009774:	080115bc 	.word	0x080115bc

08009778 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	607b      	str	r3, [r7, #4]
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]
 8009784:	460b      	mov	r3, r1
 8009786:	81bb      	strh	r3, [r7, #12]
 8009788:	4613      	mov	r3, r2
 800978a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800978c:	89bb      	ldrh	r3, [r7, #12]
 800978e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <tcp_pbuf_prealloc+0x2a>
 8009796:	4b30      	ldr	r3, [pc, #192]	@ (8009858 <tcp_pbuf_prealloc+0xe0>)
 8009798:	22e8      	movs	r2, #232	@ 0xe8
 800979a:	4930      	ldr	r1, [pc, #192]	@ (800985c <tcp_pbuf_prealloc+0xe4>)
 800979c:	4830      	ldr	r0, [pc, #192]	@ (8009860 <tcp_pbuf_prealloc+0xe8>)
 800979e:	f005 fb49 	bl	800ee34 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d105      	bne.n	80097b4 <tcp_pbuf_prealloc+0x3c>
 80097a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009858 <tcp_pbuf_prealloc+0xe0>)
 80097aa:	22e9      	movs	r2, #233	@ 0xe9
 80097ac:	492d      	ldr	r1, [pc, #180]	@ (8009864 <tcp_pbuf_prealloc+0xec>)
 80097ae:	482c      	ldr	r0, [pc, #176]	@ (8009860 <tcp_pbuf_prealloc+0xe8>)
 80097b0:	f005 fb40 	bl	800ee34 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80097b4:	89ba      	ldrh	r2, [r7, #12]
 80097b6:	897b      	ldrh	r3, [r7, #10]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d221      	bcs.n	8009800 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80097bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d111      	bne.n	80097ec <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	8b5b      	ldrh	r3, [r3, #26]
 80097cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d115      	bne.n	8009800 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80097d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d007      	beq.n	80097ec <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d103      	bne.n	80097ec <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d009      	beq.n	8009800 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80097ec:	89bb      	ldrh	r3, [r7, #12]
 80097ee:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80097f2:	f023 0203 	bic.w	r2, r3, #3
 80097f6:	897b      	ldrh	r3, [r7, #10]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	bf28      	it	cs
 80097fc:	4613      	movcs	r3, r2
 80097fe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009800:	8af9      	ldrh	r1, [r7, #22]
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009808:	4618      	mov	r0, r3
 800980a:	f7fb f841 	bl	8004890 <pbuf_alloc>
 800980e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	e019      	b.n	800984e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d006      	beq.n	8009830 <tcp_pbuf_prealloc+0xb8>
 8009822:	4b0d      	ldr	r3, [pc, #52]	@ (8009858 <tcp_pbuf_prealloc+0xe0>)
 8009824:	f240 120b 	movw	r2, #267	@ 0x10b
 8009828:	490f      	ldr	r1, [pc, #60]	@ (8009868 <tcp_pbuf_prealloc+0xf0>)
 800982a:	480d      	ldr	r0, [pc, #52]	@ (8009860 <tcp_pbuf_prealloc+0xe8>)
 800982c:	f005 fb02 	bl	800ee34 <iprintf>
  *oversize = p->len - length;
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	895a      	ldrh	r2, [r3, #10]
 8009834:	89bb      	ldrh	r3, [r7, #12]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	b29a      	uxth	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	89ba      	ldrh	r2, [r7, #12]
 8009842:	811a      	strh	r2, [r3, #8]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	891a      	ldrh	r2, [r3, #8]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	815a      	strh	r2, [r3, #10]
  return p;
 800984c:	693b      	ldr	r3, [r7, #16]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	0801151c 	.word	0x0801151c
 800985c:	080115d4 	.word	0x080115d4
 8009860:	08011570 	.word	0x08011570
 8009864:	080115f8 	.word	0x080115f8
 8009868:	08011618 	.word	0x08011618

0800986c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d106      	bne.n	800988c <tcp_write_checks+0x20>
 800987e:	4b33      	ldr	r3, [pc, #204]	@ (800994c <tcp_write_checks+0xe0>)
 8009880:	f240 1233 	movw	r2, #307	@ 0x133
 8009884:	4932      	ldr	r1, [pc, #200]	@ (8009950 <tcp_write_checks+0xe4>)
 8009886:	4833      	ldr	r0, [pc, #204]	@ (8009954 <tcp_write_checks+0xe8>)
 8009888:	f005 fad4 	bl	800ee34 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	7d1b      	ldrb	r3, [r3, #20]
 8009890:	2b04      	cmp	r3, #4
 8009892:	d00e      	beq.n	80098b2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009898:	2b07      	cmp	r3, #7
 800989a:	d00a      	beq.n	80098b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d006      	beq.n	80098b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d002      	beq.n	80098b2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80098ac:	f06f 030a 	mvn.w	r3, #10
 80098b0:	e048      	b.n	8009944 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80098b2:	887b      	ldrh	r3, [r7, #2]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <tcp_write_checks+0x50>
    return ERR_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	e043      	b.n	8009944 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80098c2:	887a      	ldrh	r2, [r7, #2]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d909      	bls.n	80098dc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	8b5b      	ldrh	r3, [r3, #26]
 80098cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	e033      	b.n	8009944 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80098e2:	2b08      	cmp	r3, #8
 80098e4:	d909      	bls.n	80098fa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	8b5b      	ldrh	r3, [r3, #26]
 80098ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80098f4:	f04f 33ff 	mov.w	r3, #4294967295
 80098f8:	e024      	b.n	8009944 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00f      	beq.n	8009924 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009908:	2b00      	cmp	r3, #0
 800990a:	d11a      	bne.n	8009942 <tcp_write_checks+0xd6>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009910:	2b00      	cmp	r3, #0
 8009912:	d116      	bne.n	8009942 <tcp_write_checks+0xd6>
 8009914:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <tcp_write_checks+0xe0>)
 8009916:	f240 1255 	movw	r2, #341	@ 0x155
 800991a:	490f      	ldr	r1, [pc, #60]	@ (8009958 <tcp_write_checks+0xec>)
 800991c:	480d      	ldr	r0, [pc, #52]	@ (8009954 <tcp_write_checks+0xe8>)
 800991e:	f005 fa89 	bl	800ee34 <iprintf>
 8009922:	e00e      	b.n	8009942 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009928:	2b00      	cmp	r3, #0
 800992a:	d103      	bne.n	8009934 <tcp_write_checks+0xc8>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <tcp_write_checks+0xd6>
 8009934:	4b05      	ldr	r3, [pc, #20]	@ (800994c <tcp_write_checks+0xe0>)
 8009936:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800993a:	4908      	ldr	r1, [pc, #32]	@ (800995c <tcp_write_checks+0xf0>)
 800993c:	4805      	ldr	r0, [pc, #20]	@ (8009954 <tcp_write_checks+0xe8>)
 800993e:	f005 fa79 	bl	800ee34 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	0801151c 	.word	0x0801151c
 8009950:	0801162c 	.word	0x0801162c
 8009954:	08011570 	.word	0x08011570
 8009958:	0801164c 	.word	0x0801164c
 800995c:	08011688 	.word	0x08011688

08009960 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009960:	b590      	push	{r4, r7, lr}
 8009962:	b09b      	sub	sp, #108	@ 0x6c
 8009964:	af04      	add	r7, sp, #16
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	4611      	mov	r1, r2
 800996c:	461a      	mov	r2, r3
 800996e:	460b      	mov	r3, r1
 8009970:	80fb      	strh	r3, [r7, #6]
 8009972:	4613      	mov	r3, r2
 8009974:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	653b      	str	r3, [r7, #80]	@ 0x50
 800997e:	2300      	movs	r3, #0
 8009980:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009982:	2300      	movs	r3, #0
 8009984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009986:	2300      	movs	r3, #0
 8009988:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800998a:	2300      	movs	r3, #0
 800998c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d109      	bne.n	80099bc <tcp_write+0x5c>
 80099a8:	4ba4      	ldr	r3, [pc, #656]	@ (8009c3c <tcp_write+0x2dc>)
 80099aa:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80099ae:	49a4      	ldr	r1, [pc, #656]	@ (8009c40 <tcp_write+0x2e0>)
 80099b0:	48a4      	ldr	r0, [pc, #656]	@ (8009c44 <tcp_write+0x2e4>)
 80099b2:	f005 fa3f 	bl	800ee34 <iprintf>
 80099b6:	f06f 030f 	mvn.w	r3, #15
 80099ba:	e32a      	b.n	800a012 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099c2:	085b      	lsrs	r3, r3, #1
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099ca:	4293      	cmp	r3, r2
 80099cc:	bf28      	it	cs
 80099ce:	4613      	movcs	r3, r2
 80099d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80099d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d102      	bne.n	80099de <tcp_write+0x7e>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099dc:	e000      	b.n	80099e0 <tcp_write+0x80>
 80099de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80099e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d109      	bne.n	80099fc <tcp_write+0x9c>
 80099e8:	4b94      	ldr	r3, [pc, #592]	@ (8009c3c <tcp_write+0x2dc>)
 80099ea:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80099ee:	4996      	ldr	r1, [pc, #600]	@ (8009c48 <tcp_write+0x2e8>)
 80099f0:	4894      	ldr	r0, [pc, #592]	@ (8009c44 <tcp_write+0x2e4>)
 80099f2:	f005 fa1f 	bl	800ee34 <iprintf>
 80099f6:	f06f 030f 	mvn.w	r3, #15
 80099fa:	e30a      	b.n	800a012 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80099fc:	88fb      	ldrh	r3, [r7, #6]
 80099fe:	4619      	mov	r1, r3
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f7ff ff33 	bl	800986c <tcp_write_checks>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8009a0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <tcp_write+0xba>
    return err;
 8009a14:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009a18:	e2fb      	b.n	800a012 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009a20:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 80f6 	beq.w	8009c20 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a3a:	e002      	b.n	8009a42 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8009a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1f8      	bne.n	8009a3c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8009a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a4c:	7a9b      	ldrb	r3, [r3, #10]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	f003 0304 	and.w	r3, r3, #4
 8009a56:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009a58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a5c:	891b      	ldrh	r3, [r3, #8]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	8c3b      	ldrh	r3, [r7, #32]
 8009a62:	440b      	add	r3, r1
 8009a64:	429a      	cmp	r2, r3
 8009a66:	da06      	bge.n	8009a76 <tcp_write+0x116>
 8009a68:	4b74      	ldr	r3, [pc, #464]	@ (8009c3c <tcp_write+0x2dc>)
 8009a6a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009a6e:	4977      	ldr	r1, [pc, #476]	@ (8009c4c <tcp_write+0x2ec>)
 8009a70:	4874      	ldr	r0, [pc, #464]	@ (8009c44 <tcp_write+0x2e4>)
 8009a72:	f005 f9df 	bl	800ee34 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a78:	891a      	ldrh	r2, [r3, #8]
 8009a7a:	8c3b      	ldrh	r3, [r7, #32]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a8c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009a8e:	8a7b      	ldrh	r3, [r7, #18]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d026      	beq.n	8009ae2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009a94:	8a7b      	ldrh	r3, [r7, #18]
 8009a96:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d206      	bcs.n	8009aaa <tcp_write+0x14a>
 8009a9c:	4b67      	ldr	r3, [pc, #412]	@ (8009c3c <tcp_write+0x2dc>)
 8009a9e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8009aa2:	496b      	ldr	r1, [pc, #428]	@ (8009c50 <tcp_write+0x2f0>)
 8009aa4:	4867      	ldr	r0, [pc, #412]	@ (8009c44 <tcp_write+0x2e4>)
 8009aa6:	f005 f9c5 	bl	800ee34 <iprintf>
      seg = last_unsent;
 8009aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009aae:	8a7b      	ldrh	r3, [r7, #18]
 8009ab0:	88fa      	ldrh	r2, [r7, #6]
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	bf28      	it	cs
 8009ab6:	4613      	movcs	r3, r2
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009abc:	4293      	cmp	r3, r2
 8009abe:	bf28      	it	cs
 8009ac0:	4613      	movcs	r3, r2
 8009ac2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8009ac4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009ac8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009aca:	4413      	add	r3, r2
 8009acc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8009ad0:	8a7a      	ldrh	r2, [r7, #18]
 8009ad2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8009ada:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009adc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009ae2:	8a7b      	ldrh	r3, [r7, #18]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <tcp_write+0x1a0>
 8009ae8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009aec:	88fb      	ldrh	r3, [r7, #6]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d006      	beq.n	8009b00 <tcp_write+0x1a0>
 8009af2:	4b52      	ldr	r3, [pc, #328]	@ (8009c3c <tcp_write+0x2dc>)
 8009af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009af8:	4956      	ldr	r1, [pc, #344]	@ (8009c54 <tcp_write+0x2f4>)
 8009afa:	4852      	ldr	r0, [pc, #328]	@ (8009c44 <tcp_write+0x2e4>)
 8009afc:	f005 f99a 	bl	800ee34 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009b00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009b04:	88fb      	ldrh	r3, [r7, #6]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	f080 8167 	bcs.w	8009dda <tcp_write+0x47a>
 8009b0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 8163 	beq.w	8009dda <tcp_write+0x47a>
 8009b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b16:	891b      	ldrh	r3, [r3, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 815e 	beq.w	8009dda <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009b1e:	88fa      	ldrh	r2, [r7, #6]
 8009b20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009b24:	1ad2      	subs	r2, r2, r3
 8009b26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	bfa8      	it	ge
 8009b2c:	4613      	movge	r3, r2
 8009b2e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8009b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b32:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009b34:	797b      	ldrb	r3, [r7, #5]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d027      	beq.n	8009b8e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009b3e:	f107 0012 	add.w	r0, r7, #18
 8009b42:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009b44:	8bf9      	ldrh	r1, [r7, #30]
 8009b46:	2301      	movs	r3, #1
 8009b48:	9302      	str	r3, [sp, #8]
 8009b4a:	797b      	ldrb	r3, [r7, #5]
 8009b4c:	9301      	str	r3, [sp, #4]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	4603      	mov	r3, r0
 8009b54:	2000      	movs	r0, #0
 8009b56:	f7ff fe0f 	bl	8009778 <tcp_pbuf_prealloc>
 8009b5a:	6578      	str	r0, [r7, #84]	@ 0x54
 8009b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 8225 	beq.w	8009fae <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b66:	6858      	ldr	r0, [r3, #4]
 8009b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	4413      	add	r3, r2
 8009b70:	8bfa      	ldrh	r2, [r7, #30]
 8009b72:	4619      	mov	r1, r3
 8009b74:	f005 fa57 	bl	800f026 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009b78:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009b7a:	f7fb f9f5 	bl	8004f68 <pbuf_clen>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	461a      	mov	r2, r3
 8009b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b86:	4413      	add	r3, r2
 8009b88:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009b8c:	e041      	b.n	8009c12 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b94:	e002      	b.n	8009b9c <tcp_write+0x23c>
 8009b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1f8      	bne.n	8009b96 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba6:	7b1b      	ldrb	r3, [r3, #12]
 8009ba8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d115      	bne.n	8009bdc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bb6:	8952      	ldrh	r2, [r2, #10]
 8009bb8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d10d      	bne.n	8009bdc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009bc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d006      	beq.n	8009bd6 <tcp_write+0x276>
 8009bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c3c <tcp_write+0x2dc>)
 8009bca:	f240 2231 	movw	r2, #561	@ 0x231
 8009bce:	4922      	ldr	r1, [pc, #136]	@ (8009c58 <tcp_write+0x2f8>)
 8009bd0:	481c      	ldr	r0, [pc, #112]	@ (8009c44 <tcp_write+0x2e4>)
 8009bd2:	f005 f92f 	bl	800ee34 <iprintf>
          extendlen = seglen;
 8009bd6:	8bfb      	ldrh	r3, [r7, #30]
 8009bd8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009bda:	e01a      	b.n	8009c12 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009bdc:	8bfb      	ldrh	r3, [r7, #30]
 8009bde:	2201      	movs	r2, #1
 8009be0:	4619      	mov	r1, r3
 8009be2:	2000      	movs	r0, #0
 8009be4:	f7fa fe54 	bl	8004890 <pbuf_alloc>
 8009be8:	6578      	str	r0, [r7, #84]	@ 0x54
 8009bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 81e0 	beq.w	8009fb2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8009bf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	441a      	add	r2, r3
 8009bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bfc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8009bfe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009c00:	f7fb f9b2 	bl	8004f68 <pbuf_clen>
 8009c04:	4603      	mov	r3, r0
 8009c06:	461a      	mov	r2, r3
 8009c08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8009c12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009c16:	8bfb      	ldrh	r3, [r7, #30]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009c1e:	e0dc      	b.n	8009dda <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 80d7 	beq.w	8009dda <tcp_write+0x47a>
 8009c2c:	4b03      	ldr	r3, [pc, #12]	@ (8009c3c <tcp_write+0x2dc>)
 8009c2e:	f240 224a 	movw	r2, #586	@ 0x24a
 8009c32:	490a      	ldr	r1, [pc, #40]	@ (8009c5c <tcp_write+0x2fc>)
 8009c34:	4803      	ldr	r0, [pc, #12]	@ (8009c44 <tcp_write+0x2e4>)
 8009c36:	f005 f8fd 	bl	800ee34 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8009c3a:	e0ce      	b.n	8009dda <tcp_write+0x47a>
 8009c3c:	0801151c 	.word	0x0801151c
 8009c40:	080116bc 	.word	0x080116bc
 8009c44:	08011570 	.word	0x08011570
 8009c48:	080116d4 	.word	0x080116d4
 8009c4c:	08011708 	.word	0x08011708
 8009c50:	08011720 	.word	0x08011720
 8009c54:	08011740 	.word	0x08011740
 8009c58:	08011760 	.word	0x08011760
 8009c5c:	0801178c 	.word	0x0801178c
    struct pbuf *p;
    u16_t left = len - pos;
 8009c60:	88fa      	ldrh	r2, [r7, #6]
 8009c62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8009c6a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8009c76:	8b7a      	ldrh	r2, [r7, #26]
 8009c78:	8bbb      	ldrh	r3, [r7, #28]
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	bf28      	it	cs
 8009c7e:	4613      	movcs	r3, r2
 8009c80:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009c82:	797b      	ldrb	r3, [r7, #5]
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d036      	beq.n	8009cfa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8009c8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	8b3b      	ldrh	r3, [r7, #24]
 8009c94:	4413      	add	r3, r2
 8009c96:	b299      	uxth	r1, r3
 8009c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	bf0c      	ite	eq
 8009c9e:	2301      	moveq	r3, #1
 8009ca0:	2300      	movne	r3, #0
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f107 0012 	add.w	r0, r7, #18
 8009ca8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009caa:	9302      	str	r3, [sp, #8]
 8009cac:	797b      	ldrb	r3, [r7, #5]
 8009cae:	9301      	str	r3, [sp, #4]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2036      	movs	r0, #54	@ 0x36
 8009cb8:	f7ff fd5e 	bl	8009778 <tcp_pbuf_prealloc>
 8009cbc:	6338      	str	r0, [r7, #48]	@ 0x30
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8178 	beq.w	8009fb6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	895b      	ldrh	r3, [r3, #10]
 8009cca:	8b3a      	ldrh	r2, [r7, #24]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d906      	bls.n	8009cde <tcp_write+0x37e>
 8009cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8009f04 <tcp_write+0x5a4>)
 8009cd2:	f240 2266 	movw	r2, #614	@ 0x266
 8009cd6:	498c      	ldr	r1, [pc, #560]	@ (8009f08 <tcp_write+0x5a8>)
 8009cd8:	488c      	ldr	r0, [pc, #560]	@ (8009f0c <tcp_write+0x5ac>)
 8009cda:	f005 f8ab 	bl	800ee34 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8009cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009ce6:	18d0      	adds	r0, r2, r3
 8009ce8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	4413      	add	r3, r2
 8009cf0:	8b3a      	ldrh	r2, [r7, #24]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	f005 f997 	bl	800f026 <memcpy>
 8009cf8:	e02f      	b.n	8009d5a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009cfa:	8a7b      	ldrh	r3, [r7, #18]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d006      	beq.n	8009d0e <tcp_write+0x3ae>
 8009d00:	4b80      	ldr	r3, [pc, #512]	@ (8009f04 <tcp_write+0x5a4>)
 8009d02:	f240 2271 	movw	r2, #625	@ 0x271
 8009d06:	4982      	ldr	r1, [pc, #520]	@ (8009f10 <tcp_write+0x5b0>)
 8009d08:	4880      	ldr	r0, [pc, #512]	@ (8009f0c <tcp_write+0x5ac>)
 8009d0a:	f005 f893 	bl	800ee34 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009d0e:	8b3b      	ldrh	r3, [r7, #24]
 8009d10:	2201      	movs	r2, #1
 8009d12:	4619      	mov	r1, r3
 8009d14:	2036      	movs	r0, #54	@ 0x36
 8009d16:	f7fa fdbb 	bl	8004890 <pbuf_alloc>
 8009d1a:	6178      	str	r0, [r7, #20]
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 814b 	beq.w	8009fba <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8009d24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	441a      	add	r2, r3
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009d30:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	2036      	movs	r0, #54	@ 0x36
 8009d3e:	f7fa fda7 	bl	8004890 <pbuf_alloc>
 8009d42:	6338      	str	r0, [r7, #48]	@ 0x30
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d103      	bne.n	8009d52 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8009d4a:	6978      	ldr	r0, [r7, #20]
 8009d4c:	f7fb f884 	bl	8004e58 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8009d50:	e136      	b.n	8009fc0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8009d52:	6979      	ldr	r1, [r7, #20]
 8009d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d56:	f7fb f941 	bl	8004fdc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8009d5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d5c:	f7fb f904 	bl	8004f68 <pbuf_clen>
 8009d60:	4603      	mov	r3, r0
 8009d62:	461a      	mov	r2, r3
 8009d64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009d68:	4413      	add	r3, r2
 8009d6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8009d6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009d72:	2b09      	cmp	r3, #9
 8009d74:	d903      	bls.n	8009d7e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8009d76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d78:	f7fb f86e 	bl	8004e58 <pbuf_free>
      goto memerr;
 8009d7c:	e120      	b.n	8009fc0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009d86:	441a      	add	r2, r3
 8009d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	2200      	movs	r2, #0
 8009d92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f7ff fc53 	bl	8009640 <tcp_create_segment>
 8009d9a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f000 810d 	beq.w	8009fbe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8009da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <tcp_write+0x450>
      queue = seg;
 8009daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dae:	e00c      	b.n	8009dca <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d106      	bne.n	8009dc4 <tcp_write+0x464>
 8009db6:	4b53      	ldr	r3, [pc, #332]	@ (8009f04 <tcp_write+0x5a4>)
 8009db8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8009dbc:	4955      	ldr	r1, [pc, #340]	@ (8009f14 <tcp_write+0x5b4>)
 8009dbe:	4853      	ldr	r0, [pc, #332]	@ (8009f0c <tcp_write+0x5ac>)
 8009dc0:	f005 f838 	bl	800ee34 <iprintf>
      prev_seg->next = seg;
 8009dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009dc8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8009dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dcc:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8009dce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009dd2:	8b3b      	ldrh	r3, [r7, #24]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8009dda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009dde:	88fb      	ldrh	r3, [r7, #6]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	f4ff af3d 	bcc.w	8009c60 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8009de6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d02c      	beq.n	8009e46 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8009dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009df2:	e01e      	b.n	8009e32 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8009df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df6:	891a      	ldrh	r2, [r3, #8]
 8009df8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009dfa:	4413      	add	r3, r2
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e00:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8009e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d110      	bne.n	8009e2c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e10:	8952      	ldrh	r2, [r2, #10]
 8009e12:	4413      	add	r3, r2
 8009e14:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f005 f904 	bl	800f026 <memcpy>
        p->len += oversize_used;
 8009e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e20:	895a      	ldrh	r2, [r3, #10]
 8009e22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009e24:	4413      	add	r3, r2
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8009e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1dd      	bne.n	8009df4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8009e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e3a:	891a      	ldrh	r2, [r3, #8]
 8009e3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009e3e:	4413      	add	r3, r2
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e44:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8009e46:	8a7a      	ldrh	r2, [r7, #18]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8009e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d018      	beq.n	8009e86 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <tcp_write+0x508>
 8009e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8009f04 <tcp_write+0x5a4>)
 8009e5c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8009e60:	492d      	ldr	r1, [pc, #180]	@ (8009f18 <tcp_write+0x5b8>)
 8009e62:	482a      	ldr	r0, [pc, #168]	@ (8009f0c <tcp_write+0x5ac>)
 8009e64:	f004 ffe6 	bl	800ee34 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8009e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fb f8b4 	bl	8004fdc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e76:	891a      	ldrh	r2, [r3, #8]
 8009e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e7a:	891b      	ldrh	r3, [r3, #8]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e82:	811a      	strh	r2, [r3, #8]
 8009e84:	e037      	b.n	8009ef6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8009e86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d034      	beq.n	8009ef6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8009e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <tcp_write+0x53a>
 8009e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d106      	bne.n	8009ea8 <tcp_write+0x548>
 8009e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8009f04 <tcp_write+0x5a4>)
 8009e9c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8009ea0:	491e      	ldr	r1, [pc, #120]	@ (8009f1c <tcp_write+0x5bc>)
 8009ea2:	481a      	ldr	r0, [pc, #104]	@ (8009f0c <tcp_write+0x5ac>)
 8009ea4:	f004 ffc6 	bl	800ee34 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009eae:	e009      	b.n	8009ec4 <tcp_write+0x564>
      p->tot_len += extendlen;
 8009eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb2:	891a      	ldrh	r2, [r3, #8]
 8009eb4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009eb6:	4413      	add	r3, r2
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1f1      	bne.n	8009eb0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8009ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ece:	891a      	ldrh	r2, [r3, #8]
 8009ed0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009ed2:	4413      	add	r3, r2
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8009eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009edc:	895a      	ldrh	r2, [r3, #10]
 8009ede:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009ee0:	4413      	add	r3, r2
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8009ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eea:	891a      	ldrh	r2, [r3, #8]
 8009eec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009eee:	4413      	add	r3, r2
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ef4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8009ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d111      	bne.n	8009f20 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f00:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009f02:	e010      	b.n	8009f26 <tcp_write+0x5c6>
 8009f04:	0801151c 	.word	0x0801151c
 8009f08:	080117bc 	.word	0x080117bc
 8009f0c:	08011570 	.word	0x08011570
 8009f10:	080117fc 	.word	0x080117fc
 8009f14:	0801180c 	.word	0x0801180c
 8009f18:	08011820 	.word	0x08011820
 8009f1c:	08011858 	.word	0x08011858
  } else {
    last_unsent->next = queue;
 8009f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f24:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f2a:	88fb      	ldrh	r3, [r7, #6]
 8009f2c:	441a      	add	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009f38:	88fb      	ldrh	r3, [r7, #6]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8009f4a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00e      	beq.n	8009f76 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10a      	bne.n	8009f76 <tcp_write+0x616>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <tcp_write+0x616>
 8009f68:	4b2c      	ldr	r3, [pc, #176]	@ (800a01c <tcp_write+0x6bc>)
 8009f6a:	f240 3212 	movw	r2, #786	@ 0x312
 8009f6e:	492c      	ldr	r1, [pc, #176]	@ (800a020 <tcp_write+0x6c0>)
 8009f70:	482c      	ldr	r0, [pc, #176]	@ (800a024 <tcp_write+0x6c4>)
 8009f72:	f004 ff5f 	bl	800ee34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8009f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d016      	beq.n	8009faa <tcp_write+0x64a>
 8009f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d012      	beq.n	8009faa <tcp_write+0x64a>
 8009f84:	797b      	ldrb	r3, [r7, #5]
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10d      	bne.n	8009faa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	899b      	ldrh	r3, [r3, #12]
 8009f94:	b29c      	uxth	r4, r3
 8009f96:	2008      	movs	r0, #8
 8009f98:	f7f9 fc60 	bl	800385c <lwip_htons>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	4322      	orrs	r2, r4
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	e031      	b.n	800a012 <tcp_write+0x6b2>
          goto memerr;
 8009fae:	bf00      	nop
 8009fb0:	e006      	b.n	8009fc0 <tcp_write+0x660>
            goto memerr;
 8009fb2:	bf00      	nop
 8009fb4:	e004      	b.n	8009fc0 <tcp_write+0x660>
        goto memerr;
 8009fb6:	bf00      	nop
 8009fb8:	e002      	b.n	8009fc0 <tcp_write+0x660>
        goto memerr;
 8009fba:	bf00      	nop
 8009fbc:	e000      	b.n	8009fc0 <tcp_write+0x660>
      goto memerr;
 8009fbe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8b5b      	ldrh	r3, [r3, #26]
 8009fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8009fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <tcp_write+0x67a>
    pbuf_free(concat_p);
 8009fd4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009fd6:	f7fa ff3f 	bl	8004e58 <pbuf_free>
  }
  if (queue != NULL) {
 8009fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <tcp_write+0x686>
    tcp_segs_free(queue);
 8009fe0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009fe2:	f7fc fb53 	bl	800668c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00e      	beq.n	800a00e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <tcp_write+0x6ae>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d106      	bne.n	800a00e <tcp_write+0x6ae>
 800a000:	4b06      	ldr	r3, [pc, #24]	@ (800a01c <tcp_write+0x6bc>)
 800a002:	f240 3227 	movw	r2, #807	@ 0x327
 800a006:	4906      	ldr	r1, [pc, #24]	@ (800a020 <tcp_write+0x6c0>)
 800a008:	4806      	ldr	r0, [pc, #24]	@ (800a024 <tcp_write+0x6c4>)
 800a00a:	f004 ff13 	bl	800ee34 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a00e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a012:	4618      	mov	r0, r3
 800a014:	375c      	adds	r7, #92	@ 0x5c
 800a016:	46bd      	mov	sp, r7
 800a018:	bd90      	pop	{r4, r7, pc}
 800a01a:	bf00      	nop
 800a01c:	0801151c 	.word	0x0801151c
 800a020:	08011890 	.word	0x08011890
 800a024:	08011570 	.word	0x08011570

0800a028 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a028:	b590      	push	{r4, r7, lr}
 800a02a:	b08b      	sub	sp, #44	@ 0x2c
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	460b      	mov	r3, r1
 800a032:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	61fb      	str	r3, [r7, #28]
 800a038:	2300      	movs	r3, #0
 800a03a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a03c:	2300      	movs	r3, #0
 800a03e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d106      	bne.n	800a054 <tcp_split_unsent_seg+0x2c>
 800a046:	4b95      	ldr	r3, [pc, #596]	@ (800a29c <tcp_split_unsent_seg+0x274>)
 800a048:	f240 324b 	movw	r2, #843	@ 0x34b
 800a04c:	4994      	ldr	r1, [pc, #592]	@ (800a2a0 <tcp_split_unsent_seg+0x278>)
 800a04e:	4895      	ldr	r0, [pc, #596]	@ (800a2a4 <tcp_split_unsent_seg+0x27c>)
 800a050:	f004 fef0 	bl	800ee34 <iprintf>

  useg = pcb->unsent;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a058:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a060:	f04f 33ff 	mov.w	r3, #4294967295
 800a064:	e116      	b.n	800a294 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a066:	887b      	ldrh	r3, [r7, #2]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d109      	bne.n	800a080 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a06c:	4b8b      	ldr	r3, [pc, #556]	@ (800a29c <tcp_split_unsent_seg+0x274>)
 800a06e:	f240 3253 	movw	r2, #851	@ 0x353
 800a072:	498d      	ldr	r1, [pc, #564]	@ (800a2a8 <tcp_split_unsent_seg+0x280>)
 800a074:	488b      	ldr	r0, [pc, #556]	@ (800a2a4 <tcp_split_unsent_seg+0x27c>)
 800a076:	f004 fedd 	bl	800ee34 <iprintf>
    return ERR_VAL;
 800a07a:	f06f 0305 	mvn.w	r3, #5
 800a07e:	e109      	b.n	800a294 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	891b      	ldrh	r3, [r3, #8]
 800a084:	887a      	ldrh	r2, [r7, #2]
 800a086:	429a      	cmp	r2, r3
 800a088:	d301      	bcc.n	800a08e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	e102      	b.n	800a294 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a092:	887a      	ldrh	r2, [r7, #2]
 800a094:	429a      	cmp	r2, r3
 800a096:	d906      	bls.n	800a0a6 <tcp_split_unsent_seg+0x7e>
 800a098:	4b80      	ldr	r3, [pc, #512]	@ (800a29c <tcp_split_unsent_seg+0x274>)
 800a09a:	f240 325b 	movw	r2, #859	@ 0x35b
 800a09e:	4983      	ldr	r1, [pc, #524]	@ (800a2ac <tcp_split_unsent_seg+0x284>)
 800a0a0:	4880      	ldr	r0, [pc, #512]	@ (800a2a4 <tcp_split_unsent_seg+0x27c>)
 800a0a2:	f004 fec7 	bl	800ee34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	891b      	ldrh	r3, [r3, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <tcp_split_unsent_seg+0x94>
 800a0ae:	4b7b      	ldr	r3, [pc, #492]	@ (800a29c <tcp_split_unsent_seg+0x274>)
 800a0b0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800a0b4:	497e      	ldr	r1, [pc, #504]	@ (800a2b0 <tcp_split_unsent_seg+0x288>)
 800a0b6:	487b      	ldr	r0, [pc, #492]	@ (800a2a4 <tcp_split_unsent_seg+0x27c>)
 800a0b8:	f004 febc 	bl	800ee34 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	7a9b      	ldrb	r3, [r3, #10]
 800a0c0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	891a      	ldrh	r2, [r3, #8]
 800a0d2:	887b      	ldrh	r3, [r7, #2]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	89bb      	ldrh	r3, [r7, #12]
 800a0de:	4413      	add	r3, r2
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	2036      	movs	r0, #54	@ 0x36
 800a0ea:	f7fa fbd1 	bl	8004890 <pbuf_alloc>
 800a0ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 80b7 	beq.w	800a266 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	891a      	ldrh	r2, [r3, #8]
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	891b      	ldrh	r3, [r3, #8]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	b29a      	uxth	r2, r3
 800a106:	887b      	ldrh	r3, [r7, #2]
 800a108:	4413      	add	r3, r2
 800a10a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	6858      	ldr	r0, [r3, #4]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	7bbb      	ldrb	r3, [r7, #14]
 800a116:	18d1      	adds	r1, r2, r3
 800a118:	897b      	ldrh	r3, [r7, #10]
 800a11a:	89ba      	ldrh	r2, [r7, #12]
 800a11c:	f7fb f886 	bl	800522c <pbuf_copy_partial>
 800a120:	4603      	mov	r3, r0
 800a122:	461a      	mov	r2, r3
 800a124:	89bb      	ldrh	r3, [r7, #12]
 800a126:	4293      	cmp	r3, r2
 800a128:	f040 809f 	bne.w	800a26a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	899b      	ldrh	r3, [r3, #12]
 800a132:	b29b      	uxth	r3, r3
 800a134:	4618      	mov	r0, r3
 800a136:	f7f9 fb91 	bl	800385c <lwip_htons>
 800a13a:	4603      	mov	r3, r0
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a142:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a144:	2300      	movs	r3, #0
 800a146:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a148:	7efb      	ldrb	r3, [r7, #27]
 800a14a:	f003 0308 	and.w	r3, r3, #8
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d007      	beq.n	800a162 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a152:	7efb      	ldrb	r3, [r7, #27]
 800a154:	f023 0308 	bic.w	r3, r3, #8
 800a158:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a15a:	7ebb      	ldrb	r3, [r7, #26]
 800a15c:	f043 0308 	orr.w	r3, r3, #8
 800a160:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a162:	7efb      	ldrb	r3, [r7, #27]
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d007      	beq.n	800a17c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a16c:	7efb      	ldrb	r3, [r7, #27]
 800a16e:	f023 0301 	bic.w	r3, r3, #1
 800a172:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a174:	7ebb      	ldrb	r3, [r7, #26]
 800a176:	f043 0301 	orr.w	r3, r3, #1
 800a17a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	4618      	mov	r0, r3
 800a184:	f7f9 fb7f 	bl	8003886 <lwip_htonl>
 800a188:	4602      	mov	r2, r0
 800a18a:	887b      	ldrh	r3, [r7, #2]
 800a18c:	18d1      	adds	r1, r2, r3
 800a18e:	7eba      	ldrb	r2, [r7, #26]
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	460b      	mov	r3, r1
 800a196:	6939      	ldr	r1, [r7, #16]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff fa51 	bl	8009640 <tcp_create_segment>
 800a19e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d063      	beq.n	800a26e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fa fedc 	bl	8004f68 <pbuf_clen>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a1ba:	1a9b      	subs	r3, r3, r2
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	6858      	ldr	r0, [r3, #4]
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	891a      	ldrh	r2, [r3, #8]
 800a1ce:	89bb      	ldrh	r3, [r7, #12]
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	f7fa fcb9 	bl	8004b4c <pbuf_realloc>
  useg->len -= remainder;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	891a      	ldrh	r2, [r3, #8]
 800a1de:	89bb      	ldrh	r3, [r7, #12]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	899b      	ldrh	r3, [r3, #12]
 800a1ee:	b29c      	uxth	r4, r3
 800a1f0:	7efb      	ldrb	r3, [r7, #27]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7f9 fb31 	bl	800385c <lwip_htons>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	4322      	orrs	r2, r4
 800a204:	b292      	uxth	r2, r2
 800a206:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fa feab 	bl	8004f68 <pbuf_clen>
 800a212:	4603      	mov	r3, r0
 800a214:	461a      	mov	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a21c:	4413      	add	r3, r2
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fa fe9c 	bl	8004f68 <pbuf_clen>
 800a230:	4603      	mov	r3, r0
 800a232:	461a      	mov	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a23a:	4413      	add	r3, r2
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	69fa      	ldr	r2, [r7, #28]
 800a250:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d103      	bne.n	800a262 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	e016      	b.n	800a294 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a266:	bf00      	nop
 800a268:	e002      	b.n	800a270 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a26a:	bf00      	nop
 800a26c:	e000      	b.n	800a270 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a26e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d006      	beq.n	800a284 <tcp_split_unsent_seg+0x25c>
 800a276:	4b09      	ldr	r3, [pc, #36]	@ (800a29c <tcp_split_unsent_seg+0x274>)
 800a278:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800a27c:	490d      	ldr	r1, [pc, #52]	@ (800a2b4 <tcp_split_unsent_seg+0x28c>)
 800a27e:	4809      	ldr	r0, [pc, #36]	@ (800a2a4 <tcp_split_unsent_seg+0x27c>)
 800a280:	f004 fdd8 	bl	800ee34 <iprintf>
  if (p != NULL) {
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d002      	beq.n	800a290 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a28a:	6938      	ldr	r0, [r7, #16]
 800a28c:	f7fa fde4 	bl	8004e58 <pbuf_free>
  }

  return ERR_MEM;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a294:	4618      	mov	r0, r3
 800a296:	3724      	adds	r7, #36	@ 0x24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd90      	pop	{r4, r7, pc}
 800a29c:	0801151c 	.word	0x0801151c
 800a2a0:	080118b0 	.word	0x080118b0
 800a2a4:	08011570 	.word	0x08011570
 800a2a8:	080118d4 	.word	0x080118d4
 800a2ac:	080118f8 	.word	0x080118f8
 800a2b0:	08011908 	.word	0x08011908
 800a2b4:	08011918 	.word	0x08011918

0800a2b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a2b8:	b590      	push	{r4, r7, lr}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d106      	bne.n	800a2d4 <tcp_send_fin+0x1c>
 800a2c6:	4b21      	ldr	r3, [pc, #132]	@ (800a34c <tcp_send_fin+0x94>)
 800a2c8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800a2cc:	4920      	ldr	r1, [pc, #128]	@ (800a350 <tcp_send_fin+0x98>)
 800a2ce:	4821      	ldr	r0, [pc, #132]	@ (800a354 <tcp_send_fin+0x9c>)
 800a2d0:	f004 fdb0 	bl	800ee34 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d02e      	beq.n	800a33a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	e002      	b.n	800a2ea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f8      	bne.n	800a2e4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	899b      	ldrh	r3, [r3, #12]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f9 faae 	bl	800385c <lwip_htons>
 800a300:	4603      	mov	r3, r0
 800a302:	b2db      	uxtb	r3, r3
 800a304:	f003 0307 	and.w	r3, r3, #7
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d116      	bne.n	800a33a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	899b      	ldrh	r3, [r3, #12]
 800a312:	b29c      	uxth	r4, r3
 800a314:	2001      	movs	r0, #1
 800a316:	f7f9 faa1 	bl	800385c <lwip_htons>
 800a31a:	4603      	mov	r3, r0
 800a31c:	461a      	mov	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	4322      	orrs	r2, r4
 800a324:	b292      	uxth	r2, r2
 800a326:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	8b5b      	ldrh	r3, [r3, #26]
 800a32c:	f043 0320 	orr.w	r3, r3, #32
 800a330:	b29a      	uxth	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	e004      	b.n	800a344 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a33a:	2101      	movs	r1, #1
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f80b 	bl	800a358 <tcp_enqueue_flags>
 800a342:	4603      	mov	r3, r0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd90      	pop	{r4, r7, pc}
 800a34c:	0801151c 	.word	0x0801151c
 800a350:	08011924 	.word	0x08011924
 800a354:	08011570 	.word	0x08011570

0800a358 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08a      	sub	sp, #40	@ 0x28
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a368:	2300      	movs	r3, #0
 800a36a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a36c:	78fb      	ldrb	r3, [r7, #3]
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <tcp_enqueue_flags+0x2c>
 800a376:	4b67      	ldr	r3, [pc, #412]	@ (800a514 <tcp_enqueue_flags+0x1bc>)
 800a378:	f240 4211 	movw	r2, #1041	@ 0x411
 800a37c:	4966      	ldr	r1, [pc, #408]	@ (800a518 <tcp_enqueue_flags+0x1c0>)
 800a37e:	4867      	ldr	r0, [pc, #412]	@ (800a51c <tcp_enqueue_flags+0x1c4>)
 800a380:	f004 fd58 	bl	800ee34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <tcp_enqueue_flags+0x40>
 800a38a:	4b62      	ldr	r3, [pc, #392]	@ (800a514 <tcp_enqueue_flags+0x1bc>)
 800a38c:	f240 4213 	movw	r2, #1043	@ 0x413
 800a390:	4963      	ldr	r1, [pc, #396]	@ (800a520 <tcp_enqueue_flags+0x1c8>)
 800a392:	4862      	ldr	r0, [pc, #392]	@ (800a51c <tcp_enqueue_flags+0x1c4>)
 800a394:	f004 fd4e 	bl	800ee34 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a398:	78fb      	ldrb	r3, [r7, #3]
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a3a6:	7ffb      	ldrb	r3, [r7, #31]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	2036      	movs	r0, #54	@ 0x36
 800a3be:	f7fa fa67 	bl	8004890 <pbuf_alloc>
 800a3c2:	6138      	str	r0, [r7, #16]
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	8b5b      	ldrh	r3, [r3, #26]
 800a3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3dc:	e095      	b.n	800a50a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	895a      	ldrh	r2, [r3, #10]
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d206      	bcs.n	800a3f8 <tcp_enqueue_flags+0xa0>
 800a3ea:	4b4a      	ldr	r3, [pc, #296]	@ (800a514 <tcp_enqueue_flags+0x1bc>)
 800a3ec:	f240 4239 	movw	r2, #1081	@ 0x439
 800a3f0:	494c      	ldr	r1, [pc, #304]	@ (800a524 <tcp_enqueue_flags+0x1cc>)
 800a3f2:	484a      	ldr	r0, [pc, #296]	@ (800a51c <tcp_enqueue_flags+0x1c4>)
 800a3f4:	f004 fd1e 	bl	800ee34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800a3fc:	78fa      	ldrb	r2, [r7, #3]
 800a3fe:	7ffb      	ldrb	r3, [r7, #31]
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	460b      	mov	r3, r1
 800a404:	6939      	ldr	r1, [r7, #16]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7ff f91a 	bl	8009640 <tcp_create_segment>
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d109      	bne.n	800a428 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	8b5b      	ldrh	r3, [r3, #26]
 800a418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a422:	f04f 33ff 	mov.w	r3, #4294967295
 800a426:	e070      	b.n	800a50a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	f003 0303 	and.w	r3, r3, #3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d006      	beq.n	800a442 <tcp_enqueue_flags+0xea>
 800a434:	4b37      	ldr	r3, [pc, #220]	@ (800a514 <tcp_enqueue_flags+0x1bc>)
 800a436:	f240 4242 	movw	r2, #1090	@ 0x442
 800a43a:	493b      	ldr	r1, [pc, #236]	@ (800a528 <tcp_enqueue_flags+0x1d0>)
 800a43c:	4837      	ldr	r0, [pc, #220]	@ (800a51c <tcp_enqueue_flags+0x1c4>)
 800a43e:	f004 fcf9 	bl	800ee34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	891b      	ldrh	r3, [r3, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d006      	beq.n	800a458 <tcp_enqueue_flags+0x100>
 800a44a:	4b32      	ldr	r3, [pc, #200]	@ (800a514 <tcp_enqueue_flags+0x1bc>)
 800a44c:	f240 4243 	movw	r2, #1091	@ 0x443
 800a450:	4936      	ldr	r1, [pc, #216]	@ (800a52c <tcp_enqueue_flags+0x1d4>)
 800a452:	4832      	ldr	r0, [pc, #200]	@ (800a51c <tcp_enqueue_flags+0x1c4>)
 800a454:	f004 fcee 	bl	800ee34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d103      	bne.n	800a468 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a466:	e00d      	b.n	800a484 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a46c:	61bb      	str	r3, [r7, #24]
 800a46e:	e002      	b.n	800a476 <tcp_enqueue_flags+0x11e>
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	61bb      	str	r3, [r7, #24]
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1f8      	bne.n	800a470 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	f003 0302 	and.w	r3, r3, #2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d104      	bne.n	800a4a0 <tcp_enqueue_flags+0x148>
 800a496:	78fb      	ldrb	r3, [r7, #3]
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d004      	beq.n	800a4aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a4aa:	78fb      	ldrb	r3, [r7, #3]
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	8b5b      	ldrh	r3, [r3, #26]
 800a4b8:	f043 0320 	orr.w	r3, r3, #32
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fa fd4e 	bl	8004f68 <pbuf_clen>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a4d6:	4413      	add	r3, r2
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00e      	beq.n	800a508 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10a      	bne.n	800a508 <tcp_enqueue_flags+0x1b0>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d106      	bne.n	800a508 <tcp_enqueue_flags+0x1b0>
 800a4fa:	4b06      	ldr	r3, [pc, #24]	@ (800a514 <tcp_enqueue_flags+0x1bc>)
 800a4fc:	f240 4265 	movw	r2, #1125	@ 0x465
 800a500:	490b      	ldr	r1, [pc, #44]	@ (800a530 <tcp_enqueue_flags+0x1d8>)
 800a502:	4806      	ldr	r0, [pc, #24]	@ (800a51c <tcp_enqueue_flags+0x1c4>)
 800a504:	f004 fc96 	bl	800ee34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3720      	adds	r7, #32
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	0801151c 	.word	0x0801151c
 800a518:	08011940 	.word	0x08011940
 800a51c:	08011570 	.word	0x08011570
 800a520:	08011998 	.word	0x08011998
 800a524:	080119b8 	.word	0x080119b8
 800a528:	080119f4 	.word	0x080119f4
 800a52c:	08011a0c 	.word	0x08011a0c
 800a530:	08011a38 	.word	0x08011a38

0800a534 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a534:	b5b0      	push	{r4, r5, r7, lr}
 800a536:	b08a      	sub	sp, #40	@ 0x28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d106      	bne.n	800a550 <tcp_output+0x1c>
 800a542:	4b8a      	ldr	r3, [pc, #552]	@ (800a76c <tcp_output+0x238>)
 800a544:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800a548:	4989      	ldr	r1, [pc, #548]	@ (800a770 <tcp_output+0x23c>)
 800a54a:	488a      	ldr	r0, [pc, #552]	@ (800a774 <tcp_output+0x240>)
 800a54c:	f004 fc72 	bl	800ee34 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	7d1b      	ldrb	r3, [r3, #20]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d106      	bne.n	800a566 <tcp_output+0x32>
 800a558:	4b84      	ldr	r3, [pc, #528]	@ (800a76c <tcp_output+0x238>)
 800a55a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800a55e:	4986      	ldr	r1, [pc, #536]	@ (800a778 <tcp_output+0x244>)
 800a560:	4884      	ldr	r0, [pc, #528]	@ (800a774 <tcp_output+0x240>)
 800a562:	f004 fc67 	bl	800ee34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a566:	4b85      	ldr	r3, [pc, #532]	@ (800a77c <tcp_output+0x248>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d101      	bne.n	800a574 <tcp_output+0x40>
    return ERR_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	e1ce      	b.n	800a912 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a580:	4293      	cmp	r3, r2
 800a582:	bf28      	it	cs
 800a584:	4613      	movcs	r3, r2
 800a586:	b29b      	uxth	r3, r3
 800a588:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a58e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10b      	bne.n	800a5ae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	8b5b      	ldrh	r3, [r3, #26]
 800a59a:	f003 0302 	and.w	r3, r3, #2
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 81aa 	beq.w	800a8f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fdcb 	bl	800b140 <tcp_send_empty_ack>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	e1b1      	b.n	800a912 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff f826 	bl	8009608 <tcp_route>
 800a5bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <tcp_output+0x96>
    return ERR_RTE;
 800a5c4:	f06f 0303 	mvn.w	r3, #3
 800a5c8:	e1a3      	b.n	800a912 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d003      	beq.n	800a5d8 <tcp_output+0xa4>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d111      	bne.n	800a5fc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d002      	beq.n	800a5e4 <tcp_output+0xb0>
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	e000      	b.n	800a5e6 <tcp_output+0xb2>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <tcp_output+0xc0>
      return ERR_RTE;
 800a5ee:	f06f 0303 	mvn.w	r3, #3
 800a5f2:	e18e      	b.n	800a912 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	4618      	mov	r0, r3
 800a604:	f7f9 f93f 	bl	8003886 <lwip_htonl>
 800a608:	4602      	mov	r2, r0
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a612:	8912      	ldrh	r2, [r2, #8]
 800a614:	4413      	add	r3, r2
 800a616:	69ba      	ldr	r2, [r7, #24]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d227      	bcs.n	800a66c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a622:	461a      	mov	r2, r3
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	4293      	cmp	r3, r2
 800a628:	d114      	bne.n	800a654 <tcp_output+0x120>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d110      	bne.n	800a654 <tcp_output+0x120>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10b      	bne.n	800a654 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	8b5b      	ldrh	r3, [r3, #26]
 800a658:	f003 0302 	and.w	r3, r3, #2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 814d 	beq.w	800a8fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fd6c 	bl	800b140 <tcp_send_empty_ack>
 800a668:	4603      	mov	r3, r0
 800a66a:	e152      	b.n	800a912 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a678:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 811c 	beq.w	800a8ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a682:	e002      	b.n	800a68a <tcp_output+0x156>
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	623b      	str	r3, [r7, #32]
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f8      	bne.n	800a684 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a692:	e112      	b.n	800a8ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	899b      	ldrh	r3, [r3, #12]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7f9 f8dd 	bl	800385c <lwip_htons>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	f003 0304 	and.w	r3, r3, #4
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d006      	beq.n	800a6bc <tcp_output+0x188>
 800a6ae:	4b2f      	ldr	r3, [pc, #188]	@ (800a76c <tcp_output+0x238>)
 800a6b0:	f240 5236 	movw	r2, #1334	@ 0x536
 800a6b4:	4932      	ldr	r1, [pc, #200]	@ (800a780 <tcp_output+0x24c>)
 800a6b6:	482f      	ldr	r0, [pc, #188]	@ (800a774 <tcp_output+0x240>)
 800a6b8:	f004 fbbc 	bl	800ee34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d01f      	beq.n	800a704 <tcp_output+0x1d0>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	8b5b      	ldrh	r3, [r3, #26]
 800a6c8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d119      	bne.n	800a704 <tcp_output+0x1d0>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00b      	beq.n	800a6f0 <tcp_output+0x1bc>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d110      	bne.n	800a704 <tcp_output+0x1d0>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6e6:	891a      	ldrh	r2, [r3, #8]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d209      	bcs.n	800a704 <tcp_output+0x1d0>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d004      	beq.n	800a704 <tcp_output+0x1d0>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a700:	2b08      	cmp	r3, #8
 800a702:	d901      	bls.n	800a708 <tcp_output+0x1d4>
 800a704:	2301      	movs	r3, #1
 800a706:	e000      	b.n	800a70a <tcp_output+0x1d6>
 800a708:	2300      	movs	r3, #0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d106      	bne.n	800a71c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	8b5b      	ldrh	r3, [r3, #26]
 800a712:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 80e4 	beq.w	800a8e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7d1b      	ldrb	r3, [r3, #20]
 800a720:	2b02      	cmp	r3, #2
 800a722:	d00d      	beq.n	800a740 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	899b      	ldrh	r3, [r3, #12]
 800a72a:	b29c      	uxth	r4, r3
 800a72c:	2010      	movs	r0, #16
 800a72e:	f7f9 f895 	bl	800385c <lwip_htons>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	4322      	orrs	r2, r4
 800a73c:	b292      	uxth	r2, r2
 800a73e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a746:	f000 f909 	bl	800a95c <tcp_output_segment>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a74e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d016      	beq.n	800a784 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	8b5b      	ldrh	r3, [r3, #26]
 800a75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a75e:	b29a      	uxth	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	835a      	strh	r2, [r3, #26]
      return err;
 800a764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a768:	e0d3      	b.n	800a912 <tcp_output+0x3de>
 800a76a:	bf00      	nop
 800a76c:	0801151c 	.word	0x0801151c
 800a770:	08011a60 	.word	0x08011a60
 800a774:	08011570 	.word	0x08011570
 800a778:	08011a78 	.word	0x08011a78
 800a77c:	20003a8c 	.word	0x20003a8c
 800a780:	08011aa0 	.word	0x08011aa0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7d1b      	ldrb	r3, [r3, #20]
 800a790:	2b02      	cmp	r3, #2
 800a792:	d006      	beq.n	800a7a2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	8b5b      	ldrh	r3, [r3, #26]
 800a798:	f023 0303 	bic.w	r3, r3, #3
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7f9 f86c 	bl	8003886 <lwip_htonl>
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b2:	891b      	ldrh	r3, [r3, #8]
 800a7b4:	461d      	mov	r5, r3
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	899b      	ldrh	r3, [r3, #12]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7f9 f84c 	bl	800385c <lwip_htons>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	f003 0303 	and.w	r3, r3, #3
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <tcp_output+0x2a0>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e000      	b.n	800a7d6 <tcp_output+0x2a2>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	442b      	add	r3, r5
 800a7d8:	4423      	add	r3, r4
 800a7da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	da02      	bge.n	800a7ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f0:	891b      	ldrh	r3, [r3, #8]
 800a7f2:	461c      	mov	r4, r3
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	899b      	ldrh	r3, [r3, #12]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7f9 f82d 	bl	800385c <lwip_htons>
 800a802:	4603      	mov	r3, r0
 800a804:	b2db      	uxtb	r3, r3
 800a806:	f003 0303 	and.w	r3, r3, #3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <tcp_output+0x2de>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <tcp_output+0x2e0>
 800a812:	2300      	movs	r3, #0
 800a814:	4423      	add	r3, r4
 800a816:	2b00      	cmp	r3, #0
 800a818:	d049      	beq.n	800a8ae <tcp_output+0x37a>
      seg->next = NULL;
 800a81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a824:	2b00      	cmp	r3, #0
 800a826:	d105      	bne.n	800a834 <tcp_output+0x300>
        pcb->unacked = seg;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a82c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800a82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a830:	623b      	str	r3, [r7, #32]
 800a832:	e03f      	b.n	800a8b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7f9 f823 	bl	8003886 <lwip_htonl>
 800a840:	4604      	mov	r4, r0
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7f9 f81c 	bl	8003886 <lwip_htonl>
 800a84e:	4603      	mov	r3, r0
 800a850:	1ae3      	subs	r3, r4, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	da24      	bge.n	800a8a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	3370      	adds	r3, #112	@ 0x70
 800a85a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a85c:	e002      	b.n	800a864 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d011      	beq.n	800a890 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	4618      	mov	r0, r3
 800a876:	f7f9 f806 	bl	8003886 <lwip_htonl>
 800a87a:	4604      	mov	r4, r0
 800a87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	4618      	mov	r0, r3
 800a884:	f7f8 ffff 	bl	8003886 <lwip_htonl>
 800a888:	4603      	mov	r3, r0
 800a88a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dbe6      	blt.n	800a85e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	e009      	b.n	800a8b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a8a6:	6a3b      	ldr	r3, [r7, #32]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	623b      	str	r3, [r7, #32]
 800a8ac:	e002      	b.n	800a8b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a8ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a8b0:	f7fb ff01 	bl	80066b6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d012      	beq.n	800a8e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f8 ffdd 	bl	8003886 <lwip_htonl>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8d6:	8912      	ldrh	r2, [r2, #8]
 800a8d8:	4413      	add	r3, r2
  while (seg != NULL &&
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	f4bf aed9 	bcs.w	800a694 <tcp_output+0x160>
 800a8e2:	e000      	b.n	800a8e6 <tcp_output+0x3b2>
      break;
 800a8e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d108      	bne.n	800a900 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800a8f6:	e004      	b.n	800a902 <tcp_output+0x3ce>
    goto output_done;
 800a8f8:	bf00      	nop
 800a8fa:	e002      	b.n	800a902 <tcp_output+0x3ce>
    goto output_done;
 800a8fc:	bf00      	nop
 800a8fe:	e000      	b.n	800a902 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a900:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	8b5b      	ldrh	r3, [r3, #26]
 800a906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3728      	adds	r7, #40	@ 0x28
 800a916:	46bd      	mov	sp, r7
 800a918:	bdb0      	pop	{r4, r5, r7, pc}
 800a91a:	bf00      	nop

0800a91c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d106      	bne.n	800a938 <tcp_output_segment_busy+0x1c>
 800a92a:	4b09      	ldr	r3, [pc, #36]	@ (800a950 <tcp_output_segment_busy+0x34>)
 800a92c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800a930:	4908      	ldr	r1, [pc, #32]	@ (800a954 <tcp_output_segment_busy+0x38>)
 800a932:	4809      	ldr	r0, [pc, #36]	@ (800a958 <tcp_output_segment_busy+0x3c>)
 800a934:	f004 fa7e 	bl	800ee34 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	7b9b      	ldrb	r3, [r3, #14]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d001      	beq.n	800a946 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a942:	2301      	movs	r3, #1
 800a944:	e000      	b.n	800a948 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	0801151c 	.word	0x0801151c
 800a954:	08011ab8 	.word	0x08011ab8
 800a958:	08011570 	.word	0x08011570

0800a95c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a95c:	b5b0      	push	{r4, r5, r7, lr}
 800a95e:	b08c      	sub	sp, #48	@ 0x30
 800a960:	af04      	add	r7, sp, #16
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d106      	bne.n	800a97c <tcp_output_segment+0x20>
 800a96e:	4b64      	ldr	r3, [pc, #400]	@ (800ab00 <tcp_output_segment+0x1a4>)
 800a970:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800a974:	4963      	ldr	r1, [pc, #396]	@ (800ab04 <tcp_output_segment+0x1a8>)
 800a976:	4864      	ldr	r0, [pc, #400]	@ (800ab08 <tcp_output_segment+0x1ac>)
 800a978:	f004 fa5c 	bl	800ee34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d106      	bne.n	800a990 <tcp_output_segment+0x34>
 800a982:	4b5f      	ldr	r3, [pc, #380]	@ (800ab00 <tcp_output_segment+0x1a4>)
 800a984:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800a988:	4960      	ldr	r1, [pc, #384]	@ (800ab0c <tcp_output_segment+0x1b0>)
 800a98a:	485f      	ldr	r0, [pc, #380]	@ (800ab08 <tcp_output_segment+0x1ac>)
 800a98c:	f004 fa52 	bl	800ee34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <tcp_output_segment+0x48>
 800a996:	4b5a      	ldr	r3, [pc, #360]	@ (800ab00 <tcp_output_segment+0x1a4>)
 800a998:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800a99c:	495c      	ldr	r1, [pc, #368]	@ (800ab10 <tcp_output_segment+0x1b4>)
 800a99e:	485a      	ldr	r0, [pc, #360]	@ (800ab08 <tcp_output_segment+0x1ac>)
 800a9a0:	f004 fa48 	bl	800ee34 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f7ff ffb9 	bl	800a91c <tcp_output_segment_busy>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e0a1      	b.n	800aaf8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	68dc      	ldr	r4, [r3, #12]
 800a9bc:	4610      	mov	r0, r2
 800a9be:	f7f8 ff62 	bl	8003886 <lwip_htonl>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	68dc      	ldr	r4, [r3, #12]
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	f7f8 ff44 	bl	800385c <lwip_htons>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a9e0:	441a      	add	r2, r3
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	3314      	adds	r3, #20
 800a9ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	7a9b      	ldrb	r3, [r3, #10]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d015      	beq.n	800aa26 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	461a      	mov	r2, r3
 800aa00:	6879      	ldr	r1, [r7, #4]
 800aa02:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800aa06:	f7fc fa39 	bl	8006e7c <tcp_eff_send_mss_netif>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800aa0e:	8b7b      	ldrh	r3, [r7, #26]
 800aa10:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7f8 ff36 	bl	8003886 <lwip_htonl>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	3304      	adds	r3, #4
 800aa24:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	da02      	bge.n	800aa36 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2200      	movs	r2, #0
 800aa34:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10c      	bne.n	800aa58 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800aa3e:	4b35      	ldr	r3, [pc, #212]	@ (800ab14 <tcp_output_segment+0x1b8>)
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7f8 ff1a 	bl	8003886 <lwip_htonl>
 800aa52:	4602      	mov	r2, r0
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	68da      	ldr	r2, [r3, #12]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	8959      	ldrh	r1, [r3, #10]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	8b3a      	ldrh	r2, [r7, #24]
 800aa72:	1a8a      	subs	r2, r1, r2
 800aa74:	b292      	uxth	r2, r2
 800aa76:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	8919      	ldrh	r1, [r3, #8]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	8b3a      	ldrh	r2, [r7, #24]
 800aa84:	1a8a      	subs	r2, r1, r2
 800aa86:	b292      	uxth	r2, r2
 800aa88:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	68d2      	ldr	r2, [r2, #12]
 800aa92:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	741a      	strb	r2, [r3, #16]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68da      	ldr	r2, [r3, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	7a9b      	ldrb	r3, [r3, #10]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <tcp_output_segment+0x158>
 800aab0:	2318      	movs	r3, #24
 800aab2:	e000      	b.n	800aab6 <tcp_output_segment+0x15a>
 800aab4:	2314      	movs	r3, #20
 800aab6:	4413      	add	r3, r2
 800aab8:	69fa      	ldr	r2, [r7, #28]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d006      	beq.n	800aacc <tcp_output_segment+0x170>
 800aabe:	4b10      	ldr	r3, [pc, #64]	@ (800ab00 <tcp_output_segment+0x1a4>)
 800aac0:	f240 621c 	movw	r2, #1564	@ 0x61c
 800aac4:	4914      	ldr	r1, [pc, #80]	@ (800ab18 <tcp_output_segment+0x1bc>)
 800aac6:	4810      	ldr	r0, [pc, #64]	@ (800ab08 <tcp_output_segment+0x1ac>)
 800aac8:	f004 f9b4 	bl	800ee34 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6858      	ldr	r0, [r3, #4]
 800aad0:	68b9      	ldr	r1, [r7, #8]
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	1d1c      	adds	r4, r3, #4
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	7add      	ldrb	r5, [r3, #11]
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	7a9b      	ldrb	r3, [r3, #10]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	9202      	str	r2, [sp, #8]
 800aae2:	2206      	movs	r2, #6
 800aae4:	9201      	str	r2, [sp, #4]
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	462b      	mov	r3, r5
 800aaea:	4622      	mov	r2, r4
 800aaec:	f002 fa04 	bl	800cef8 <ip4_output_if>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800aaf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3720      	adds	r7, #32
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bdb0      	pop	{r4, r5, r7, pc}
 800ab00:	0801151c 	.word	0x0801151c
 800ab04:	08011ae0 	.word	0x08011ae0
 800ab08:	08011570 	.word	0x08011570
 800ab0c:	08011b00 	.word	0x08011b00
 800ab10:	08011b20 	.word	0x08011b20
 800ab14:	20003a40 	.word	0x20003a40
 800ab18:	08011b44 	.word	0x08011b44

0800ab1c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ab1c:	b5b0      	push	{r4, r5, r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d106      	bne.n	800ab38 <tcp_rexmit_rto_prepare+0x1c>
 800ab2a:	4b31      	ldr	r3, [pc, #196]	@ (800abf0 <tcp_rexmit_rto_prepare+0xd4>)
 800ab2c:	f240 6263 	movw	r2, #1635	@ 0x663
 800ab30:	4930      	ldr	r1, [pc, #192]	@ (800abf4 <tcp_rexmit_rto_prepare+0xd8>)
 800ab32:	4831      	ldr	r0, [pc, #196]	@ (800abf8 <tcp_rexmit_rto_prepare+0xdc>)
 800ab34:	f004 f97e 	bl	800ee34 <iprintf>

  if (pcb->unacked == NULL) {
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ab40:	f06f 0305 	mvn.w	r3, #5
 800ab44:	e050      	b.n	800abe8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	e00b      	b.n	800ab66 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fee4 	bl	800a91c <tcp_output_segment_busy>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d002      	beq.n	800ab60 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ab5a:	f06f 0305 	mvn.w	r3, #5
 800ab5e:	e043      	b.n	800abe8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1ef      	bne.n	800ab4e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f7ff fed4 	bl	800a91c <tcp_output_segment_busy>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ab7a:	f06f 0305 	mvn.w	r3, #5
 800ab7e:	e033      	b.n	800abe8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	8b5b      	ldrh	r3, [r3, #26]
 800ab9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	4618      	mov	r0, r3
 800abac:	f7f8 fe6b 	bl	8003886 <lwip_htonl>
 800abb0:	4604      	mov	r4, r0
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	891b      	ldrh	r3, [r3, #8]
 800abb6:	461d      	mov	r5, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	899b      	ldrh	r3, [r3, #12]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7f8 fe4b 	bl	800385c <lwip_htons>
 800abc6:	4603      	mov	r3, r0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 0303 	and.w	r3, r3, #3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <tcp_rexmit_rto_prepare+0xba>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e000      	b.n	800abd8 <tcp_rexmit_rto_prepare+0xbc>
 800abd6:	2300      	movs	r3, #0
 800abd8:	442b      	add	r3, r5
 800abda:	18e2      	adds	r2, r4, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bdb0      	pop	{r4, r5, r7, pc}
 800abf0:	0801151c 	.word	0x0801151c
 800abf4:	08011b58 	.word	0x08011b58
 800abf8:	08011570 	.word	0x08011570

0800abfc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d106      	bne.n	800ac18 <tcp_rexmit_rto_commit+0x1c>
 800ac0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac40 <tcp_rexmit_rto_commit+0x44>)
 800ac0c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ac10:	490c      	ldr	r1, [pc, #48]	@ (800ac44 <tcp_rexmit_rto_commit+0x48>)
 800ac12:	480d      	ldr	r0, [pc, #52]	@ (800ac48 <tcp_rexmit_rto_commit+0x4c>)
 800ac14:	f004 f90e 	bl	800ee34 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac1e:	2bff      	cmp	r3, #255	@ 0xff
 800ac20:	d007      	beq.n	800ac32 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac28:	3301      	adds	r3, #1
 800ac2a:	b2da      	uxtb	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7ff fc7e 	bl	800a534 <tcp_output>
}
 800ac38:	bf00      	nop
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	0801151c 	.word	0x0801151c
 800ac44:	08011b7c 	.word	0x08011b7c
 800ac48:	08011570 	.word	0x08011570

0800ac4c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <tcp_rexmit_rto+0x1c>
 800ac5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ac84 <tcp_rexmit_rto+0x38>)
 800ac5c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ac60:	4909      	ldr	r1, [pc, #36]	@ (800ac88 <tcp_rexmit_rto+0x3c>)
 800ac62:	480a      	ldr	r0, [pc, #40]	@ (800ac8c <tcp_rexmit_rto+0x40>)
 800ac64:	f004 f8e6 	bl	800ee34 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff ff57 	bl	800ab1c <tcp_rexmit_rto_prepare>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f7ff ffc1 	bl	800abfc <tcp_rexmit_rto_commit>
  }
}
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	0801151c 	.word	0x0801151c
 800ac88:	08011ba0 	.word	0x08011ba0
 800ac8c:	08011570 	.word	0x08011570

0800ac90 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ac90:	b590      	push	{r4, r7, lr}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <tcp_rexmit+0x1c>
 800ac9e:	4b2f      	ldr	r3, [pc, #188]	@ (800ad5c <tcp_rexmit+0xcc>)
 800aca0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800aca4:	492e      	ldr	r1, [pc, #184]	@ (800ad60 <tcp_rexmit+0xd0>)
 800aca6:	482f      	ldr	r0, [pc, #188]	@ (800ad64 <tcp_rexmit+0xd4>)
 800aca8:	f004 f8c4 	bl	800ee34 <iprintf>

  if (pcb->unacked == NULL) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <tcp_rexmit+0x2a>
    return ERR_VAL;
 800acb4:	f06f 0305 	mvn.w	r3, #5
 800acb8:	e04c      	b.n	800ad54 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800acbe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800acc0:	68b8      	ldr	r0, [r7, #8]
 800acc2:	f7ff fe2b 	bl	800a91c <tcp_output_segment_busy>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800accc:	f06f 0305 	mvn.w	r3, #5
 800acd0:	e040      	b.n	800ad54 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	336c      	adds	r3, #108	@ 0x6c
 800acde:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ace0:	e002      	b.n	800ace8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d011      	beq.n	800ad14 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7f8 fdc4 	bl	8003886 <lwip_htonl>
 800acfe:	4604      	mov	r4, r0
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f8 fdbd 	bl	8003886 <lwip_htonl>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dbe6      	blt.n	800ace2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d103      	bne.n	800ad32 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad38:	2bff      	cmp	r3, #255	@ 0xff
 800ad3a:	d007      	beq.n	800ad4c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad42:	3301      	adds	r3, #1
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd90      	pop	{r4, r7, pc}
 800ad5c:	0801151c 	.word	0x0801151c
 800ad60:	08011bbc 	.word	0x08011bbc
 800ad64:	08011570 	.word	0x08011570

0800ad68 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <tcp_rexmit_fast+0x1c>
 800ad76:	4b2a      	ldr	r3, [pc, #168]	@ (800ae20 <tcp_rexmit_fast+0xb8>)
 800ad78:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800ad7c:	4929      	ldr	r1, [pc, #164]	@ (800ae24 <tcp_rexmit_fast+0xbc>)
 800ad7e:	482a      	ldr	r0, [pc, #168]	@ (800ae28 <tcp_rexmit_fast+0xc0>)
 800ad80:	f004 f858 	bl	800ee34 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d044      	beq.n	800ae16 <tcp_rexmit_fast+0xae>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	8b5b      	ldrh	r3, [r3, #26]
 800ad90:	f003 0304 	and.w	r3, r3, #4
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d13e      	bne.n	800ae16 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff ff79 	bl	800ac90 <tcp_rexmit>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d138      	bne.n	800ae16 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800adb0:	4293      	cmp	r3, r2
 800adb2:	bf28      	it	cs
 800adb4:	4613      	movcs	r3, r2
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	0fda      	lsrs	r2, r3, #31
 800adba:	4413      	add	r3, r2
 800adbc:	105b      	asrs	r3, r3, #1
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800adcc:	461a      	mov	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	429a      	cmp	r2, r3
 800add6:	d206      	bcs.n	800ade6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	b29a      	uxth	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800adf0:	4619      	mov	r1, r3
 800adf2:	0049      	lsls	r1, r1, #1
 800adf4:	440b      	add	r3, r1
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	4413      	add	r3, r2
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	8b5b      	ldrh	r3, [r3, #26]
 800ae06:	f043 0304 	orr.w	r3, r3, #4
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ae16:	bf00      	nop
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	0801151c 	.word	0x0801151c
 800ae24:	08011bd4 	.word	0x08011bd4
 800ae28:	08011570 	.word	0x08011570

0800ae2c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	607b      	str	r3, [r7, #4]
 800ae36:	460b      	mov	r3, r1
 800ae38:	817b      	strh	r3, [r7, #10]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae3e:	897a      	ldrh	r2, [r7, #10]
 800ae40:	893b      	ldrh	r3, [r7, #8]
 800ae42:	4413      	add	r3, r2
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	3314      	adds	r3, #20
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ae4e:	4619      	mov	r1, r3
 800ae50:	2022      	movs	r0, #34	@ 0x22
 800ae52:	f7f9 fd1d 	bl	8004890 <pbuf_alloc>
 800ae56:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d04d      	beq.n	800aefa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ae5e:	897b      	ldrh	r3, [r7, #10]
 800ae60:	3313      	adds	r3, #19
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	8952      	ldrh	r2, [r2, #10]
 800ae66:	4293      	cmp	r3, r2
 800ae68:	db06      	blt.n	800ae78 <tcp_output_alloc_header_common+0x4c>
 800ae6a:	4b26      	ldr	r3, [pc, #152]	@ (800af04 <tcp_output_alloc_header_common+0xd8>)
 800ae6c:	f240 7223 	movw	r2, #1827	@ 0x723
 800ae70:	4925      	ldr	r1, [pc, #148]	@ (800af08 <tcp_output_alloc_header_common+0xdc>)
 800ae72:	4826      	ldr	r0, [pc, #152]	@ (800af0c <tcp_output_alloc_header_common+0xe0>)
 800ae74:	f003 ffde 	bl	800ee34 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ae7e:	8c3b      	ldrh	r3, [r7, #32]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7f8 fceb 	bl	800385c <lwip_htons>
 800ae86:	4603      	mov	r3, r0
 800ae88:	461a      	mov	r2, r3
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ae8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f8 fce3 	bl	800385c <lwip_htons>
 800ae96:	4603      	mov	r3, r0
 800ae98:	461a      	mov	r2, r3
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f7f8 fcee 	bl	8003886 <lwip_htonl>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800aeb0:	897b      	ldrh	r3, [r7, #10]
 800aeb2:	089b      	lsrs	r3, r3, #2
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	3305      	adds	r3, #5
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	031b      	lsls	r3, r3, #12
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	4313      	orrs	r3, r2
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7f8 fcc7 	bl	800385c <lwip_htons>
 800aece:	4603      	mov	r3, r0
 800aed0:	461a      	mov	r2, r3
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800aed6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7f8 fcbf 	bl	800385c <lwip_htons>
 800aede:	4603      	mov	r3, r0
 800aee0:	461a      	mov	r2, r3
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2200      	movs	r2, #0
 800aeea:	741a      	strb	r2, [r3, #16]
 800aeec:	2200      	movs	r2, #0
 800aeee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2200      	movs	r2, #0
 800aef4:	749a      	strb	r2, [r3, #18]
 800aef6:	2200      	movs	r2, #0
 800aef8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800aefa:	697b      	ldr	r3, [r7, #20]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3718      	adds	r7, #24
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	0801151c 	.word	0x0801151c
 800af08:	08011bf4 	.word	0x08011bf4
 800af0c:	08011570 	.word	0x08011570

0800af10 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800af10:	b5b0      	push	{r4, r5, r7, lr}
 800af12:	b08a      	sub	sp, #40	@ 0x28
 800af14:	af04      	add	r7, sp, #16
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	607b      	str	r3, [r7, #4]
 800af1a:	460b      	mov	r3, r1
 800af1c:	817b      	strh	r3, [r7, #10]
 800af1e:	4613      	mov	r3, r2
 800af20:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <tcp_output_alloc_header+0x26>
 800af28:	4b15      	ldr	r3, [pc, #84]	@ (800af80 <tcp_output_alloc_header+0x70>)
 800af2a:	f240 7242 	movw	r2, #1858	@ 0x742
 800af2e:	4915      	ldr	r1, [pc, #84]	@ (800af84 <tcp_output_alloc_header+0x74>)
 800af30:	4815      	ldr	r0, [pc, #84]	@ (800af88 <tcp_output_alloc_header+0x78>)
 800af32:	f003 ff7f 	bl	800ee34 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	8adb      	ldrh	r3, [r3, #22]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	8b12      	ldrh	r2, [r2, #24]
 800af42:	68f9      	ldr	r1, [r7, #12]
 800af44:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800af46:	893d      	ldrh	r5, [r7, #8]
 800af48:	897c      	ldrh	r4, [r7, #10]
 800af4a:	9103      	str	r1, [sp, #12]
 800af4c:	2110      	movs	r1, #16
 800af4e:	9102      	str	r1, [sp, #8]
 800af50:	9201      	str	r2, [sp, #4]
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	462a      	mov	r2, r5
 800af58:	4621      	mov	r1, r4
 800af5a:	f7ff ff67 	bl	800ae2c <tcp_output_alloc_header_common>
 800af5e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d006      	beq.n	800af74 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800af6e:	441a      	add	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800af74:	697b      	ldr	r3, [r7, #20]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bdb0      	pop	{r4, r5, r7, pc}
 800af7e:	bf00      	nop
 800af80:	0801151c 	.word	0x0801151c
 800af84:	08011c24 	.word	0x08011c24
 800af88:	08011570 	.word	0x08011570

0800af8c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	4611      	mov	r1, r2
 800af98:	461a      	mov	r2, r3
 800af9a:	460b      	mov	r3, r1
 800af9c:	71fb      	strb	r3, [r7, #7]
 800af9e:	4613      	mov	r3, r2
 800afa0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d106      	bne.n	800afba <tcp_output_fill_options+0x2e>
 800afac:	4b12      	ldr	r3, [pc, #72]	@ (800aff8 <tcp_output_fill_options+0x6c>)
 800afae:	f240 7256 	movw	r2, #1878	@ 0x756
 800afb2:	4912      	ldr	r1, [pc, #72]	@ (800affc <tcp_output_fill_options+0x70>)
 800afb4:	4812      	ldr	r0, [pc, #72]	@ (800b000 <tcp_output_fill_options+0x74>)
 800afb6:	f003 ff3d 	bl	800ee34 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	3314      	adds	r3, #20
 800afc4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800afc6:	8bfb      	ldrh	r3, [r7, #30]
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	461a      	mov	r2, r3
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	f003 0304 	and.w	r3, r3, #4
 800afd4:	4413      	add	r3, r2
 800afd6:	3314      	adds	r3, #20
 800afd8:	69ba      	ldr	r2, [r7, #24]
 800afda:	4413      	add	r3, r2
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d006      	beq.n	800aff0 <tcp_output_fill_options+0x64>
 800afe2:	4b05      	ldr	r3, [pc, #20]	@ (800aff8 <tcp_output_fill_options+0x6c>)
 800afe4:	f240 7275 	movw	r2, #1909	@ 0x775
 800afe8:	4906      	ldr	r1, [pc, #24]	@ (800b004 <tcp_output_fill_options+0x78>)
 800afea:	4805      	ldr	r0, [pc, #20]	@ (800b000 <tcp_output_fill_options+0x74>)
 800afec:	f003 ff22 	bl	800ee34 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800aff0:	bf00      	nop
 800aff2:	3720      	adds	r7, #32
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	0801151c 	.word	0x0801151c
 800affc:	08011c4c 	.word	0x08011c4c
 800b000:	08011570 	.word	0x08011570
 800b004:	08011b44 	.word	0x08011b44

0800b008 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08a      	sub	sp, #40	@ 0x28
 800b00c:	af04      	add	r7, sp, #16
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
 800b014:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d106      	bne.n	800b02a <tcp_output_control_segment+0x22>
 800b01c:	4b1c      	ldr	r3, [pc, #112]	@ (800b090 <tcp_output_control_segment+0x88>)
 800b01e:	f240 7287 	movw	r2, #1927	@ 0x787
 800b022:	491c      	ldr	r1, [pc, #112]	@ (800b094 <tcp_output_control_segment+0x8c>)
 800b024:	481c      	ldr	r0, [pc, #112]	@ (800b098 <tcp_output_control_segment+0x90>)
 800b026:	f003 ff05 	bl	800ee34 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7fe faea 	bl	8009608 <tcp_route>
 800b034:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d102      	bne.n	800b042 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b03c:	23fc      	movs	r3, #252	@ 0xfc
 800b03e:	75fb      	strb	r3, [r7, #23]
 800b040:	e01c      	b.n	800b07c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d006      	beq.n	800b056 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	7adb      	ldrb	r3, [r3, #11]
 800b04c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	7a9b      	ldrb	r3, [r3, #10]
 800b052:	757b      	strb	r3, [r7, #21]
 800b054:	e003      	b.n	800b05e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b056:	23ff      	movs	r3, #255	@ 0xff
 800b058:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b05e:	7dba      	ldrb	r2, [r7, #22]
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	9302      	str	r3, [sp, #8]
 800b064:	2306      	movs	r3, #6
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	7d7b      	ldrb	r3, [r7, #21]
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	4613      	mov	r3, r2
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	68b8      	ldr	r0, [r7, #8]
 800b074:	f001 ff40 	bl	800cef8 <ip4_output_if>
 800b078:	4603      	mov	r3, r0
 800b07a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b07c:	68b8      	ldr	r0, [r7, #8]
 800b07e:	f7f9 feeb 	bl	8004e58 <pbuf_free>
  return err;
 800b082:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	0801151c 	.word	0x0801151c
 800b094:	08011c74 	.word	0x08011c74
 800b098:	08011570 	.word	0x08011570

0800b09c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b09c:	b590      	push	{r4, r7, lr}
 800b09e:	b08b      	sub	sp, #44	@ 0x2c
 800b0a0:	af04      	add	r7, sp, #16
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <tcp_rst+0x22>
 800b0b0:	4b1f      	ldr	r3, [pc, #124]	@ (800b130 <tcp_rst+0x94>)
 800b0b2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800b0b6:	491f      	ldr	r1, [pc, #124]	@ (800b134 <tcp_rst+0x98>)
 800b0b8:	481f      	ldr	r0, [pc, #124]	@ (800b138 <tcp_rst+0x9c>)
 800b0ba:	f003 febb 	bl	800ee34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d106      	bne.n	800b0d2 <tcp_rst+0x36>
 800b0c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b130 <tcp_rst+0x94>)
 800b0c6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800b0ca:	491c      	ldr	r1, [pc, #112]	@ (800b13c <tcp_rst+0xa0>)
 800b0cc:	481a      	ldr	r0, [pc, #104]	@ (800b138 <tcp_rst+0x9c>)
 800b0ce:	f003 feb1 	bl	800ee34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b0d6:	f246 0308 	movw	r3, #24584	@ 0x6008
 800b0da:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b0dc:	7dfb      	ldrb	r3, [r7, #23]
 800b0de:	b29c      	uxth	r4, r3
 800b0e0:	68b8      	ldr	r0, [r7, #8]
 800b0e2:	f7f8 fbd0 	bl	8003886 <lwip_htonl>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	8abb      	ldrh	r3, [r7, #20]
 800b0ea:	9303      	str	r3, [sp, #12]
 800b0ec:	2314      	movs	r3, #20
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b0f2:	9301      	str	r3, [sp, #4]
 800b0f4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff fe94 	bl	800ae2c <tcp_output_alloc_header_common>
 800b104:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00c      	beq.n	800b126 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	2200      	movs	r2, #0
 800b110:	6939      	ldr	r1, [r7, #16]
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7ff ff3a 	bl	800af8c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	6939      	ldr	r1, [r7, #16]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7ff ff72 	bl	800b008 <tcp_output_control_segment>
 800b124:	e000      	b.n	800b128 <tcp_rst+0x8c>
    return;
 800b126:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b128:	371c      	adds	r7, #28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd90      	pop	{r4, r7, pc}
 800b12e:	bf00      	nop
 800b130:	0801151c 	.word	0x0801151c
 800b134:	08011ca0 	.word	0x08011ca0
 800b138:	08011570 	.word	0x08011570
 800b13c:	08011cbc 	.word	0x08011cbc

0800b140 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b140:	b590      	push	{r4, r7, lr}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d106      	bne.n	800b164 <tcp_send_empty_ack+0x24>
 800b156:	4b28      	ldr	r3, [pc, #160]	@ (800b1f8 <tcp_send_empty_ack+0xb8>)
 800b158:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800b15c:	4927      	ldr	r1, [pc, #156]	@ (800b1fc <tcp_send_empty_ack+0xbc>)
 800b15e:	4828      	ldr	r0, [pc, #160]	@ (800b200 <tcp_send_empty_ack+0xc0>)
 800b160:	f003 fe68 	bl	800ee34 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b164:	7dfb      	ldrb	r3, [r7, #23]
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	f003 0304 	and.w	r3, r3, #4
 800b16e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b170:	7d7b      	ldrb	r3, [r7, #21]
 800b172:	b29c      	uxth	r4, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b178:	4618      	mov	r0, r3
 800b17a:	f7f8 fb84 	bl	8003886 <lwip_htonl>
 800b17e:	4603      	mov	r3, r0
 800b180:	2200      	movs	r2, #0
 800b182:	4621      	mov	r1, r4
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7ff fec3 	bl	800af10 <tcp_output_alloc_header>
 800b18a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d109      	bne.n	800b1a6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	8b5b      	ldrh	r3, [r3, #26]
 800b196:	f043 0303 	orr.w	r3, r3, #3
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b1a0:	f06f 0301 	mvn.w	r3, #1
 800b1a4:	e023      	b.n	800b1ee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b1a6:	7dbb      	ldrb	r3, [r7, #22]
 800b1a8:	7dfa      	ldrb	r2, [r7, #23]
 800b1aa:	6939      	ldr	r1, [r7, #16]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff feed 	bl	800af8c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	6939      	ldr	r1, [r7, #16]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff ff24 	bl	800b008 <tcp_output_control_segment>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d007      	beq.n	800b1dc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	8b5b      	ldrh	r3, [r3, #26]
 800b1d0:	f043 0303 	orr.w	r3, r3, #3
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	835a      	strh	r2, [r3, #26]
 800b1da:	e006      	b.n	800b1ea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	8b5b      	ldrh	r3, [r3, #26]
 800b1e0:	f023 0303 	bic.w	r3, r3, #3
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	371c      	adds	r7, #28
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd90      	pop	{r4, r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	0801151c 	.word	0x0801151c
 800b1fc:	08011cd8 	.word	0x08011cd8
 800b200:	08011570 	.word	0x08011570

0800b204 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b204:	b590      	push	{r4, r7, lr}
 800b206:	b087      	sub	sp, #28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b20c:	2300      	movs	r3, #0
 800b20e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d106      	bne.n	800b224 <tcp_keepalive+0x20>
 800b216:	4b18      	ldr	r3, [pc, #96]	@ (800b278 <tcp_keepalive+0x74>)
 800b218:	f640 0224 	movw	r2, #2084	@ 0x824
 800b21c:	4917      	ldr	r1, [pc, #92]	@ (800b27c <tcp_keepalive+0x78>)
 800b21e:	4818      	ldr	r0, [pc, #96]	@ (800b280 <tcp_keepalive+0x7c>)
 800b220:	f003 fe08 	bl	800ee34 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	b29c      	uxth	r4, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b22c:	3b01      	subs	r3, #1
 800b22e:	4618      	mov	r0, r3
 800b230:	f7f8 fb29 	bl	8003886 <lwip_htonl>
 800b234:	4603      	mov	r3, r0
 800b236:	2200      	movs	r2, #0
 800b238:	4621      	mov	r1, r4
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7ff fe68 	bl	800af10 <tcp_output_alloc_header>
 800b240:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d102      	bne.n	800b24e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b248:	f04f 33ff 	mov.w	r3, #4294967295
 800b24c:	e010      	b.n	800b270 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	2200      	movs	r2, #0
 800b252:	6939      	ldr	r1, [r7, #16]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff fe99 	bl	800af8c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3304      	adds	r3, #4
 800b260:	6939      	ldr	r1, [r7, #16]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff fed0 	bl	800b008 <tcp_output_control_segment>
 800b268:	4603      	mov	r3, r0
 800b26a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b26c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b270:	4618      	mov	r0, r3
 800b272:	371c      	adds	r7, #28
 800b274:	46bd      	mov	sp, r7
 800b276:	bd90      	pop	{r4, r7, pc}
 800b278:	0801151c 	.word	0x0801151c
 800b27c:	08011cf8 	.word	0x08011cf8
 800b280:	08011570 	.word	0x08011570

0800b284 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b284:	b590      	push	{r4, r7, lr}
 800b286:	b08b      	sub	sp, #44	@ 0x2c
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b28c:	2300      	movs	r3, #0
 800b28e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d106      	bne.n	800b2a6 <tcp_zero_window_probe+0x22>
 800b298:	4b4c      	ldr	r3, [pc, #304]	@ (800b3cc <tcp_zero_window_probe+0x148>)
 800b29a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800b29e:	494c      	ldr	r1, [pc, #304]	@ (800b3d0 <tcp_zero_window_probe+0x14c>)
 800b2a0:	484c      	ldr	r0, [pc, #304]	@ (800b3d4 <tcp_zero_window_probe+0x150>)
 800b2a2:	f003 fdc7 	bl	800ee34 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2aa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e086      	b.n	800b3c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b2bc:	2bff      	cmp	r3, #255	@ 0xff
 800b2be:	d007      	beq.n	800b2d0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	899b      	ldrh	r3, [r3, #12]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7f8 fabf 	bl	800385c <lwip_htons>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d005      	beq.n	800b2f6 <tcp_zero_window_probe+0x72>
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	891b      	ldrh	r3, [r3, #8]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <tcp_zero_window_probe+0x72>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <tcp_zero_window_probe+0x74>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b2fa:	7ffb      	ldrb	r3, [r7, #31]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bf0c      	ite	eq
 800b300:	2301      	moveq	r3, #1
 800b302:	2300      	movne	r3, #0
 800b304:	b2db      	uxtb	r3, r3
 800b306:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b30c:	b299      	uxth	r1, r3
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	8bba      	ldrh	r2, [r7, #28]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff fdfa 	bl	800af10 <tcp_output_alloc_header>
 800b31c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d102      	bne.n	800b32a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b324:	f04f 33ff 	mov.w	r3, #4294967295
 800b328:	e04c      	b.n	800b3c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b330:	7ffb      	ldrb	r3, [r7, #31]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d011      	beq.n	800b35a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	899b      	ldrh	r3, [r3, #12]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	b21b      	sxth	r3, r3
 800b33e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b342:	b21c      	sxth	r4, r3
 800b344:	2011      	movs	r0, #17
 800b346:	f7f8 fa89 	bl	800385c <lwip_htons>
 800b34a:	4603      	mov	r3, r0
 800b34c:	b21b      	sxth	r3, r3
 800b34e:	4323      	orrs	r3, r4
 800b350:	b21b      	sxth	r3, r3
 800b352:	b29a      	uxth	r2, r3
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	819a      	strh	r2, [r3, #12]
 800b358:	e010      	b.n	800b37c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	3314      	adds	r3, #20
 800b360:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	6858      	ldr	r0, [r3, #4]
 800b366:	6a3b      	ldr	r3, [r7, #32]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	891a      	ldrh	r2, [r3, #8]
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	891b      	ldrh	r3, [r3, #8]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	b29b      	uxth	r3, r3
 800b374:	2201      	movs	r2, #1
 800b376:	6939      	ldr	r1, [r7, #16]
 800b378:	f7f9 ff58 	bl	800522c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b37c:	6a3b      	ldr	r3, [r7, #32]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	4618      	mov	r0, r3
 800b384:	f7f8 fa7f 	bl	8003886 <lwip_htonl>
 800b388:	4603      	mov	r3, r0
 800b38a:	3301      	adds	r3, #1
 800b38c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	da02      	bge.n	800b3a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	69b9      	ldr	r1, [r7, #24]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7ff fdef 	bl	800af8c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	69b9      	ldr	r1, [r7, #24]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff fe26 	bl	800b008 <tcp_output_control_segment>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b3c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	372c      	adds	r7, #44	@ 0x2c
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd90      	pop	{r4, r7, pc}
 800b3cc:	0801151c 	.word	0x0801151c
 800b3d0:	08011d14 	.word	0x08011d14
 800b3d4:	08011570 	.word	0x08011570

0800b3d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b3e0:	f7fa f812 	bl	8005408 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b410 <tcpip_tcp_timer+0x38>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d103      	bne.n	800b3f4 <tcpip_tcp_timer+0x1c>
 800b3ec:	4b09      	ldr	r3, [pc, #36]	@ (800b414 <tcpip_tcp_timer+0x3c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4908      	ldr	r1, [pc, #32]	@ (800b418 <tcpip_tcp_timer+0x40>)
 800b3f8:	20fa      	movs	r0, #250	@ 0xfa
 800b3fa:	f000 f8f3 	bl	800b5e4 <sys_timeout>
 800b3fe:	e003      	b.n	800b408 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b400:	4b06      	ldr	r3, [pc, #24]	@ (800b41c <tcpip_tcp_timer+0x44>)
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
  }
}
 800b406:	bf00      	nop
 800b408:	bf00      	nop
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	20003a4c 	.word	0x20003a4c
 800b414:	20003a50 	.word	0x20003a50
 800b418:	0800b3d9 	.word	0x0800b3d9
 800b41c:	20003a98 	.word	0x20003a98

0800b420 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b424:	4b0a      	ldr	r3, [pc, #40]	@ (800b450 <tcp_timer_needed+0x30>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10f      	bne.n	800b44c <tcp_timer_needed+0x2c>
 800b42c:	4b09      	ldr	r3, [pc, #36]	@ (800b454 <tcp_timer_needed+0x34>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d103      	bne.n	800b43c <tcp_timer_needed+0x1c>
 800b434:	4b08      	ldr	r3, [pc, #32]	@ (800b458 <tcp_timer_needed+0x38>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d007      	beq.n	800b44c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b43c:	4b04      	ldr	r3, [pc, #16]	@ (800b450 <tcp_timer_needed+0x30>)
 800b43e:	2201      	movs	r2, #1
 800b440:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b442:	2200      	movs	r2, #0
 800b444:	4905      	ldr	r1, [pc, #20]	@ (800b45c <tcp_timer_needed+0x3c>)
 800b446:	20fa      	movs	r0, #250	@ 0xfa
 800b448:	f000 f8cc 	bl	800b5e4 <sys_timeout>
  }
}
 800b44c:	bf00      	nop
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20003a98 	.word	0x20003a98
 800b454:	20003a4c 	.word	0x20003a4c
 800b458:	20003a50 	.word	0x20003a50
 800b45c:	0800b3d9 	.word	0x0800b3d9

0800b460 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b46c:	2006      	movs	r0, #6
 800b46e:	f7f8 fea3 	bl	80041b8 <memp_malloc>
 800b472:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d109      	bne.n	800b48e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d151      	bne.n	800b524 <sys_timeout_abs+0xc4>
 800b480:	4b2a      	ldr	r3, [pc, #168]	@ (800b52c <sys_timeout_abs+0xcc>)
 800b482:	22be      	movs	r2, #190	@ 0xbe
 800b484:	492a      	ldr	r1, [pc, #168]	@ (800b530 <sys_timeout_abs+0xd0>)
 800b486:	482b      	ldr	r0, [pc, #172]	@ (800b534 <sys_timeout_abs+0xd4>)
 800b488:	f003 fcd4 	bl	800ee34 <iprintf>
    return;
 800b48c:	e04a      	b.n	800b524 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2200      	movs	r2, #0
 800b492:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	68ba      	ldr	r2, [r7, #8]
 800b498:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b4a6:	4b24      	ldr	r3, [pc, #144]	@ (800b538 <sys_timeout_abs+0xd8>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d103      	bne.n	800b4b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b4ae:	4a22      	ldr	r2, [pc, #136]	@ (800b538 <sys_timeout_abs+0xd8>)
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	6013      	str	r3, [r2, #0]
    return;
 800b4b4:	e037      	b.n	800b526 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	4b1f      	ldr	r3, [pc, #124]	@ (800b538 <sys_timeout_abs+0xd8>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	0fdb      	lsrs	r3, r3, #31
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d007      	beq.n	800b4de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b538 <sys_timeout_abs+0xd8>)
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b4d6:	4a18      	ldr	r2, [pc, #96]	@ (800b538 <sys_timeout_abs+0xd8>)
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	e023      	b.n	800b526 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b4de:	4b16      	ldr	r3, [pc, #88]	@ (800b538 <sys_timeout_abs+0xd8>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	e01a      	b.n	800b51c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00b      	beq.n	800b506 <sys_timeout_abs+0xa6>
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	685a      	ldr	r2, [r3, #4]
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	0fdb      	lsrs	r3, r3, #31
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d007      	beq.n	800b516 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	601a      	str	r2, [r3, #0]
        break;
 800b514:	e007      	b.n	800b526 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	617b      	str	r3, [r7, #20]
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1e1      	bne.n	800b4e6 <sys_timeout_abs+0x86>
 800b522:	e000      	b.n	800b526 <sys_timeout_abs+0xc6>
    return;
 800b524:	bf00      	nop
      }
    }
  }
}
 800b526:	3718      	adds	r7, #24
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	08011d38 	.word	0x08011d38
 800b530:	08011d6c 	.word	0x08011d6c
 800b534:	08011dac 	.word	0x08011dac
 800b538:	20003a90 	.word	0x20003a90

0800b53c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	4798      	blx	r3

  now = sys_now();
 800b54e:	f002 fe91 	bl	800e274 <sys_now>
 800b552:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	4b0f      	ldr	r3, [pc, #60]	@ (800b598 <lwip_cyclic_timer+0x5c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4413      	add	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	1ad3      	subs	r3, r2, r3
 800b566:	0fdb      	lsrs	r3, r3, #31
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d009      	beq.n	800b586 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	4413      	add	r3, r2
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	4907      	ldr	r1, [pc, #28]	@ (800b59c <lwip_cyclic_timer+0x60>)
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff ff6e 	bl	800b460 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b584:	e004      	b.n	800b590 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	4904      	ldr	r1, [pc, #16]	@ (800b59c <lwip_cyclic_timer+0x60>)
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f7ff ff68 	bl	800b460 <sys_timeout_abs>
}
 800b590:	bf00      	nop
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	20003a94 	.word	0x20003a94
 800b59c:	0800b53d 	.word	0x0800b53d

0800b5a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	607b      	str	r3, [r7, #4]
 800b5aa:	e00e      	b.n	800b5ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b5ac:	4a0b      	ldr	r2, [pc, #44]	@ (800b5dc <sys_timeouts_init+0x3c>)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	4a08      	ldr	r2, [pc, #32]	@ (800b5dc <sys_timeouts_init+0x3c>)
 800b5ba:	4413      	add	r3, r2
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4908      	ldr	r1, [pc, #32]	@ (800b5e0 <sys_timeouts_init+0x40>)
 800b5c0:	f000 f810 	bl	800b5e4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	607b      	str	r3, [r7, #4]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d9ed      	bls.n	800b5ac <sys_timeouts_init+0xc>
  }
}
 800b5d0:	bf00      	nop
 800b5d2:	bf00      	nop
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	08014468 	.word	0x08014468
 800b5e0:	0800b53d 	.word	0x0800b53d

0800b5e4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5f6:	d306      	bcc.n	800b606 <sys_timeout+0x22>
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b624 <sys_timeout+0x40>)
 800b5fa:	f240 1229 	movw	r2, #297	@ 0x129
 800b5fe:	490a      	ldr	r1, [pc, #40]	@ (800b628 <sys_timeout+0x44>)
 800b600:	480a      	ldr	r0, [pc, #40]	@ (800b62c <sys_timeout+0x48>)
 800b602:	f003 fc17 	bl	800ee34 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b606:	f002 fe35 	bl	800e274 <sys_now>
 800b60a:	4602      	mov	r2, r0
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4413      	add	r3, r2
 800b610:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	68b9      	ldr	r1, [r7, #8]
 800b616:	6978      	ldr	r0, [r7, #20]
 800b618:	f7ff ff22 	bl	800b460 <sys_timeout_abs>
#endif
}
 800b61c:	bf00      	nop
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	08011d38 	.word	0x08011d38
 800b628:	08011dd4 	.word	0x08011dd4
 800b62c:	08011dac 	.word	0x08011dac

0800b630 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b636:	f002 fe1d 	bl	800e274 <sys_now>
 800b63a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b63c:	4b1a      	ldr	r3, [pc, #104]	@ (800b6a8 <sys_check_timeouts+0x78>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <sys_check_timeouts+0x1a>
 800b646:	f7f9 f8cd 	bl	80047e4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b64a:	4b18      	ldr	r3, [pc, #96]	@ (800b6ac <sys_check_timeouts+0x7c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d022      	beq.n	800b69c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	0fdb      	lsrs	r3, r3, #31
 800b660:	f003 0301 	and.w	r3, r3, #1
 800b664:	b2db      	uxtb	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	d11a      	bne.n	800b6a0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a0f      	ldr	r2, [pc, #60]	@ (800b6ac <sys_check_timeouts+0x7c>)
 800b670:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	4a0b      	ldr	r2, [pc, #44]	@ (800b6b0 <sys_check_timeouts+0x80>)
 800b684:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b686:	68b9      	ldr	r1, [r7, #8]
 800b688:	2006      	movs	r0, #6
 800b68a:	f7f8 fe05 	bl	8004298 <memp_free>
    if (handler != NULL) {
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d0d3      	beq.n	800b63c <sys_check_timeouts+0xc>
      handler(arg);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6838      	ldr	r0, [r7, #0]
 800b698:	4798      	blx	r3
  do {
 800b69a:	e7cf      	b.n	800b63c <sys_check_timeouts+0xc>
      return;
 800b69c:	bf00      	nop
 800b69e:	e000      	b.n	800b6a2 <sys_check_timeouts+0x72>
      return;
 800b6a0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	20003a3d 	.word	0x20003a3d
 800b6ac:	20003a90 	.word	0x20003a90
 800b6b0:	20003a94 	.word	0x20003a94

0800b6b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b6b8:	f003 fabc 	bl	800ec34 <rand>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	4b01      	ldr	r3, [pc, #4]	@ (800b6d4 <udp_init+0x20>)
 800b6ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b6d0:	bf00      	nop
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	2000000c 	.word	0x2000000c

0800b6d8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d105      	bne.n	800b6f8 <udp_input_local_match+0x20>
 800b6ec:	4b27      	ldr	r3, [pc, #156]	@ (800b78c <udp_input_local_match+0xb4>)
 800b6ee:	2287      	movs	r2, #135	@ 0x87
 800b6f0:	4927      	ldr	r1, [pc, #156]	@ (800b790 <udp_input_local_match+0xb8>)
 800b6f2:	4828      	ldr	r0, [pc, #160]	@ (800b794 <udp_input_local_match+0xbc>)
 800b6f4:	f003 fb9e 	bl	800ee34 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d105      	bne.n	800b70a <udp_input_local_match+0x32>
 800b6fe:	4b23      	ldr	r3, [pc, #140]	@ (800b78c <udp_input_local_match+0xb4>)
 800b700:	2288      	movs	r2, #136	@ 0x88
 800b702:	4925      	ldr	r1, [pc, #148]	@ (800b798 <udp_input_local_match+0xc0>)
 800b704:	4823      	ldr	r0, [pc, #140]	@ (800b794 <udp_input_local_match+0xbc>)
 800b706:	f003 fb95 	bl	800ee34 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	7a1b      	ldrb	r3, [r3, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00b      	beq.n	800b72a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	7a1a      	ldrb	r2, [r3, #8]
 800b716:	4b21      	ldr	r3, [pc, #132]	@ (800b79c <udp_input_local_match+0xc4>)
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b71e:	3301      	adds	r3, #1
 800b720:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b722:	429a      	cmp	r2, r3
 800b724:	d001      	beq.n	800b72a <udp_input_local_match+0x52>
    return 0;
 800b726:	2300      	movs	r3, #0
 800b728:	e02b      	b.n	800b782 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b72a:	79fb      	ldrb	r3, [r7, #7]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d018      	beq.n	800b762 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d013      	beq.n	800b75e <udp_input_local_match+0x86>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00f      	beq.n	800b75e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b73e:	4b17      	ldr	r3, [pc, #92]	@ (800b79c <udp_input_local_match+0xc4>)
 800b740:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b746:	d00a      	beq.n	800b75e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	4b13      	ldr	r3, [pc, #76]	@ (800b79c <udp_input_local_match+0xc4>)
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	405a      	eors	r2, r3
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	3308      	adds	r3, #8
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d110      	bne.n	800b780 <udp_input_local_match+0xa8>
          return 1;
 800b75e:	2301      	movs	r3, #1
 800b760:	e00f      	b.n	800b782 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d009      	beq.n	800b77c <udp_input_local_match+0xa4>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d005      	beq.n	800b77c <udp_input_local_match+0xa4>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	4b09      	ldr	r3, [pc, #36]	@ (800b79c <udp_input_local_match+0xc4>)
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d101      	bne.n	800b780 <udp_input_local_match+0xa8>
        return 1;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e000      	b.n	800b782 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	08011e20 	.word	0x08011e20
 800b790:	08011e50 	.word	0x08011e50
 800b794:	08011e74 	.word	0x08011e74
 800b798:	08011e9c 	.word	0x08011e9c
 800b79c:	200004d0 	.word	0x200004d0

0800b7a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b7a0:	b590      	push	{r4, r7, lr}
 800b7a2:	b08d      	sub	sp, #52	@ 0x34
 800b7a4:	af02      	add	r7, sp, #8
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d105      	bne.n	800b7c0 <udp_input+0x20>
 800b7b4:	4b7c      	ldr	r3, [pc, #496]	@ (800b9a8 <udp_input+0x208>)
 800b7b6:	22cf      	movs	r2, #207	@ 0xcf
 800b7b8:	497c      	ldr	r1, [pc, #496]	@ (800b9ac <udp_input+0x20c>)
 800b7ba:	487d      	ldr	r0, [pc, #500]	@ (800b9b0 <udp_input+0x210>)
 800b7bc:	f003 fb3a 	bl	800ee34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d105      	bne.n	800b7d2 <udp_input+0x32>
 800b7c6:	4b78      	ldr	r3, [pc, #480]	@ (800b9a8 <udp_input+0x208>)
 800b7c8:	22d0      	movs	r2, #208	@ 0xd0
 800b7ca:	497a      	ldr	r1, [pc, #488]	@ (800b9b4 <udp_input+0x214>)
 800b7cc:	4878      	ldr	r0, [pc, #480]	@ (800b9b0 <udp_input+0x210>)
 800b7ce:	f003 fb31 	bl	800ee34 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	895b      	ldrh	r3, [r3, #10]
 800b7d6:	2b07      	cmp	r3, #7
 800b7d8:	d803      	bhi.n	800b7e2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7f9 fb3c 	bl	8004e58 <pbuf_free>
    goto end;
 800b7e0:	e0de      	b.n	800b9a0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b7e8:	4b73      	ldr	r3, [pc, #460]	@ (800b9b8 <udp_input+0x218>)
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	4a72      	ldr	r2, [pc, #456]	@ (800b9b8 <udp_input+0x218>)
 800b7ee:	6812      	ldr	r2, [r2, #0]
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f001 fc58 	bl	800d0a8 <ip4_addr_isbroadcast_u32>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	881b      	ldrh	r3, [r3, #0]
 800b800:	b29b      	uxth	r3, r3
 800b802:	4618      	mov	r0, r3
 800b804:	f7f8 f82a 	bl	800385c <lwip_htons>
 800b808:	4603      	mov	r3, r0
 800b80a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	885b      	ldrh	r3, [r3, #2]
 800b810:	b29b      	uxth	r3, r3
 800b812:	4618      	mov	r0, r3
 800b814:	f7f8 f822 	bl	800385c <lwip_htons>
 800b818:	4603      	mov	r3, r0
 800b81a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b81c:	2300      	movs	r3, #0
 800b81e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800b820:	2300      	movs	r3, #0
 800b822:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b824:	2300      	movs	r3, #0
 800b826:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b828:	4b64      	ldr	r3, [pc, #400]	@ (800b9bc <udp_input+0x21c>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b82e:	e054      	b.n	800b8da <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b832:	8a5b      	ldrh	r3, [r3, #18]
 800b834:	89fa      	ldrh	r2, [r7, #14]
 800b836:	429a      	cmp	r2, r3
 800b838:	d14a      	bne.n	800b8d0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b83a:	7cfb      	ldrb	r3, [r7, #19]
 800b83c:	461a      	mov	r2, r3
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b842:	f7ff ff49 	bl	800b6d8 <udp_input_local_match>
 800b846:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d041      	beq.n	800b8d0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84e:	7c1b      	ldrb	r3, [r3, #16]
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	d11d      	bne.n	800b894 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b860:	61fb      	str	r3, [r7, #28]
 800b862:	e017      	b.n	800b894 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b864:	7cfb      	ldrb	r3, [r7, #19]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d014      	beq.n	800b894 <udp_input+0xf4>
 800b86a:	4b53      	ldr	r3, [pc, #332]	@ (800b9b8 <udp_input+0x218>)
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b872:	d10f      	bne.n	800b894 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	3304      	adds	r3, #4
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d008      	beq.n	800b894 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	3304      	adds	r3, #4
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d101      	bne.n	800b894 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b892:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b896:	8a9b      	ldrh	r3, [r3, #20]
 800b898:	8a3a      	ldrh	r2, [r7, #16]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d118      	bne.n	800b8d0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d005      	beq.n	800b8b2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a8:	685a      	ldr	r2, [r3, #4]
 800b8aa:	4b43      	ldr	r3, [pc, #268]	@ (800b9b8 <udp_input+0x218>)
 800b8ac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d10e      	bne.n	800b8d0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d014      	beq.n	800b8e2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b8c0:	4b3e      	ldr	r3, [pc, #248]	@ (800b9bc <udp_input+0x21c>)
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b8c8:	4a3c      	ldr	r2, [pc, #240]	@ (800b9bc <udp_input+0x21c>)
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8cc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b8ce:	e008      	b.n	800b8e2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d1a7      	bne.n	800b830 <udp_input+0x90>
 800b8e0:	e000      	b.n	800b8e4 <udp_input+0x144>
        break;
 800b8e2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <udp_input+0x14e>
    pcb = uncon_pcb;
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <udp_input+0x15a>
    for_us = 1;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	76fb      	strb	r3, [r7, #27]
 800b8f8:	e00a      	b.n	800b910 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	4b2d      	ldr	r3, [pc, #180]	@ (800b9b8 <udp_input+0x218>)
 800b902:	695b      	ldr	r3, [r3, #20]
 800b904:	429a      	cmp	r2, r3
 800b906:	bf0c      	ite	eq
 800b908:	2301      	moveq	r3, #1
 800b90a:	2300      	movne	r3, #0
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b910:	7efb      	ldrb	r3, [r7, #27]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d041      	beq.n	800b99a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b916:	2108      	movs	r1, #8
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7f9 fa17 	bl	8004d4c <pbuf_remove_header>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00a      	beq.n	800b93a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b924:	4b20      	ldr	r3, [pc, #128]	@ (800b9a8 <udp_input+0x208>)
 800b926:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800b92a:	4925      	ldr	r1, [pc, #148]	@ (800b9c0 <udp_input+0x220>)
 800b92c:	4820      	ldr	r0, [pc, #128]	@ (800b9b0 <udp_input+0x210>)
 800b92e:	f003 fa81 	bl	800ee34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7f9 fa90 	bl	8004e58 <pbuf_free>
      goto end;
 800b938:	e032      	b.n	800b9a0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d012      	beq.n	800b966 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00a      	beq.n	800b95e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94a:	699c      	ldr	r4, [r3, #24]
 800b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94e:	69d8      	ldr	r0, [r3, #28]
 800b950:	8a3b      	ldrh	r3, [r7, #16]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	4b1b      	ldr	r3, [pc, #108]	@ (800b9c4 <udp_input+0x224>)
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b95a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b95c:	e021      	b.n	800b9a2 <udp_input+0x202>
        pbuf_free(p);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7f9 fa7a 	bl	8004e58 <pbuf_free>
        goto end;
 800b964:	e01c      	b.n	800b9a0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b966:	7cfb      	ldrb	r3, [r7, #19]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d112      	bne.n	800b992 <udp_input+0x1f2>
 800b96c:	4b12      	ldr	r3, [pc, #72]	@ (800b9b8 <udp_input+0x218>)
 800b96e:	695b      	ldr	r3, [r3, #20]
 800b970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b974:	2be0      	cmp	r3, #224	@ 0xe0
 800b976:	d00c      	beq.n	800b992 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b978:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b8 <udp_input+0x218>)
 800b97a:	899b      	ldrh	r3, [r3, #12]
 800b97c:	3308      	adds	r3, #8
 800b97e:	b29b      	uxth	r3, r3
 800b980:	b21b      	sxth	r3, r3
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7f9 fa54 	bl	8004e32 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b98a:	2103      	movs	r1, #3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f001 f86b 	bl	800ca68 <icmp_dest_unreach>
      pbuf_free(p);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7f9 fa60 	bl	8004e58 <pbuf_free>
  return;
 800b998:	e003      	b.n	800b9a2 <udp_input+0x202>
    pbuf_free(p);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7f9 fa5c 	bl	8004e58 <pbuf_free>
  return;
 800b9a0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b9a2:	372c      	adds	r7, #44	@ 0x2c
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd90      	pop	{r4, r7, pc}
 800b9a8:	08011e20 	.word	0x08011e20
 800b9ac:	08011ec4 	.word	0x08011ec4
 800b9b0:	08011e74 	.word	0x08011e74
 800b9b4:	08011edc 	.word	0x08011edc
 800b9b8:	200004d0 	.word	0x200004d0
 800b9bc:	20003a9c 	.word	0x20003a9c
 800b9c0:	08011ef8 	.word	0x08011ef8
 800b9c4:	200004e0 	.word	0x200004e0

0800b9c8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d01e      	beq.n	800ba16 <udp_netif_ip_addr_changed+0x4e>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d01a      	beq.n	800ba16 <udp_netif_ip_addr_changed+0x4e>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d017      	beq.n	800ba16 <udp_netif_ip_addr_changed+0x4e>
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d013      	beq.n	800ba16 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800ba24 <udp_netif_ip_addr_changed+0x5c>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	e00c      	b.n	800ba10 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d103      	bne.n	800ba0a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d1ef      	bne.n	800b9f6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ba16:	bf00      	nop
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	20003a9c 	.word	0x20003a9c

0800ba28 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ba30:	4915      	ldr	r1, [pc, #84]	@ (800ba88 <etharp_free_entry+0x60>)
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	4613      	mov	r3, r2
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	4413      	add	r3, r2
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	440b      	add	r3, r1
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d013      	beq.n	800ba6c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ba44:	4910      	ldr	r1, [pc, #64]	@ (800ba88 <etharp_free_entry+0x60>)
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	4413      	add	r3, r2
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	440b      	add	r3, r1
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7f9 f9ff 	bl	8004e58 <pbuf_free>
    arp_table[i].q = NULL;
 800ba5a:	490b      	ldr	r1, [pc, #44]	@ (800ba88 <etharp_free_entry+0x60>)
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	4413      	add	r3, r2
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	440b      	add	r3, r1
 800ba68:	2200      	movs	r2, #0
 800ba6a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ba6c:	4906      	ldr	r1, [pc, #24]	@ (800ba88 <etharp_free_entry+0x60>)
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	4613      	mov	r3, r2
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	4413      	add	r3, r2
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	440b      	add	r3, r1
 800ba7a:	3314      	adds	r3, #20
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ba80:	bf00      	nop
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	20003aa0 	.word	0x20003aa0

0800ba8c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba92:	2300      	movs	r3, #0
 800ba94:	607b      	str	r3, [r7, #4]
 800ba96:	e096      	b.n	800bbc6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ba98:	494f      	ldr	r1, [pc, #316]	@ (800bbd8 <etharp_tmr+0x14c>)
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	4413      	add	r3, r2
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	440b      	add	r3, r1
 800baa6:	3314      	adds	r3, #20
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800baac:	78fb      	ldrb	r3, [r7, #3]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 8086 	beq.w	800bbc0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bab4:	4948      	ldr	r1, [pc, #288]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	4613      	mov	r3, r2
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	4413      	add	r3, r2
 800babe:	00db      	lsls	r3, r3, #3
 800bac0:	440b      	add	r3, r1
 800bac2:	3312      	adds	r3, #18
 800bac4:	881b      	ldrh	r3, [r3, #0]
 800bac6:	3301      	adds	r3, #1
 800bac8:	b298      	uxth	r0, r3
 800baca:	4943      	ldr	r1, [pc, #268]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	4613      	mov	r3, r2
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	4413      	add	r3, r2
 800bad4:	00db      	lsls	r3, r3, #3
 800bad6:	440b      	add	r3, r1
 800bad8:	3312      	adds	r3, #18
 800bada:	4602      	mov	r2, r0
 800badc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bade:	493e      	ldr	r1, [pc, #248]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	4613      	mov	r3, r2
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	4413      	add	r3, r2
 800bae8:	00db      	lsls	r3, r3, #3
 800baea:	440b      	add	r3, r1
 800baec:	3312      	adds	r3, #18
 800baee:	881b      	ldrh	r3, [r3, #0]
 800baf0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800baf4:	d215      	bcs.n	800bb22 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800baf6:	4938      	ldr	r1, [pc, #224]	@ (800bbd8 <etharp_tmr+0x14c>)
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	4613      	mov	r3, r2
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	4413      	add	r3, r2
 800bb00:	00db      	lsls	r3, r3, #3
 800bb02:	440b      	add	r3, r1
 800bb04:	3314      	adds	r3, #20
 800bb06:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d10e      	bne.n	800bb2a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bb0c:	4932      	ldr	r1, [pc, #200]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	4613      	mov	r3, r2
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	4413      	add	r3, r2
 800bb16:	00db      	lsls	r3, r3, #3
 800bb18:	440b      	add	r3, r1
 800bb1a:	3312      	adds	r3, #18
 800bb1c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bb1e:	2b04      	cmp	r3, #4
 800bb20:	d903      	bls.n	800bb2a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff ff80 	bl	800ba28 <etharp_free_entry>
 800bb28:	e04a      	b.n	800bbc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bb2a:	492b      	ldr	r1, [pc, #172]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	005b      	lsls	r3, r3, #1
 800bb32:	4413      	add	r3, r2
 800bb34:	00db      	lsls	r3, r3, #3
 800bb36:	440b      	add	r3, r1
 800bb38:	3314      	adds	r3, #20
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d10a      	bne.n	800bb56 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bb40:	4925      	ldr	r1, [pc, #148]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	4613      	mov	r3, r2
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	4413      	add	r3, r2
 800bb4a:	00db      	lsls	r3, r3, #3
 800bb4c:	440b      	add	r3, r1
 800bb4e:	3314      	adds	r3, #20
 800bb50:	2204      	movs	r2, #4
 800bb52:	701a      	strb	r2, [r3, #0]
 800bb54:	e034      	b.n	800bbc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bb56:	4920      	ldr	r1, [pc, #128]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	005b      	lsls	r3, r3, #1
 800bb5e:	4413      	add	r3, r2
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	440b      	add	r3, r1
 800bb64:	3314      	adds	r3, #20
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b04      	cmp	r3, #4
 800bb6a:	d10a      	bne.n	800bb82 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bb6c:	491a      	ldr	r1, [pc, #104]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	4613      	mov	r3, r2
 800bb72:	005b      	lsls	r3, r3, #1
 800bb74:	4413      	add	r3, r2
 800bb76:	00db      	lsls	r3, r3, #3
 800bb78:	440b      	add	r3, r1
 800bb7a:	3314      	adds	r3, #20
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	701a      	strb	r2, [r3, #0]
 800bb80:	e01e      	b.n	800bbc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bb82:	4915      	ldr	r1, [pc, #84]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	4613      	mov	r3, r2
 800bb88:	005b      	lsls	r3, r3, #1
 800bb8a:	4413      	add	r3, r2
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	440b      	add	r3, r1
 800bb90:	3314      	adds	r3, #20
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d113      	bne.n	800bbc0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bb98:	490f      	ldr	r1, [pc, #60]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	005b      	lsls	r3, r3, #1
 800bba0:	4413      	add	r3, r2
 800bba2:	00db      	lsls	r3, r3, #3
 800bba4:	440b      	add	r3, r1
 800bba6:	3308      	adds	r3, #8
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	4613      	mov	r3, r2
 800bbae:	005b      	lsls	r3, r3, #1
 800bbb0:	4413      	add	r3, r2
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	4a08      	ldr	r2, [pc, #32]	@ (800bbd8 <etharp_tmr+0x14c>)
 800bbb6:	4413      	add	r3, r2
 800bbb8:	3304      	adds	r3, #4
 800bbba:	4619      	mov	r1, r3
 800bbbc:	f000 fe3e 	bl	800c83c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	607b      	str	r3, [r7, #4]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b09      	cmp	r3, #9
 800bbca:	f77f af65 	ble.w	800ba98 <etharp_tmr+0xc>
      }
    }
  }
}
 800bbce:	bf00      	nop
 800bbd0:	bf00      	nop
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	20003aa0 	.word	0x20003aa0

0800bbdc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08a      	sub	sp, #40	@ 0x28
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bbea:	230a      	movs	r3, #10
 800bbec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800bbee:	230a      	movs	r3, #10
 800bbf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bbf2:	230a      	movs	r3, #10
 800bbf4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bbfa:	230a      	movs	r3, #10
 800bbfc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	83bb      	strh	r3, [r7, #28]
 800bc02:	2300      	movs	r3, #0
 800bc04:	837b      	strh	r3, [r7, #26]
 800bc06:	2300      	movs	r3, #0
 800bc08:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	843b      	strh	r3, [r7, #32]
 800bc0e:	e0ae      	b.n	800bd6e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bc10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc14:	49a6      	ldr	r1, [pc, #664]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bc16:	4613      	mov	r3, r2
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	4413      	add	r3, r2
 800bc1c:	00db      	lsls	r3, r3, #3
 800bc1e:	440b      	add	r3, r1
 800bc20:	3314      	adds	r3, #20
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bc26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800bc2a:	2b0a      	cmp	r3, #10
 800bc2c:	d105      	bne.n	800bc3a <etharp_find_entry+0x5e>
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d102      	bne.n	800bc3a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bc34:	8c3b      	ldrh	r3, [r7, #32]
 800bc36:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bc38:	e095      	b.n	800bd66 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8092 	beq.w	800bd66 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d009      	beq.n	800bc5c <etharp_find_entry+0x80>
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d806      	bhi.n	800bc5c <etharp_find_entry+0x80>
 800bc4e:	4b99      	ldr	r3, [pc, #612]	@ (800beb4 <etharp_find_entry+0x2d8>)
 800bc50:	f240 1223 	movw	r2, #291	@ 0x123
 800bc54:	4998      	ldr	r1, [pc, #608]	@ (800beb8 <etharp_find_entry+0x2dc>)
 800bc56:	4899      	ldr	r0, [pc, #612]	@ (800bebc <etharp_find_entry+0x2e0>)
 800bc58:	f003 f8ec 	bl	800ee34 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d020      	beq.n	800bca4 <etharp_find_entry+0xc8>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6819      	ldr	r1, [r3, #0]
 800bc66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc6a:	4891      	ldr	r0, [pc, #580]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	005b      	lsls	r3, r3, #1
 800bc70:	4413      	add	r3, r2
 800bc72:	00db      	lsls	r3, r3, #3
 800bc74:	4403      	add	r3, r0
 800bc76:	3304      	adds	r3, #4
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4299      	cmp	r1, r3
 800bc7c:	d112      	bne.n	800bca4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00c      	beq.n	800bc9e <etharp_find_entry+0xc2>
 800bc84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bc88:	4989      	ldr	r1, [pc, #548]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	005b      	lsls	r3, r3, #1
 800bc8e:	4413      	add	r3, r2
 800bc90:	00db      	lsls	r3, r3, #3
 800bc92:	440b      	add	r3, r1
 800bc94:	3308      	adds	r3, #8
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d102      	bne.n	800bca4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bc9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bca2:	e100      	b.n	800bea6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d140      	bne.n	800bd2c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bcaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcae:	4980      	ldr	r1, [pc, #512]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	4413      	add	r3, r2
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	440b      	add	r3, r1
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d01a      	beq.n	800bcf6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bcc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcc4:	497a      	ldr	r1, [pc, #488]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	4413      	add	r3, r2
 800bccc:	00db      	lsls	r3, r3, #3
 800bcce:	440b      	add	r3, r1
 800bcd0:	3312      	adds	r3, #18
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	8bba      	ldrh	r2, [r7, #28]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d845      	bhi.n	800bd66 <etharp_find_entry+0x18a>
            old_queue = i;
 800bcda:	8c3b      	ldrh	r3, [r7, #32]
 800bcdc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bcde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bce2:	4973      	ldr	r1, [pc, #460]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bce4:	4613      	mov	r3, r2
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	4413      	add	r3, r2
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	440b      	add	r3, r1
 800bcee:	3312      	adds	r3, #18
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	83bb      	strh	r3, [r7, #28]
 800bcf4:	e037      	b.n	800bd66 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bcf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bcfa:	496d      	ldr	r1, [pc, #436]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	4413      	add	r3, r2
 800bd02:	00db      	lsls	r3, r3, #3
 800bd04:	440b      	add	r3, r1
 800bd06:	3312      	adds	r3, #18
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	8b7a      	ldrh	r2, [r7, #26]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d82a      	bhi.n	800bd66 <etharp_find_entry+0x18a>
            old_pending = i;
 800bd10:	8c3b      	ldrh	r3, [r7, #32]
 800bd12:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800bd14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd18:	4965      	ldr	r1, [pc, #404]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	4413      	add	r3, r2
 800bd20:	00db      	lsls	r3, r3, #3
 800bd22:	440b      	add	r3, r1
 800bd24:	3312      	adds	r3, #18
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	837b      	strh	r3, [r7, #26]
 800bd2a:	e01c      	b.n	800bd66 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d919      	bls.n	800bd66 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bd32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd36:	495e      	ldr	r1, [pc, #376]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bd38:	4613      	mov	r3, r2
 800bd3a:	005b      	lsls	r3, r3, #1
 800bd3c:	4413      	add	r3, r2
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	440b      	add	r3, r1
 800bd42:	3312      	adds	r3, #18
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	8b3a      	ldrh	r2, [r7, #24]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d80c      	bhi.n	800bd66 <etharp_find_entry+0x18a>
            old_stable = i;
 800bd4c:	8c3b      	ldrh	r3, [r7, #32]
 800bd4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800bd50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd54:	4956      	ldr	r1, [pc, #344]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bd56:	4613      	mov	r3, r2
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	4413      	add	r3, r2
 800bd5c:	00db      	lsls	r3, r3, #3
 800bd5e:	440b      	add	r3, r1
 800bd60:	3312      	adds	r3, #18
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd66:	8c3b      	ldrh	r3, [r7, #32]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	843b      	strh	r3, [r7, #32]
 800bd6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bd72:	2b09      	cmp	r3, #9
 800bd74:	f77f af4c 	ble.w	800bc10 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bd78:	7afb      	ldrb	r3, [r7, #11]
 800bd7a:	f003 0302 	and.w	r3, r3, #2
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d108      	bne.n	800bd94 <etharp_find_entry+0x1b8>
 800bd82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800bd86:	2b0a      	cmp	r3, #10
 800bd88:	d107      	bne.n	800bd9a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bd8a:	7afb      	ldrb	r3, [r7, #11]
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d102      	bne.n	800bd9a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
 800bd98:	e085      	b.n	800bea6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bd9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800bd9e:	2b09      	cmp	r3, #9
 800bda0:	dc02      	bgt.n	800bda8 <etharp_find_entry+0x1cc>
    i = empty;
 800bda2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bda4:	843b      	strh	r3, [r7, #32]
 800bda6:	e039      	b.n	800be1c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bda8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	dc14      	bgt.n	800bdda <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bdb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bdb2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bdb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdb8:	493d      	ldr	r1, [pc, #244]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800bdba:	4613      	mov	r3, r2
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	4413      	add	r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	440b      	add	r3, r1
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d018      	beq.n	800bdfc <etharp_find_entry+0x220>
 800bdca:	4b3a      	ldr	r3, [pc, #232]	@ (800beb4 <etharp_find_entry+0x2d8>)
 800bdcc:	f240 126d 	movw	r2, #365	@ 0x16d
 800bdd0:	493b      	ldr	r1, [pc, #236]	@ (800bec0 <etharp_find_entry+0x2e4>)
 800bdd2:	483a      	ldr	r0, [pc, #232]	@ (800bebc <etharp_find_entry+0x2e0>)
 800bdd4:	f003 f82e 	bl	800ee34 <iprintf>
 800bdd8:	e010      	b.n	800bdfc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bdda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800bdde:	2b09      	cmp	r3, #9
 800bde0:	dc02      	bgt.n	800bde8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bde2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bde4:	843b      	strh	r3, [r7, #32]
 800bde6:	e009      	b.n	800bdfc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bde8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bdec:	2b09      	cmp	r3, #9
 800bdee:	dc02      	bgt.n	800bdf6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bdf0:	8bfb      	ldrh	r3, [r7, #30]
 800bdf2:	843b      	strh	r3, [r7, #32]
 800bdf4:	e002      	b.n	800bdfc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bdf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfa:	e054      	b.n	800bea6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bdfc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be00:	2b09      	cmp	r3, #9
 800be02:	dd06      	ble.n	800be12 <etharp_find_entry+0x236>
 800be04:	4b2b      	ldr	r3, [pc, #172]	@ (800beb4 <etharp_find_entry+0x2d8>)
 800be06:	f240 127f 	movw	r2, #383	@ 0x17f
 800be0a:	492e      	ldr	r1, [pc, #184]	@ (800bec4 <etharp_find_entry+0x2e8>)
 800be0c:	482b      	ldr	r0, [pc, #172]	@ (800bebc <etharp_find_entry+0x2e0>)
 800be0e:	f003 f811 	bl	800ee34 <iprintf>
    etharp_free_entry(i);
 800be12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fe06 	bl	800ba28 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800be1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be20:	2b09      	cmp	r3, #9
 800be22:	dd06      	ble.n	800be32 <etharp_find_entry+0x256>
 800be24:	4b23      	ldr	r3, [pc, #140]	@ (800beb4 <etharp_find_entry+0x2d8>)
 800be26:	f240 1283 	movw	r2, #387	@ 0x183
 800be2a:	4926      	ldr	r1, [pc, #152]	@ (800bec4 <etharp_find_entry+0x2e8>)
 800be2c:	4823      	ldr	r0, [pc, #140]	@ (800bebc <etharp_find_entry+0x2e0>)
 800be2e:	f003 f801 	bl	800ee34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800be32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be36:	491e      	ldr	r1, [pc, #120]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800be38:	4613      	mov	r3, r2
 800be3a:	005b      	lsls	r3, r3, #1
 800be3c:	4413      	add	r3, r2
 800be3e:	00db      	lsls	r3, r3, #3
 800be40:	440b      	add	r3, r1
 800be42:	3314      	adds	r3, #20
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d006      	beq.n	800be58 <etharp_find_entry+0x27c>
 800be4a:	4b1a      	ldr	r3, [pc, #104]	@ (800beb4 <etharp_find_entry+0x2d8>)
 800be4c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800be50:	491d      	ldr	r1, [pc, #116]	@ (800bec8 <etharp_find_entry+0x2ec>)
 800be52:	481a      	ldr	r0, [pc, #104]	@ (800bebc <etharp_find_entry+0x2e0>)
 800be54:	f002 ffee 	bl	800ee34 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00b      	beq.n	800be76 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800be5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6819      	ldr	r1, [r3, #0]
 800be66:	4812      	ldr	r0, [pc, #72]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800be68:	4613      	mov	r3, r2
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	4413      	add	r3, r2
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	4403      	add	r3, r0
 800be72:	3304      	adds	r3, #4
 800be74:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800be76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be7a:	490d      	ldr	r1, [pc, #52]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800be7c:	4613      	mov	r3, r2
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	4413      	add	r3, r2
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	440b      	add	r3, r1
 800be86:	3312      	adds	r3, #18
 800be88:	2200      	movs	r2, #0
 800be8a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800be8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be90:	4907      	ldr	r1, [pc, #28]	@ (800beb0 <etharp_find_entry+0x2d4>)
 800be92:	4613      	mov	r3, r2
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	4413      	add	r3, r2
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	440b      	add	r3, r1
 800be9c:	3308      	adds	r3, #8
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bea2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3728      	adds	r7, #40	@ 0x28
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20003aa0 	.word	0x20003aa0
 800beb4:	08012184 	.word	0x08012184
 800beb8:	080121bc 	.word	0x080121bc
 800bebc:	080121fc 	.word	0x080121fc
 800bec0:	08012224 	.word	0x08012224
 800bec4:	0801223c 	.word	0x0801223c
 800bec8:	08012250 	.word	0x08012250

0800becc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af02      	add	r7, sp, #8
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bee0:	2b06      	cmp	r3, #6
 800bee2:	d006      	beq.n	800bef2 <etharp_update_arp_entry+0x26>
 800bee4:	4b48      	ldr	r3, [pc, #288]	@ (800c008 <etharp_update_arp_entry+0x13c>)
 800bee6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800beea:	4948      	ldr	r1, [pc, #288]	@ (800c00c <etharp_update_arp_entry+0x140>)
 800beec:	4848      	ldr	r0, [pc, #288]	@ (800c010 <etharp_update_arp_entry+0x144>)
 800beee:	f002 ffa1 	bl	800ee34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d012      	beq.n	800bf1e <etharp_update_arp_entry+0x52>
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00e      	beq.n	800bf1e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68f9      	ldr	r1, [r7, #12]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f001 f8ce 	bl	800d0a8 <ip4_addr_isbroadcast_u32>
 800bf0c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d105      	bne.n	800bf1e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800bf1a:	2be0      	cmp	r3, #224	@ 0xe0
 800bf1c:	d102      	bne.n	800bf24 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bf1e:	f06f 030f 	mvn.w	r3, #15
 800bf22:	e06c      	b.n	800bffe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	4619      	mov	r1, r3
 800bf2a:	68b8      	ldr	r0, [r7, #8]
 800bf2c:	f7ff fe56 	bl	800bbdc <etharp_find_entry>
 800bf30:	4603      	mov	r3, r0
 800bf32:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bf34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	da02      	bge.n	800bf42 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bf3c:	8afb      	ldrh	r3, [r7, #22]
 800bf3e:	b25b      	sxtb	r3, r3
 800bf40:	e05d      	b.n	800bffe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800bf42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf46:	4933      	ldr	r1, [pc, #204]	@ (800c014 <etharp_update_arp_entry+0x148>)
 800bf48:	4613      	mov	r3, r2
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	4413      	add	r3, r2
 800bf4e:	00db      	lsls	r3, r3, #3
 800bf50:	440b      	add	r3, r1
 800bf52:	3314      	adds	r3, #20
 800bf54:	2202      	movs	r2, #2
 800bf56:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bf58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf5c:	492d      	ldr	r1, [pc, #180]	@ (800c014 <etharp_update_arp_entry+0x148>)
 800bf5e:	4613      	mov	r3, r2
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	4413      	add	r3, r2
 800bf64:	00db      	lsls	r3, r3, #3
 800bf66:	440b      	add	r3, r1
 800bf68:	3308      	adds	r3, #8
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800bf6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf72:	4613      	mov	r3, r2
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	4413      	add	r3, r2
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	4a25      	ldr	r2, [pc, #148]	@ (800c014 <etharp_update_arp_entry+0x148>)
 800bf7e:	4413      	add	r3, r2
 800bf80:	3304      	adds	r3, #4
 800bf82:	2206      	movs	r2, #6
 800bf84:	6879      	ldr	r1, [r7, #4]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f003 f84d 	bl	800f026 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bf8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bf90:	4920      	ldr	r1, [pc, #128]	@ (800c014 <etharp_update_arp_entry+0x148>)
 800bf92:	4613      	mov	r3, r2
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	4413      	add	r3, r2
 800bf98:	00db      	lsls	r3, r3, #3
 800bf9a:	440b      	add	r3, r1
 800bf9c:	3312      	adds	r3, #18
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bfa2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bfa6:	491b      	ldr	r1, [pc, #108]	@ (800c014 <etharp_update_arp_entry+0x148>)
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	005b      	lsls	r3, r3, #1
 800bfac:	4413      	add	r3, r2
 800bfae:	00db      	lsls	r3, r3, #3
 800bfb0:	440b      	add	r3, r1
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d021      	beq.n	800bffc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bfb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bfbc:	4915      	ldr	r1, [pc, #84]	@ (800c014 <etharp_update_arp_entry+0x148>)
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	005b      	lsls	r3, r3, #1
 800bfc2:	4413      	add	r3, r2
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	440b      	add	r3, r1
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bfcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800bfd0:	4910      	ldr	r1, [pc, #64]	@ (800c014 <etharp_update_arp_entry+0x148>)
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	4413      	add	r3, r2
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	440b      	add	r3, r1
 800bfdc:	2200      	movs	r2, #0
 800bfde:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800bfe6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6939      	ldr	r1, [r7, #16]
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f001 ff67 	bl	800dec4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bff6:	6938      	ldr	r0, [r7, #16]
 800bff8:	f7f8 ff2e 	bl	8004e58 <pbuf_free>
  }
  return ERR_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3718      	adds	r7, #24
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	08012184 	.word	0x08012184
 800c00c:	0801227c 	.word	0x0801227c
 800c010:	080121fc 	.word	0x080121fc
 800c014:	20003aa0 	.word	0x20003aa0

0800c018 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c018:	b5b0      	push	{r4, r5, r7, lr}
 800c01a:	b08a      	sub	sp, #40	@ 0x28
 800c01c:	af04      	add	r7, sp, #16
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d107      	bne.n	800c038 <etharp_input+0x20>
 800c028:	4b3d      	ldr	r3, [pc, #244]	@ (800c120 <etharp_input+0x108>)
 800c02a:	f240 228a 	movw	r2, #650	@ 0x28a
 800c02e:	493d      	ldr	r1, [pc, #244]	@ (800c124 <etharp_input+0x10c>)
 800c030:	483d      	ldr	r0, [pc, #244]	@ (800c128 <etharp_input+0x110>)
 800c032:	f002 feff 	bl	800ee34 <iprintf>
 800c036:	e06f      	b.n	800c118 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	b29b      	uxth	r3, r3
 800c044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c048:	d10c      	bne.n	800c064 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c04e:	2b06      	cmp	r3, #6
 800c050:	d108      	bne.n	800c064 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c056:	2b04      	cmp	r3, #4
 800c058:	d104      	bne.n	800c064 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	885b      	ldrh	r3, [r3, #2]
 800c05e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c060:	2b08      	cmp	r3, #8
 800c062:	d003      	beq.n	800c06c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f7f8 fef7 	bl	8004e58 <pbuf_free>
    return;
 800c06a:	e055      	b.n	800c118 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	330e      	adds	r3, #14
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	3318      	adds	r3, #24
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	3304      	adds	r3, #4
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <etharp_input+0x74>
    for_us = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	75fb      	strb	r3, [r7, #23]
 800c08a:	e009      	b.n	800c0a0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	3304      	adds	r3, #4
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	429a      	cmp	r2, r3
 800c096:	bf0c      	ite	eq
 800c098:	2301      	moveq	r3, #1
 800c09a:	2300      	movne	r3, #0
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	f103 0208 	add.w	r2, r3, #8
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <etharp_input+0x98>
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e000      	b.n	800c0b2 <etharp_input+0x9a>
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	f107 010c 	add.w	r1, r7, #12
 800c0b6:	6838      	ldr	r0, [r7, #0]
 800c0b8:	f7ff ff08 	bl	800becc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	88db      	ldrh	r3, [r3, #6]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0c6:	d003      	beq.n	800c0d0 <etharp_input+0xb8>
 800c0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0cc:	d01e      	beq.n	800c10c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c0ce:	e020      	b.n	800c112 <etharp_input+0xfa>
      if (for_us) {
 800c0d0:	7dfb      	ldrb	r3, [r7, #23]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d01c      	beq.n	800c110 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c0f0:	2102      	movs	r1, #2
 800c0f2:	9103      	str	r1, [sp, #12]
 800c0f4:	f107 010c 	add.w	r1, r7, #12
 800c0f8:	9102      	str	r1, [sp, #8]
 800c0fa:	9201      	str	r2, [sp, #4]
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	462b      	mov	r3, r5
 800c100:	4622      	mov	r2, r4
 800c102:	4601      	mov	r1, r0
 800c104:	6838      	ldr	r0, [r7, #0]
 800c106:	f000 faeb 	bl	800c6e0 <etharp_raw>
      break;
 800c10a:	e001      	b.n	800c110 <etharp_input+0xf8>
      break;
 800c10c:	bf00      	nop
 800c10e:	e000      	b.n	800c112 <etharp_input+0xfa>
      break;
 800c110:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7f8 fea0 	bl	8004e58 <pbuf_free>
}
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bdb0      	pop	{r4, r5, r7, pc}
 800c11e:	bf00      	nop
 800c120:	08012184 	.word	0x08012184
 800c124:	080122d4 	.word	0x080122d4
 800c128:	080121fc 	.word	0x080121fc

0800c12c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af02      	add	r7, sp, #8
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	4613      	mov	r3, r2
 800c138:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c13a:	79fa      	ldrb	r2, [r7, #7]
 800c13c:	4944      	ldr	r1, [pc, #272]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c13e:	4613      	mov	r3, r2
 800c140:	005b      	lsls	r3, r3, #1
 800c142:	4413      	add	r3, r2
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	440b      	add	r3, r1
 800c148:	3314      	adds	r3, #20
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d806      	bhi.n	800c15e <etharp_output_to_arp_index+0x32>
 800c150:	4b40      	ldr	r3, [pc, #256]	@ (800c254 <etharp_output_to_arp_index+0x128>)
 800c152:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c156:	4940      	ldr	r1, [pc, #256]	@ (800c258 <etharp_output_to_arp_index+0x12c>)
 800c158:	4840      	ldr	r0, [pc, #256]	@ (800c25c <etharp_output_to_arp_index+0x130>)
 800c15a:	f002 fe6b 	bl	800ee34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c15e:	79fa      	ldrb	r2, [r7, #7]
 800c160:	493b      	ldr	r1, [pc, #236]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c162:	4613      	mov	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	4413      	add	r3, r2
 800c168:	00db      	lsls	r3, r3, #3
 800c16a:	440b      	add	r3, r1
 800c16c:	3314      	adds	r3, #20
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	2b02      	cmp	r3, #2
 800c172:	d153      	bne.n	800c21c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c174:	79fa      	ldrb	r2, [r7, #7]
 800c176:	4936      	ldr	r1, [pc, #216]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c178:	4613      	mov	r3, r2
 800c17a:	005b      	lsls	r3, r3, #1
 800c17c:	4413      	add	r3, r2
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	440b      	add	r3, r1
 800c182:	3312      	adds	r3, #18
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800c18a:	d919      	bls.n	800c1c0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c18c:	79fa      	ldrb	r2, [r7, #7]
 800c18e:	4613      	mov	r3, r2
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	4413      	add	r3, r2
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	4a2e      	ldr	r2, [pc, #184]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c198:	4413      	add	r3, r2
 800c19a:	3304      	adds	r3, #4
 800c19c:	4619      	mov	r1, r3
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f000 fb4c 	bl	800c83c <etharp_request>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d138      	bne.n	800c21c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c1aa:	79fa      	ldrb	r2, [r7, #7]
 800c1ac:	4928      	ldr	r1, [pc, #160]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	4413      	add	r3, r2
 800c1b4:	00db      	lsls	r3, r3, #3
 800c1b6:	440b      	add	r3, r1
 800c1b8:	3314      	adds	r3, #20
 800c1ba:	2203      	movs	r2, #3
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	e02d      	b.n	800c21c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c1c0:	79fa      	ldrb	r2, [r7, #7]
 800c1c2:	4923      	ldr	r1, [pc, #140]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	4413      	add	r3, r2
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	440b      	add	r3, r1
 800c1ce:	3312      	adds	r3, #18
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800c1d6:	d321      	bcc.n	800c21c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c1d8:	79fa      	ldrb	r2, [r7, #7]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	005b      	lsls	r3, r3, #1
 800c1de:	4413      	add	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	4a1b      	ldr	r2, [pc, #108]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c1e4:	4413      	add	r3, r2
 800c1e6:	1d19      	adds	r1, r3, #4
 800c1e8:	79fa      	ldrb	r2, [r7, #7]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	00db      	lsls	r3, r3, #3
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	4a16      	ldr	r2, [pc, #88]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c1f6:	4413      	add	r3, r2
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 fafb 	bl	800c7f8 <etharp_request_dst>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d109      	bne.n	800c21c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c208:	79fa      	ldrb	r2, [r7, #7]
 800c20a:	4911      	ldr	r1, [pc, #68]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c20c:	4613      	mov	r3, r2
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	4413      	add	r3, r2
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	440b      	add	r3, r1
 800c216:	3314      	adds	r3, #20
 800c218:	2203      	movs	r2, #3
 800c21a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800c222:	79fa      	ldrb	r2, [r7, #7]
 800c224:	4613      	mov	r3, r2
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	4413      	add	r3, r2
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	3308      	adds	r3, #8
 800c22e:	4a08      	ldr	r2, [pc, #32]	@ (800c250 <etharp_output_to_arp_index+0x124>)
 800c230:	4413      	add	r3, r2
 800c232:	3304      	adds	r3, #4
 800c234:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c238:	9200      	str	r2, [sp, #0]
 800c23a:	460a      	mov	r2, r1
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f001 fe40 	bl	800dec4 <ethernet_output>
 800c244:	4603      	mov	r3, r0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20003aa0 	.word	0x20003aa0
 800c254:	08012184 	.word	0x08012184
 800c258:	080122f4 	.word	0x080122f4
 800c25c:	080121fc 	.word	0x080121fc

0800c260 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b08a      	sub	sp, #40	@ 0x28
 800c264:	af02      	add	r7, sp, #8
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <etharp_output+0x24>
 800c276:	4b73      	ldr	r3, [pc, #460]	@ (800c444 <etharp_output+0x1e4>)
 800c278:	f240 321e 	movw	r2, #798	@ 0x31e
 800c27c:	4972      	ldr	r1, [pc, #456]	@ (800c448 <etharp_output+0x1e8>)
 800c27e:	4873      	ldr	r0, [pc, #460]	@ (800c44c <etharp_output+0x1ec>)
 800c280:	f002 fdd8 	bl	800ee34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <etharp_output+0x38>
 800c28a:	4b6e      	ldr	r3, [pc, #440]	@ (800c444 <etharp_output+0x1e4>)
 800c28c:	f240 321f 	movw	r2, #799	@ 0x31f
 800c290:	496f      	ldr	r1, [pc, #444]	@ (800c450 <etharp_output+0x1f0>)
 800c292:	486e      	ldr	r0, [pc, #440]	@ (800c44c <etharp_output+0x1ec>)
 800c294:	f002 fdce 	bl	800ee34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d106      	bne.n	800c2ac <etharp_output+0x4c>
 800c29e:	4b69      	ldr	r3, [pc, #420]	@ (800c444 <etharp_output+0x1e4>)
 800c2a0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c2a4:	496b      	ldr	r1, [pc, #428]	@ (800c454 <etharp_output+0x1f4>)
 800c2a6:	4869      	ldr	r0, [pc, #420]	@ (800c44c <etharp_output+0x1ec>)
 800c2a8:	f002 fdc4 	bl	800ee34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68f9      	ldr	r1, [r7, #12]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 fef8 	bl	800d0a8 <ip4_addr_isbroadcast_u32>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c2be:	4b66      	ldr	r3, [pc, #408]	@ (800c458 <etharp_output+0x1f8>)
 800c2c0:	61fb      	str	r3, [r7, #28]
 800c2c2:	e0af      	b.n	800c424 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c2cc:	2be0      	cmp	r3, #224	@ 0xe0
 800c2ce:	d118      	bne.n	800c302 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c2d8:	235e      	movs	r3, #94	@ 0x5e
 800c2da:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	3302      	adds	r3, #2
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	3303      	adds	r3, #3
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c2fa:	f107 0310 	add.w	r3, r7, #16
 800c2fe:	61fb      	str	r3, [r7, #28]
 800c300:	e090      	b.n	800c424 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3304      	adds	r3, #4
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	405a      	eors	r2, r3
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3308      	adds	r3, #8
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4013      	ands	r3, r2
 800c316:	2b00      	cmp	r3, #0
 800c318:	d012      	beq.n	800c340 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c320:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800c324:	4293      	cmp	r3, r2
 800c326:	d00b      	beq.n	800c340 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	330c      	adds	r3, #12
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d003      	beq.n	800c33a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	330c      	adds	r3, #12
 800c336:	61bb      	str	r3, [r7, #24]
 800c338:	e002      	b.n	800c340 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c33a:	f06f 0303 	mvn.w	r3, #3
 800c33e:	e07d      	b.n	800c43c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c340:	4b46      	ldr	r3, [pc, #280]	@ (800c45c <etharp_output+0x1fc>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	4619      	mov	r1, r3
 800c346:	4a46      	ldr	r2, [pc, #280]	@ (800c460 <etharp_output+0x200>)
 800c348:	460b      	mov	r3, r1
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	440b      	add	r3, r1
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	4413      	add	r3, r2
 800c352:	3314      	adds	r3, #20
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b01      	cmp	r3, #1
 800c358:	d925      	bls.n	800c3a6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c35a:	4b40      	ldr	r3, [pc, #256]	@ (800c45c <etharp_output+0x1fc>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	4619      	mov	r1, r3
 800c360:	4a3f      	ldr	r2, [pc, #252]	@ (800c460 <etharp_output+0x200>)
 800c362:	460b      	mov	r3, r1
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	440b      	add	r3, r1
 800c368:	00db      	lsls	r3, r3, #3
 800c36a:	4413      	add	r3, r2
 800c36c:	3308      	adds	r3, #8
 800c36e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	429a      	cmp	r2, r3
 800c374:	d117      	bne.n	800c3a6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	4b38      	ldr	r3, [pc, #224]	@ (800c45c <etharp_output+0x1fc>)
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	4618      	mov	r0, r3
 800c380:	4937      	ldr	r1, [pc, #220]	@ (800c460 <etharp_output+0x200>)
 800c382:	4603      	mov	r3, r0
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	4403      	add	r3, r0
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	440b      	add	r3, r1
 800c38c:	3304      	adds	r3, #4
 800c38e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c390:	429a      	cmp	r2, r3
 800c392:	d108      	bne.n	800c3a6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c394:	4b31      	ldr	r3, [pc, #196]	@ (800c45c <etharp_output+0x1fc>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	461a      	mov	r2, r3
 800c39a:	68b9      	ldr	r1, [r7, #8]
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f7ff fec5 	bl	800c12c <etharp_output_to_arp_index>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	e04a      	b.n	800c43c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	75fb      	strb	r3, [r7, #23]
 800c3aa:	e031      	b.n	800c410 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c3ac:	7dfa      	ldrb	r2, [r7, #23]
 800c3ae:	492c      	ldr	r1, [pc, #176]	@ (800c460 <etharp_output+0x200>)
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	4413      	add	r3, r2
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	440b      	add	r3, r1
 800c3ba:	3314      	adds	r3, #20
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d923      	bls.n	800c40a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c3c2:	7dfa      	ldrb	r2, [r7, #23]
 800c3c4:	4926      	ldr	r1, [pc, #152]	@ (800c460 <etharp_output+0x200>)
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	4413      	add	r3, r2
 800c3cc:	00db      	lsls	r3, r3, #3
 800c3ce:	440b      	add	r3, r1
 800c3d0:	3308      	adds	r3, #8
 800c3d2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d117      	bne.n	800c40a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	6819      	ldr	r1, [r3, #0]
 800c3de:	7dfa      	ldrb	r2, [r7, #23]
 800c3e0:	481f      	ldr	r0, [pc, #124]	@ (800c460 <etharp_output+0x200>)
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	4413      	add	r3, r2
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	4403      	add	r3, r0
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c3f0:	4299      	cmp	r1, r3
 800c3f2:	d10a      	bne.n	800c40a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c3f4:	4a19      	ldr	r2, [pc, #100]	@ (800c45c <etharp_output+0x1fc>)
 800c3f6:	7dfb      	ldrb	r3, [r7, #23]
 800c3f8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7ff fe93 	bl	800c12c <etharp_output_to_arp_index>
 800c406:	4603      	mov	r3, r0
 800c408:	e018      	b.n	800c43c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c40a:	7dfb      	ldrb	r3, [r7, #23]
 800c40c:	3301      	adds	r3, #1
 800c40e:	75fb      	strb	r3, [r7, #23]
 800c410:	7dfb      	ldrb	r3, [r7, #23]
 800c412:	2b09      	cmp	r3, #9
 800c414:	d9ca      	bls.n	800c3ac <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c416:	68ba      	ldr	r2, [r7, #8]
 800c418:	69b9      	ldr	r1, [r7, #24]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f000 f822 	bl	800c464 <etharp_query>
 800c420:	4603      	mov	r3, r0
 800c422:	e00b      	b.n	800c43c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800c42a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	68b9      	ldr	r1, [r7, #8]
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f001 fd45 	bl	800dec4 <ethernet_output>
 800c43a:	4603      	mov	r3, r0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3720      	adds	r7, #32
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	08012184 	.word	0x08012184
 800c448:	080122d4 	.word	0x080122d4
 800c44c:	080121fc 	.word	0x080121fc
 800c450:	08012324 	.word	0x08012324
 800c454:	080122c4 	.word	0x080122c4
 800c458:	08014484 	.word	0x08014484
 800c45c:	20003b90 	.word	0x20003b90
 800c460:	20003aa0 	.word	0x20003aa0

0800c464 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08c      	sub	sp, #48	@ 0x30
 800c468:	af02      	add	r7, sp, #8
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	3326      	adds	r3, #38	@ 0x26
 800c474:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c476:	23ff      	movs	r3, #255	@ 0xff
 800c478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800c47c:	2300      	movs	r3, #0
 800c47e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68f9      	ldr	r1, [r7, #12]
 800c486:	4618      	mov	r0, r3
 800c488:	f000 fe0e 	bl	800d0a8 <ip4_addr_isbroadcast_u32>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10c      	bne.n	800c4ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c49a:	2be0      	cmp	r3, #224	@ 0xe0
 800c49c:	d006      	beq.n	800c4ac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d003      	beq.n	800c4ac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d102      	bne.n	800c4b2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c4ac:	f06f 030f 	mvn.w	r3, #15
 800c4b0:	e101      	b.n	800c6b6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	68b8      	ldr	r0, [r7, #8]
 800c4b8:	f7ff fb90 	bl	800bbdc <etharp_find_entry>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c4c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	da02      	bge.n	800c4ce <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c4c8:	8a7b      	ldrh	r3, [r7, #18]
 800c4ca:	b25b      	sxtb	r3, r3
 800c4cc:	e0f3      	b.n	800c6b6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c4ce:	8a7b      	ldrh	r3, [r7, #18]
 800c4d0:	2b7e      	cmp	r3, #126	@ 0x7e
 800c4d2:	d906      	bls.n	800c4e2 <etharp_query+0x7e>
 800c4d4:	4b7a      	ldr	r3, [pc, #488]	@ (800c6c0 <etharp_query+0x25c>)
 800c4d6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800c4da:	497a      	ldr	r1, [pc, #488]	@ (800c6c4 <etharp_query+0x260>)
 800c4dc:	487a      	ldr	r0, [pc, #488]	@ (800c6c8 <etharp_query+0x264>)
 800c4de:	f002 fca9 	bl	800ee34 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c4e2:	8a7b      	ldrh	r3, [r7, #18]
 800c4e4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c4e6:	7c7a      	ldrb	r2, [r7, #17]
 800c4e8:	4978      	ldr	r1, [pc, #480]	@ (800c6cc <etharp_query+0x268>)
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	005b      	lsls	r3, r3, #1
 800c4ee:	4413      	add	r3, r2
 800c4f0:	00db      	lsls	r3, r3, #3
 800c4f2:	440b      	add	r3, r1
 800c4f4:	3314      	adds	r3, #20
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d115      	bne.n	800c528 <etharp_query+0xc4>
    is_new_entry = 1;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c500:	7c7a      	ldrb	r2, [r7, #17]
 800c502:	4972      	ldr	r1, [pc, #456]	@ (800c6cc <etharp_query+0x268>)
 800c504:	4613      	mov	r3, r2
 800c506:	005b      	lsls	r3, r3, #1
 800c508:	4413      	add	r3, r2
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	440b      	add	r3, r1
 800c50e:	3314      	adds	r3, #20
 800c510:	2201      	movs	r2, #1
 800c512:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c514:	7c7a      	ldrb	r2, [r7, #17]
 800c516:	496d      	ldr	r1, [pc, #436]	@ (800c6cc <etharp_query+0x268>)
 800c518:	4613      	mov	r3, r2
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	4413      	add	r3, r2
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	440b      	add	r3, r1
 800c522:	3308      	adds	r3, #8
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c528:	7c7a      	ldrb	r2, [r7, #17]
 800c52a:	4968      	ldr	r1, [pc, #416]	@ (800c6cc <etharp_query+0x268>)
 800c52c:	4613      	mov	r3, r2
 800c52e:	005b      	lsls	r3, r3, #1
 800c530:	4413      	add	r3, r2
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	440b      	add	r3, r1
 800c536:	3314      	adds	r3, #20
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d011      	beq.n	800c562 <etharp_query+0xfe>
 800c53e:	7c7a      	ldrb	r2, [r7, #17]
 800c540:	4962      	ldr	r1, [pc, #392]	@ (800c6cc <etharp_query+0x268>)
 800c542:	4613      	mov	r3, r2
 800c544:	005b      	lsls	r3, r3, #1
 800c546:	4413      	add	r3, r2
 800c548:	00db      	lsls	r3, r3, #3
 800c54a:	440b      	add	r3, r1
 800c54c:	3314      	adds	r3, #20
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d806      	bhi.n	800c562 <etharp_query+0xfe>
 800c554:	4b5a      	ldr	r3, [pc, #360]	@ (800c6c0 <etharp_query+0x25c>)
 800c556:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800c55a:	495d      	ldr	r1, [pc, #372]	@ (800c6d0 <etharp_query+0x26c>)
 800c55c:	485a      	ldr	r0, [pc, #360]	@ (800c6c8 <etharp_query+0x264>)
 800c55e:	f002 fc69 	bl	800ee34 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c562:	6a3b      	ldr	r3, [r7, #32]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d102      	bne.n	800c56e <etharp_query+0x10a>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d10c      	bne.n	800c588 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c56e:	68b9      	ldr	r1, [r7, #8]
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f000 f963 	bl	800c83c <etharp_request>
 800c576:	4603      	mov	r3, r0
 800c578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d102      	bne.n	800c588 <etharp_query+0x124>
      return result;
 800c582:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c586:	e096      	b.n	800c6b6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <etharp_query+0x138>
 800c58e:	4b4c      	ldr	r3, [pc, #304]	@ (800c6c0 <etharp_query+0x25c>)
 800c590:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800c594:	494f      	ldr	r1, [pc, #316]	@ (800c6d4 <etharp_query+0x270>)
 800c596:	484c      	ldr	r0, [pc, #304]	@ (800c6c8 <etharp_query+0x264>)
 800c598:	f002 fc4c 	bl	800ee34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c59c:	7c7a      	ldrb	r2, [r7, #17]
 800c59e:	494b      	ldr	r1, [pc, #300]	@ (800c6cc <etharp_query+0x268>)
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	005b      	lsls	r3, r3, #1
 800c5a4:	4413      	add	r3, r2
 800c5a6:	00db      	lsls	r3, r3, #3
 800c5a8:	440b      	add	r3, r1
 800c5aa:	3314      	adds	r3, #20
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d917      	bls.n	800c5e2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c5b2:	4a49      	ldr	r2, [pc, #292]	@ (800c6d8 <etharp_query+0x274>)
 800c5b4:	7c7b      	ldrb	r3, [r7, #17]
 800c5b6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c5b8:	7c7a      	ldrb	r2, [r7, #17]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	4413      	add	r3, r2
 800c5c0:	00db      	lsls	r3, r3, #3
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	4a41      	ldr	r2, [pc, #260]	@ (800c6cc <etharp_query+0x268>)
 800c5c6:	4413      	add	r3, r2
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c5ce:	9200      	str	r2, [sp, #0]
 800c5d0:	697a      	ldr	r2, [r7, #20]
 800c5d2:	6879      	ldr	r1, [r7, #4]
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f001 fc75 	bl	800dec4 <ethernet_output>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c5e0:	e067      	b.n	800c6b2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c5e2:	7c7a      	ldrb	r2, [r7, #17]
 800c5e4:	4939      	ldr	r1, [pc, #228]	@ (800c6cc <etharp_query+0x268>)
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	4413      	add	r3, r2
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	440b      	add	r3, r1
 800c5f0:	3314      	adds	r3, #20
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d15c      	bne.n	800c6b2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c600:	e01c      	b.n	800c63c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	895a      	ldrh	r2, [r3, #10]
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	891b      	ldrh	r3, [r3, #8]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d10a      	bne.n	800c624 <etharp_query+0x1c0>
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d006      	beq.n	800c624 <etharp_query+0x1c0>
 800c616:	4b2a      	ldr	r3, [pc, #168]	@ (800c6c0 <etharp_query+0x25c>)
 800c618:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800c61c:	492f      	ldr	r1, [pc, #188]	@ (800c6dc <etharp_query+0x278>)
 800c61e:	482a      	ldr	r0, [pc, #168]	@ (800c6c8 <etharp_query+0x264>)
 800c620:	f002 fc08 	bl	800ee34 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	7b1b      	ldrb	r3, [r3, #12]
 800c628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d002      	beq.n	800c636 <etharp_query+0x1d2>
        copy_needed = 1;
 800c630:	2301      	movs	r3, #1
 800c632:	61bb      	str	r3, [r7, #24]
        break;
 800c634:	e005      	b.n	800c642 <etharp_query+0x1de>
      }
      p = p->next;
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1df      	bne.n	800c602 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d007      	beq.n	800c658 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800c64e:	200e      	movs	r0, #14
 800c650:	f7f8 fe5e 	bl	8005310 <pbuf_clone>
 800c654:	61f8      	str	r0, [r7, #28]
 800c656:	e004      	b.n	800c662 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c65c:	69f8      	ldr	r0, [r7, #28]
 800c65e:	f7f8 fc9b 	bl	8004f98 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d021      	beq.n	800c6ac <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c668:	7c7a      	ldrb	r2, [r7, #17]
 800c66a:	4918      	ldr	r1, [pc, #96]	@ (800c6cc <etharp_query+0x268>)
 800c66c:	4613      	mov	r3, r2
 800c66e:	005b      	lsls	r3, r3, #1
 800c670:	4413      	add	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	440b      	add	r3, r1
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00a      	beq.n	800c692 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c67c:	7c7a      	ldrb	r2, [r7, #17]
 800c67e:	4913      	ldr	r1, [pc, #76]	@ (800c6cc <etharp_query+0x268>)
 800c680:	4613      	mov	r3, r2
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	4413      	add	r3, r2
 800c686:	00db      	lsls	r3, r3, #3
 800c688:	440b      	add	r3, r1
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7f8 fbe3 	bl	8004e58 <pbuf_free>
      }
      arp_table[i].q = p;
 800c692:	7c7a      	ldrb	r2, [r7, #17]
 800c694:	490d      	ldr	r1, [pc, #52]	@ (800c6cc <etharp_query+0x268>)
 800c696:	4613      	mov	r3, r2
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	4413      	add	r3, r2
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	440b      	add	r3, r1
 800c6a0:	69fa      	ldr	r2, [r7, #28]
 800c6a2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c6aa:	e002      	b.n	800c6b2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c6ac:	23ff      	movs	r3, #255	@ 0xff
 800c6ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800c6b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3728      	adds	r7, #40	@ 0x28
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	08012184 	.word	0x08012184
 800c6c4:	08012330 	.word	0x08012330
 800c6c8:	080121fc 	.word	0x080121fc
 800c6cc:	20003aa0 	.word	0x20003aa0
 800c6d0:	08012340 	.word	0x08012340
 800c6d4:	08012324 	.word	0x08012324
 800c6d8:	20003b90 	.word	0x20003b90
 800c6dc:	08012368 	.word	0x08012368

0800c6e0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b08a      	sub	sp, #40	@ 0x28
 800c6e4:	af02      	add	r7, sp, #8
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d106      	bne.n	800c706 <etharp_raw+0x26>
 800c6f8:	4b3a      	ldr	r3, [pc, #232]	@ (800c7e4 <etharp_raw+0x104>)
 800c6fa:	f240 4257 	movw	r2, #1111	@ 0x457
 800c6fe:	493a      	ldr	r1, [pc, #232]	@ (800c7e8 <etharp_raw+0x108>)
 800c700:	483a      	ldr	r0, [pc, #232]	@ (800c7ec <etharp_raw+0x10c>)
 800c702:	f002 fb97 	bl	800ee34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c706:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c70a:	211c      	movs	r1, #28
 800c70c:	200e      	movs	r0, #14
 800c70e:	f7f8 f8bf 	bl	8004890 <pbuf_alloc>
 800c712:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d102      	bne.n	800c720 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c71a:	f04f 33ff 	mov.w	r3, #4294967295
 800c71e:	e05d      	b.n	800c7dc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	895b      	ldrh	r3, [r3, #10]
 800c724:	2b1b      	cmp	r3, #27
 800c726:	d806      	bhi.n	800c736 <etharp_raw+0x56>
 800c728:	4b2e      	ldr	r3, [pc, #184]	@ (800c7e4 <etharp_raw+0x104>)
 800c72a:	f240 4262 	movw	r2, #1122	@ 0x462
 800c72e:	4930      	ldr	r1, [pc, #192]	@ (800c7f0 <etharp_raw+0x110>)
 800c730:	482e      	ldr	r0, [pc, #184]	@ (800c7ec <etharp_raw+0x10c>)
 800c732:	f002 fb7f 	bl	800ee34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c73c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c73e:	4618      	mov	r0, r3
 800c740:	f7f7 f88c 	bl	800385c <lwip_htons>
 800c744:	4603      	mov	r3, r0
 800c746:	461a      	mov	r2, r3
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c752:	2b06      	cmp	r3, #6
 800c754:	d006      	beq.n	800c764 <etharp_raw+0x84>
 800c756:	4b23      	ldr	r3, [pc, #140]	@ (800c7e4 <etharp_raw+0x104>)
 800c758:	f240 4269 	movw	r2, #1129	@ 0x469
 800c75c:	4925      	ldr	r1, [pc, #148]	@ (800c7f4 <etharp_raw+0x114>)
 800c75e:	4823      	ldr	r0, [pc, #140]	@ (800c7ec <etharp_raw+0x10c>)
 800c760:	f002 fb68 	bl	800ee34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	3308      	adds	r3, #8
 800c768:	2206      	movs	r2, #6
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f002 fc5a 	bl	800f026 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	3312      	adds	r3, #18
 800c776:	2206      	movs	r2, #6
 800c778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c77a:	4618      	mov	r0, r3
 800c77c:	f002 fc53 	bl	800f026 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	330e      	adds	r3, #14
 800c784:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c786:	6812      	ldr	r2, [r2, #0]
 800c788:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	3318      	adds	r3, #24
 800c78e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c790:	6812      	ldr	r2, [r2, #0]
 800c792:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2200      	movs	r2, #0
 800c798:	701a      	strb	r2, [r3, #0]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f042 0201 	orr.w	r2, r2, #1
 800c7a0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f042 0208 	orr.w	r2, r2, #8
 800c7aa:	709a      	strb	r2, [r3, #2]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	2206      	movs	r2, #6
 800c7b4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2204      	movs	r2, #4
 800c7ba:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c7bc:	f640 0306 	movw	r3, #2054	@ 0x806
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	69b9      	ldr	r1, [r7, #24]
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f001 fb7b 	bl	800dec4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c7ce:	69b8      	ldr	r0, [r7, #24]
 800c7d0:	f7f8 fb42 	bl	8004e58 <pbuf_free>
  p = NULL;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c7d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3720      	adds	r7, #32
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	08012184 	.word	0x08012184
 800c7e8:	080122d4 	.word	0x080122d4
 800c7ec:	080121fc 	.word	0x080121fc
 800c7f0:	08012384 	.word	0x08012384
 800c7f4:	080123b8 	.word	0x080123b8

0800c7f8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b088      	sub	sp, #32
 800c7fc:	af04      	add	r7, sp, #16
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c814:	2201      	movs	r2, #1
 800c816:	9203      	str	r2, [sp, #12]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	9202      	str	r2, [sp, #8]
 800c81c:	4a06      	ldr	r2, [pc, #24]	@ (800c838 <etharp_request_dst+0x40>)
 800c81e:	9201      	str	r2, [sp, #4]
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	4603      	mov	r3, r0
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	68f8      	ldr	r0, [r7, #12]
 800c828:	f7ff ff5a 	bl	800c6e0 <etharp_raw>
 800c82c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	0801448c 	.word	0x0801448c

0800c83c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c846:	4a05      	ldr	r2, [pc, #20]	@ (800c85c <etharp_request+0x20>)
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7ff ffd4 	bl	800c7f8 <etharp_request_dst>
 800c850:	4603      	mov	r3, r0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	08014484 	.word	0x08014484

0800c860 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08e      	sub	sp, #56	@ 0x38
 800c864:	af04      	add	r7, sp, #16
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c86a:	4b79      	ldr	r3, [pc, #484]	@ (800ca50 <icmp_input+0x1f0>)
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	f003 030f 	and.w	r3, r3, #15
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c880:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c882:	2b13      	cmp	r3, #19
 800c884:	f240 80cd 	bls.w	800ca22 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	895b      	ldrh	r3, [r3, #10]
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	f240 80ca 	bls.w	800ca26 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c89c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f000 80b7 	beq.w	800ca14 <icmp_input+0x1b4>
 800c8a6:	2b08      	cmp	r3, #8
 800c8a8:	f040 80b7 	bne.w	800ca1a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c8ac:	4b69      	ldr	r3, [pc, #420]	@ (800ca54 <icmp_input+0x1f4>)
 800c8ae:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c8b0:	4b67      	ldr	r3, [pc, #412]	@ (800ca50 <icmp_input+0x1f0>)
 800c8b2:	695b      	ldr	r3, [r3, #20]
 800c8b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c8b8:	2be0      	cmp	r3, #224	@ 0xe0
 800c8ba:	f000 80bb 	beq.w	800ca34 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c8be:	4b64      	ldr	r3, [pc, #400]	@ (800ca50 <icmp_input+0x1f0>)
 800c8c0:	695b      	ldr	r3, [r3, #20]
 800c8c2:	4a63      	ldr	r2, [pc, #396]	@ (800ca50 <icmp_input+0x1f0>)
 800c8c4:	6812      	ldr	r2, [r2, #0]
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 fbed 	bl	800d0a8 <ip4_addr_isbroadcast_u32>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f040 80b1 	bne.w	800ca38 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	891b      	ldrh	r3, [r3, #8]
 800c8da:	2b07      	cmp	r3, #7
 800c8dc:	f240 80a5 	bls.w	800ca2a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c8e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8e2:	330e      	adds	r3, #14
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7f8 fa20 	bl	8004d2c <pbuf_add_header>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d04b      	beq.n	800c98a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	891a      	ldrh	r2, [r3, #8]
 800c8f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8f8:	4413      	add	r3, r2
 800c8fa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	891b      	ldrh	r3, [r3, #8]
 800c900:	8b7a      	ldrh	r2, [r7, #26]
 800c902:	429a      	cmp	r2, r3
 800c904:	f0c0 809a 	bcc.w	800ca3c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c908:	8b7b      	ldrh	r3, [r7, #26]
 800c90a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c90e:	4619      	mov	r1, r3
 800c910:	200e      	movs	r0, #14
 800c912:	f7f7 ffbd 	bl	8004890 <pbuf_alloc>
 800c916:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f000 8090 	beq.w	800ca40 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	895b      	ldrh	r3, [r3, #10]
 800c924:	461a      	mov	r2, r3
 800c926:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c928:	3308      	adds	r3, #8
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d203      	bcs.n	800c936 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c92e:	6978      	ldr	r0, [r7, #20]
 800c930:	f7f8 fa92 	bl	8004e58 <pbuf_free>
          goto icmperr;
 800c934:	e085      	b.n	800ca42 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c93c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c93e:	4618      	mov	r0, r3
 800c940:	f002 fb71 	bl	800f026 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c944:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c946:	4619      	mov	r1, r3
 800c948:	6978      	ldr	r0, [r7, #20]
 800c94a:	f7f8 f9ff 	bl	8004d4c <pbuf_remove_header>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d009      	beq.n	800c968 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c954:	4b40      	ldr	r3, [pc, #256]	@ (800ca58 <icmp_input+0x1f8>)
 800c956:	22b6      	movs	r2, #182	@ 0xb6
 800c958:	4940      	ldr	r1, [pc, #256]	@ (800ca5c <icmp_input+0x1fc>)
 800c95a:	4841      	ldr	r0, [pc, #260]	@ (800ca60 <icmp_input+0x200>)
 800c95c:	f002 fa6a 	bl	800ee34 <iprintf>
          pbuf_free(r);
 800c960:	6978      	ldr	r0, [r7, #20]
 800c962:	f7f8 fa79 	bl	8004e58 <pbuf_free>
          goto icmperr;
 800c966:	e06c      	b.n	800ca42 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c968:	6879      	ldr	r1, [r7, #4]
 800c96a:	6978      	ldr	r0, [r7, #20]
 800c96c:	f7f8 fb8c 	bl	8005088 <pbuf_copy>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d003      	beq.n	800c97e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c976:	6978      	ldr	r0, [r7, #20]
 800c978:	f7f8 fa6e 	bl	8004e58 <pbuf_free>
          goto icmperr;
 800c97c:	e061      	b.n	800ca42 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7f8 fa6a 	bl	8004e58 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	607b      	str	r3, [r7, #4]
 800c988:	e00f      	b.n	800c9aa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c98a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c98c:	330e      	adds	r3, #14
 800c98e:	4619      	mov	r1, r3
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7f8 f9db 	bl	8004d4c <pbuf_remove_header>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d006      	beq.n	800c9aa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c99c:	4b2e      	ldr	r3, [pc, #184]	@ (800ca58 <icmp_input+0x1f8>)
 800c99e:	22c7      	movs	r2, #199	@ 0xc7
 800c9a0:	4930      	ldr	r1, [pc, #192]	@ (800ca64 <icmp_input+0x204>)
 800c9a2:	482f      	ldr	r0, [pc, #188]	@ (800ca60 <icmp_input+0x200>)
 800c9a4:	f002 fa46 	bl	800ee34 <iprintf>
          goto icmperr;
 800c9a8:	e04b      	b.n	800ca42 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c9b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7f8 f9b9 	bl	8004d2c <pbuf_add_header>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d12b      	bne.n	800ca18 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c9ce:	4b20      	ldr	r3, [pc, #128]	@ (800ca50 <icmp_input+0x1f0>)
 800c9d0:	691a      	ldr	r2, [r3, #16]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	709a      	strb	r2, [r3, #2]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	22ff      	movs	r2, #255	@ 0xff
 800c9ea:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	729a      	strb	r2, [r3, #10]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	9302      	str	r3, [sp, #8]
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	2300      	movs	r3, #0
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	23ff      	movs	r3, #255	@ 0xff
 800ca04:	2200      	movs	r2, #0
 800ca06:	69f9      	ldr	r1, [r7, #28]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fa75 	bl	800cef8 <ip4_output_if>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ca12:	e001      	b.n	800ca18 <icmp_input+0x1b8>
      break;
 800ca14:	bf00      	nop
 800ca16:	e000      	b.n	800ca1a <icmp_input+0x1ba>
      break;
 800ca18:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7f8 fa1c 	bl	8004e58 <pbuf_free>
  return;
 800ca20:	e013      	b.n	800ca4a <icmp_input+0x1ea>
    goto lenerr;
 800ca22:	bf00      	nop
 800ca24:	e002      	b.n	800ca2c <icmp_input+0x1cc>
    goto lenerr;
 800ca26:	bf00      	nop
 800ca28:	e000      	b.n	800ca2c <icmp_input+0x1cc>
        goto lenerr;
 800ca2a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7f8 fa13 	bl	8004e58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ca32:	e00a      	b.n	800ca4a <icmp_input+0x1ea>
        goto icmperr;
 800ca34:	bf00      	nop
 800ca36:	e004      	b.n	800ca42 <icmp_input+0x1e2>
        goto icmperr;
 800ca38:	bf00      	nop
 800ca3a:	e002      	b.n	800ca42 <icmp_input+0x1e2>
          goto icmperr;
 800ca3c:	bf00      	nop
 800ca3e:	e000      	b.n	800ca42 <icmp_input+0x1e2>
          goto icmperr;
 800ca40:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7f8 fa08 	bl	8004e58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ca48:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ca4a:	3728      	adds	r7, #40	@ 0x28
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	200004d0 	.word	0x200004d0
 800ca54:	200004e4 	.word	0x200004e4
 800ca58:	080123fc 	.word	0x080123fc
 800ca5c:	08012434 	.word	0x08012434
 800ca60:	0801246c 	.word	0x0801246c
 800ca64:	08012494 	.word	0x08012494

0800ca68 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	460b      	mov	r3, r1
 800ca72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ca74:	78fb      	ldrb	r3, [r7, #3]
 800ca76:	461a      	mov	r2, r3
 800ca78:	2103      	movs	r1, #3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f814 	bl	800caa8 <icmp_send_response>
}
 800ca80:	bf00      	nop
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ca94:	78fb      	ldrb	r3, [r7, #3]
 800ca96:	461a      	mov	r2, r3
 800ca98:	210b      	movs	r1, #11
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f804 	bl	800caa8 <icmp_send_response>
}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08c      	sub	sp, #48	@ 0x30
 800caac:	af04      	add	r7, sp, #16
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70fb      	strb	r3, [r7, #3]
 800cab4:	4613      	mov	r3, r2
 800cab6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cab8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cabc:	2124      	movs	r1, #36	@ 0x24
 800cabe:	2022      	movs	r0, #34	@ 0x22
 800cac0:	f7f7 fee6 	bl	8004890 <pbuf_alloc>
 800cac4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d04c      	beq.n	800cb66 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	895b      	ldrh	r3, [r3, #10]
 800cad0:	2b23      	cmp	r3, #35	@ 0x23
 800cad2:	d806      	bhi.n	800cae2 <icmp_send_response+0x3a>
 800cad4:	4b26      	ldr	r3, [pc, #152]	@ (800cb70 <icmp_send_response+0xc8>)
 800cad6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800cada:	4926      	ldr	r1, [pc, #152]	@ (800cb74 <icmp_send_response+0xcc>)
 800cadc:	4826      	ldr	r0, [pc, #152]	@ (800cb78 <icmp_send_response+0xd0>)
 800cade:	f002 f9a9 	bl	800ee34 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	78fa      	ldrb	r2, [r7, #3]
 800caf2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	78ba      	ldrb	r2, [r7, #2]
 800caf8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	2200      	movs	r2, #0
 800cafe:	711a      	strb	r2, [r3, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2200      	movs	r2, #0
 800cb08:	719a      	strb	r2, [r3, #6]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	f103 0008 	add.w	r0, r3, #8
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	221c      	movs	r2, #28
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	f002 fa82 	bl	800f026 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cb28:	f107 030c 	add.w	r3, r7, #12
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 f825 	bl	800cb7c <ip4_route>
 800cb32:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d011      	beq.n	800cb5e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	709a      	strb	r2, [r3, #2]
 800cb40:	2200      	movs	r2, #0
 800cb42:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cb44:	f107 020c 	add.w	r2, r7, #12
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	9302      	str	r3, [sp, #8]
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	2300      	movs	r3, #0
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	23ff      	movs	r3, #255	@ 0xff
 800cb56:	2100      	movs	r1, #0
 800cb58:	69f8      	ldr	r0, [r7, #28]
 800cb5a:	f000 f9cd 	bl	800cef8 <ip4_output_if>
  }
  pbuf_free(q);
 800cb5e:	69f8      	ldr	r0, [r7, #28]
 800cb60:	f7f8 f97a 	bl	8004e58 <pbuf_free>
 800cb64:	e000      	b.n	800cb68 <icmp_send_response+0xc0>
    return;
 800cb66:	bf00      	nop
}
 800cb68:	3720      	adds	r7, #32
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	080123fc 	.word	0x080123fc
 800cb74:	080124c8 	.word	0x080124c8
 800cb78:	0801246c 	.word	0x0801246c

0800cb7c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cb84:	4b33      	ldr	r3, [pc, #204]	@ (800cc54 <ip4_route+0xd8>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	e036      	b.n	800cbfa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d02b      	beq.n	800cbf4 <ip4_route+0x78>
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cba2:	089b      	lsrs	r3, r3, #2
 800cba4:	f003 0301 	and.w	r3, r3, #1
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d022      	beq.n	800cbf4 <ip4_route+0x78>
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d01d      	beq.n	800cbf4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	405a      	eors	r2, r3
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	3308      	adds	r3, #8
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4013      	ands	r3, r2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	e038      	b.n	800cc46 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cbda:	f003 0302 	and.w	r3, r3, #2
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d108      	bne.n	800cbf4 <ip4_route+0x78>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	330c      	adds	r3, #12
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d101      	bne.n	800cbf4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	e028      	b.n	800cc46 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1c5      	bne.n	800cb8c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cc00:	4b15      	ldr	r3, [pc, #84]	@ (800cc58 <ip4_route+0xdc>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d01a      	beq.n	800cc3e <ip4_route+0xc2>
 800cc08:	4b13      	ldr	r3, [pc, #76]	@ (800cc58 <ip4_route+0xdc>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cc10:	f003 0301 	and.w	r3, r3, #1
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d012      	beq.n	800cc3e <ip4_route+0xc2>
 800cc18:	4b0f      	ldr	r3, [pc, #60]	@ (800cc58 <ip4_route+0xdc>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cc20:	f003 0304 	and.w	r3, r3, #4
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00a      	beq.n	800cc3e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cc28:	4b0b      	ldr	r3, [pc, #44]	@ (800cc58 <ip4_route+0xdc>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d004      	beq.n	800cc3e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc3c:	d101      	bne.n	800cc42 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e001      	b.n	800cc46 <ip4_route+0xca>
  }

  return netif_default;
 800cc42:	4b05      	ldr	r3, [pc, #20]	@ (800cc58 <ip4_route+0xdc>)
 800cc44:	681b      	ldr	r3, [r3, #0]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3714      	adds	r7, #20
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	20003a34 	.word	0x20003a34
 800cc58:	20003a38 	.word	0x20003a38

0800cc5c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cc6a:	f003 0301 	and.w	r3, r3, #1
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d016      	beq.n	800cca2 <ip4_input_accept+0x46>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	3304      	adds	r3, #4
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d011      	beq.n	800cca2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cc7e:	4b0b      	ldr	r3, [pc, #44]	@ (800ccac <ip4_input_accept+0x50>)
 800cc80:	695a      	ldr	r2, [r3, #20]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	3304      	adds	r3, #4
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d008      	beq.n	800cc9e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cc8c:	4b07      	ldr	r3, [pc, #28]	@ (800ccac <ip4_input_accept+0x50>)
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	6879      	ldr	r1, [r7, #4]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fa08 	bl	800d0a8 <ip4_addr_isbroadcast_u32>
 800cc98:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e000      	b.n	800cca4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cca2:	2300      	movs	r3, #0
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	200004d0 	.word	0x200004d0

0800ccb0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	091b      	lsrs	r3, r3, #4
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b04      	cmp	r3, #4
 800ccca:	d004      	beq.n	800ccd6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f7f8 f8c3 	bl	8004e58 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	e107      	b.n	800cee6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	f003 030f 	and.w	r3, r3, #15
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	885b      	ldrh	r3, [r3, #2]
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7f6 fdb5 	bl	800385c <lwip_htons>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	891b      	ldrh	r3, [r3, #8]
 800ccfa:	89ba      	ldrh	r2, [r7, #12]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d204      	bcs.n	800cd0a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cd00:	89bb      	ldrh	r3, [r7, #12]
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7f7 ff21 	bl	8004b4c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	895b      	ldrh	r3, [r3, #10]
 800cd0e:	89fa      	ldrh	r2, [r7, #14]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d807      	bhi.n	800cd24 <ip4_input+0x74>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	891b      	ldrh	r3, [r3, #8]
 800cd18:	89ba      	ldrh	r2, [r7, #12]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d802      	bhi.n	800cd24 <ip4_input+0x74>
 800cd1e:	89fb      	ldrh	r3, [r7, #14]
 800cd20:	2b13      	cmp	r3, #19
 800cd22:	d804      	bhi.n	800cd2e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7f8 f897 	bl	8004e58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e0db      	b.n	800cee6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	4a6f      	ldr	r2, [pc, #444]	@ (800cef0 <ip4_input+0x240>)
 800cd34:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	4a6d      	ldr	r2, [pc, #436]	@ (800cef0 <ip4_input+0x240>)
 800cd3c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cd3e:	4b6c      	ldr	r3, [pc, #432]	@ (800cef0 <ip4_input+0x240>)
 800cd40:	695b      	ldr	r3, [r3, #20]
 800cd42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cd46:	2be0      	cmp	r3, #224	@ 0xe0
 800cd48:	d112      	bne.n	800cd70 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd50:	f003 0301 	and.w	r3, r3, #1
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d007      	beq.n	800cd6a <ip4_input+0xba>
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d002      	beq.n	800cd6a <ip4_input+0xba>
      netif = inp;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	613b      	str	r3, [r7, #16]
 800cd68:	e02a      	b.n	800cdc0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	613b      	str	r3, [r7, #16]
 800cd6e:	e027      	b.n	800cdc0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800cd70:	6838      	ldr	r0, [r7, #0]
 800cd72:	f7ff ff73 	bl	800cc5c <ip4_input_accept>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <ip4_input+0xd2>
      netif = inp;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	613b      	str	r3, [r7, #16]
 800cd80:	e01e      	b.n	800cdc0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cd86:	4b5a      	ldr	r3, [pc, #360]	@ (800cef0 <ip4_input+0x240>)
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd8e:	d017      	beq.n	800cdc0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cd90:	4b58      	ldr	r3, [pc, #352]	@ (800cef4 <ip4_input+0x244>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	613b      	str	r3, [r7, #16]
 800cd96:	e00e      	b.n	800cdb6 <ip4_input+0x106>
          if (netif == inp) {
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d006      	beq.n	800cdae <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800cda0:	6938      	ldr	r0, [r7, #16]
 800cda2:	f7ff ff5b 	bl	800cc5c <ip4_input_accept>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d108      	bne.n	800cdbe <ip4_input+0x10e>
 800cdac:	e000      	b.n	800cdb0 <ip4_input+0x100>
            continue;
 800cdae:	bf00      	nop
        NETIF_FOREACH(netif) {
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	613b      	str	r3, [r7, #16]
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1ed      	bne.n	800cd98 <ip4_input+0xe8>
 800cdbc:	e000      	b.n	800cdc0 <ip4_input+0x110>
            break;
 800cdbe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cdc0:	4b4b      	ldr	r3, [pc, #300]	@ (800cef0 <ip4_input+0x240>)
 800cdc2:	691b      	ldr	r3, [r3, #16]
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f000 f96e 	bl	800d0a8 <ip4_addr_isbroadcast_u32>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d105      	bne.n	800cdde <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cdd2:	4b47      	ldr	r3, [pc, #284]	@ (800cef0 <ip4_input+0x240>)
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cdda:	2be0      	cmp	r3, #224	@ 0xe0
 800cddc:	d104      	bne.n	800cde8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7f8 f83a 	bl	8004e58 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	e07e      	b.n	800cee6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d104      	bne.n	800cdf8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7f8 f832 	bl	8004e58 <pbuf_free>
    return ERR_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	e076      	b.n	800cee6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	88db      	ldrh	r3, [r3, #6]
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800ce04:	4013      	ands	r3, r2
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00b      	beq.n	800ce22 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fc92 	bl	800d734 <ip4_reass>
 800ce10:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <ip4_input+0x16c>
      return ERR_OK;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	e064      	b.n	800cee6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ce22:	4a33      	ldr	r2, [pc, #204]	@ (800cef0 <ip4_input+0x240>)
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ce28:	4a31      	ldr	r2, [pc, #196]	@ (800cef0 <ip4_input+0x240>)
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ce2e:	4a30      	ldr	r2, [pc, #192]	@ (800cef0 <ip4_input+0x240>)
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	f003 030f 	and.w	r3, r3, #15
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	461a      	mov	r2, r3
 800ce44:	4b2a      	ldr	r3, [pc, #168]	@ (800cef0 <ip4_input+0x240>)
 800ce46:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ce48:	89fb      	ldrh	r3, [r7, #14]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7f7 ff7d 	bl	8004d4c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	7a5b      	ldrb	r3, [r3, #9]
 800ce56:	2b11      	cmp	r3, #17
 800ce58:	d006      	beq.n	800ce68 <ip4_input+0x1b8>
 800ce5a:	2b11      	cmp	r3, #17
 800ce5c:	dc13      	bgt.n	800ce86 <ip4_input+0x1d6>
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d00c      	beq.n	800ce7c <ip4_input+0x1cc>
 800ce62:	2b06      	cmp	r3, #6
 800ce64:	d005      	beq.n	800ce72 <ip4_input+0x1c2>
 800ce66:	e00e      	b.n	800ce86 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ce68:	6839      	ldr	r1, [r7, #0]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7fe fc98 	bl	800b7a0 <udp_input>
        break;
 800ce70:	e026      	b.n	800cec0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7fa f8bf 	bl	8006ff8 <tcp_input>
        break;
 800ce7a:	e021      	b.n	800cec0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff fcee 	bl	800c860 <icmp_input>
        break;
 800ce84:	e01c      	b.n	800cec0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ce86:	4b1a      	ldr	r3, [pc, #104]	@ (800cef0 <ip4_input+0x240>)
 800ce88:	695b      	ldr	r3, [r3, #20]
 800ce8a:	6939      	ldr	r1, [r7, #16]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 f90b 	bl	800d0a8 <ip4_addr_isbroadcast_u32>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10f      	bne.n	800ceb8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ce98:	4b15      	ldr	r3, [pc, #84]	@ (800cef0 <ip4_input+0x240>)
 800ce9a:	695b      	ldr	r3, [r3, #20]
 800ce9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800cea0:	2be0      	cmp	r3, #224	@ 0xe0
 800cea2:	d009      	beq.n	800ceb8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800cea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7f7 ffc1 	bl	8004e32 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ceb0:	2102      	movs	r1, #2
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff fdd8 	bl	800ca68 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f7f7 ffcd 	bl	8004e58 <pbuf_free>
        break;
 800cebe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800cec0:	4b0b      	ldr	r3, [pc, #44]	@ (800cef0 <ip4_input+0x240>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800cec6:	4b0a      	ldr	r3, [pc, #40]	@ (800cef0 <ip4_input+0x240>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800cecc:	4b08      	ldr	r3, [pc, #32]	@ (800cef0 <ip4_input+0x240>)
 800cece:	2200      	movs	r2, #0
 800ced0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ced2:	4b07      	ldr	r3, [pc, #28]	@ (800cef0 <ip4_input+0x240>)
 800ced4:	2200      	movs	r2, #0
 800ced6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ced8:	4b05      	ldr	r3, [pc, #20]	@ (800cef0 <ip4_input+0x240>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800cede:	4b04      	ldr	r3, [pc, #16]	@ (800cef0 <ip4_input+0x240>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	200004d0 	.word	0x200004d0
 800cef4:	20003a34 	.word	0x20003a34

0800cef8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08a      	sub	sp, #40	@ 0x28
 800cefc:	af04      	add	r7, sp, #16
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d009      	beq.n	800cf24 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d003      	beq.n	800cf1e <ip4_output_if+0x26>
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d102      	bne.n	800cf24 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800cf1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf20:	3304      	adds	r3, #4
 800cf22:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800cf24:	78fa      	ldrb	r2, [r7, #3]
 800cf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf28:	9302      	str	r3, [sp, #8]
 800cf2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	4613      	mov	r3, r2
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	6979      	ldr	r1, [r7, #20]
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f000 f805 	bl	800cf4c <ip4_output_if_src>
 800cf42:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3718      	adds	r7, #24
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b088      	sub	sp, #32
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	7b9b      	ldrb	r3, [r3, #14]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d006      	beq.n	800cf70 <ip4_output_if_src+0x24>
 800cf62:	4b4b      	ldr	r3, [pc, #300]	@ (800d090 <ip4_output_if_src+0x144>)
 800cf64:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800cf68:	494a      	ldr	r1, [pc, #296]	@ (800d094 <ip4_output_if_src+0x148>)
 800cf6a:	484b      	ldr	r0, [pc, #300]	@ (800d098 <ip4_output_if_src+0x14c>)
 800cf6c:	f001 ff62 	bl	800ee34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d060      	beq.n	800d038 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cf76:	2314      	movs	r3, #20
 800cf78:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800cf7a:	2114      	movs	r1, #20
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f7f7 fed5 	bl	8004d2c <pbuf_add_header>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cf88:	f06f 0301 	mvn.w	r3, #1
 800cf8c:	e07c      	b.n	800d088 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	895b      	ldrh	r3, [r3, #10]
 800cf98:	2b13      	cmp	r3, #19
 800cf9a:	d806      	bhi.n	800cfaa <ip4_output_if_src+0x5e>
 800cf9c:	4b3c      	ldr	r3, [pc, #240]	@ (800d090 <ip4_output_if_src+0x144>)
 800cf9e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800cfa2:	493e      	ldr	r1, [pc, #248]	@ (800d09c <ip4_output_if_src+0x150>)
 800cfa4:	483c      	ldr	r0, [pc, #240]	@ (800d098 <ip4_output_if_src+0x14c>)
 800cfa6:	f001 ff45 	bl	800ee34 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	78fa      	ldrb	r2, [r7, #3]
 800cfae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800cfb6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cfc0:	8b7b      	ldrh	r3, [r7, #26]
 800cfc2:	089b      	lsrs	r3, r3, #2
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cfd8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	891b      	ldrh	r3, [r3, #8]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7f6 fc3c 	bl	800385c <lwip_htons>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	2200      	movs	r2, #0
 800cff0:	719a      	strb	r2, [r3, #6]
 800cff2:	2200      	movs	r2, #0
 800cff4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cff6:	4b2a      	ldr	r3, [pc, #168]	@ (800d0a0 <ip4_output_if_src+0x154>)
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7f6 fc2e 	bl	800385c <lwip_htons>
 800d000:	4603      	mov	r3, r0
 800d002:	461a      	mov	r2, r3
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d008:	4b25      	ldr	r3, [pc, #148]	@ (800d0a0 <ip4_output_if_src+0x154>)
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	3301      	adds	r3, #1
 800d00e:	b29a      	uxth	r2, r3
 800d010:	4b23      	ldr	r3, [pc, #140]	@ (800d0a0 <ip4_output_if_src+0x154>)
 800d012:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d104      	bne.n	800d024 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d01a:	4b22      	ldr	r3, [pc, #136]	@ (800d0a4 <ip4_output_if_src+0x158>)
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	60da      	str	r2, [r3, #12]
 800d022:	e003      	b.n	800d02c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	2200      	movs	r2, #0
 800d030:	729a      	strb	r2, [r3, #10]
 800d032:	2200      	movs	r2, #0
 800d034:	72da      	strb	r2, [r3, #11]
 800d036:	e00f      	b.n	800d058 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	895b      	ldrh	r3, [r3, #10]
 800d03c:	2b13      	cmp	r3, #19
 800d03e:	d802      	bhi.n	800d046 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d040:	f06f 0301 	mvn.w	r3, #1
 800d044:	e020      	b.n	800d088 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d052:	f107 0314 	add.w	r3, r7, #20
 800d056:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00c      	beq.n	800d07a <ip4_output_if_src+0x12e>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	891a      	ldrh	r2, [r3, #8]
 800d064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d066:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d068:	429a      	cmp	r2, r3
 800d06a:	d906      	bls.n	800d07a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d070:	68f8      	ldr	r0, [r7, #12]
 800d072:	f000 fd53 	bl	800db1c <ip4_frag>
 800d076:	4603      	mov	r3, r0
 800d078:	e006      	b.n	800d088 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07c:	695b      	ldr	r3, [r3, #20]
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	68f9      	ldr	r1, [r7, #12]
 800d082:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d084:	4798      	blx	r3
 800d086:	4603      	mov	r3, r0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3720      	adds	r7, #32
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	080124f4 	.word	0x080124f4
 800d094:	08012528 	.word	0x08012528
 800d098:	08012534 	.word	0x08012534
 800d09c:	0801255c 	.word	0x0801255c
 800d0a0:	20003b92 	.word	0x20003b92
 800d0a4:	08014480 	.word	0x08014480

0800d0a8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b085      	sub	sp, #20
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0bc:	d002      	beq.n	800d0c4 <ip4_addr_isbroadcast_u32+0x1c>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e02a      	b.n	800d11e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0ce:	f003 0302 	and.w	r3, r3, #2
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	e021      	b.n	800d11e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	3304      	adds	r3, #4
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d101      	bne.n	800d0ea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	e019      	b.n	800d11e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	405a      	eors	r2, r3
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	3308      	adds	r3, #8
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10d      	bne.n	800d11c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	3308      	adds	r3, #8
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	43da      	mvns	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	3308      	adds	r3, #8
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d114:	429a      	cmp	r2, r3
 800d116:	d101      	bne.n	800d11c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d118:	2301      	movs	r3, #1
 800d11a:	e000      	b.n	800d11e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d11c:	2300      	movs	r3, #0
  }
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
	...

0800d12c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d132:	2300      	movs	r3, #0
 800d134:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d136:	4b12      	ldr	r3, [pc, #72]	@ (800d180 <ip_reass_tmr+0x54>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d13c:	e018      	b.n	800d170 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	7fdb      	ldrb	r3, [r3, #31]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00b      	beq.n	800d15e <ip_reass_tmr+0x32>
      r->timer--;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	7fdb      	ldrb	r3, [r3, #31]
 800d14a:	3b01      	subs	r3, #1
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60fb      	str	r3, [r7, #12]
 800d15c:	e008      	b.n	800d170 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d168:	68b9      	ldr	r1, [r7, #8]
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f80a 	bl	800d184 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1e3      	bne.n	800d13e <ip_reass_tmr+0x12>
    }
  }
}
 800d176:	bf00      	nop
 800d178:	bf00      	nop
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	20003b94 	.word	0x20003b94

0800d184 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b088      	sub	sp, #32
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d192:	683a      	ldr	r2, [r7, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	429a      	cmp	r2, r3
 800d198:	d105      	bne.n	800d1a6 <ip_reass_free_complete_datagram+0x22>
 800d19a:	4b45      	ldr	r3, [pc, #276]	@ (800d2b0 <ip_reass_free_complete_datagram+0x12c>)
 800d19c:	22ab      	movs	r2, #171	@ 0xab
 800d19e:	4945      	ldr	r1, [pc, #276]	@ (800d2b4 <ip_reass_free_complete_datagram+0x130>)
 800d1a0:	4845      	ldr	r0, [pc, #276]	@ (800d2b8 <ip_reass_free_complete_datagram+0x134>)
 800d1a2:	f001 fe47 	bl	800ee34 <iprintf>
  if (prev != NULL) {
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00a      	beq.n	800d1c2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d005      	beq.n	800d1c2 <ip_reass_free_complete_datagram+0x3e>
 800d1b6:	4b3e      	ldr	r3, [pc, #248]	@ (800d2b0 <ip_reass_free_complete_datagram+0x12c>)
 800d1b8:	22ad      	movs	r2, #173	@ 0xad
 800d1ba:	4940      	ldr	r1, [pc, #256]	@ (800d2bc <ip_reass_free_complete_datagram+0x138>)
 800d1bc:	483e      	ldr	r0, [pc, #248]	@ (800d2b8 <ip_reass_free_complete_datagram+0x134>)
 800d1be:	f001 fe39 	bl	800ee34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	889b      	ldrh	r3, [r3, #4]
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d12a      	bne.n	800d22a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	6858      	ldr	r0, [r3, #4]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	3308      	adds	r3, #8
 800d1ea:	2214      	movs	r2, #20
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	f001 ff1a 	bl	800f026 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d1f2:	2101      	movs	r1, #1
 800d1f4:	69b8      	ldr	r0, [r7, #24]
 800d1f6:	f7ff fc47 	bl	800ca88 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d1fa:	69b8      	ldr	r0, [r7, #24]
 800d1fc:	f7f7 feb4 	bl	8004f68 <pbuf_clen>
 800d200:	4603      	mov	r3, r0
 800d202:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d204:	8bfa      	ldrh	r2, [r7, #30]
 800d206:	8a7b      	ldrh	r3, [r7, #18]
 800d208:	4413      	add	r3, r2
 800d20a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d20e:	db05      	blt.n	800d21c <ip_reass_free_complete_datagram+0x98>
 800d210:	4b27      	ldr	r3, [pc, #156]	@ (800d2b0 <ip_reass_free_complete_datagram+0x12c>)
 800d212:	22bc      	movs	r2, #188	@ 0xbc
 800d214:	492a      	ldr	r1, [pc, #168]	@ (800d2c0 <ip_reass_free_complete_datagram+0x13c>)
 800d216:	4828      	ldr	r0, [pc, #160]	@ (800d2b8 <ip_reass_free_complete_datagram+0x134>)
 800d218:	f001 fe0c 	bl	800ee34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d21c:	8bfa      	ldrh	r2, [r7, #30]
 800d21e:	8a7b      	ldrh	r3, [r7, #18]
 800d220:	4413      	add	r3, r2
 800d222:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d224:	69b8      	ldr	r0, [r7, #24]
 800d226:	f7f7 fe17 	bl	8004e58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d230:	e01f      	b.n	800d272 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f7f7 fe90 	bl	8004f68 <pbuf_clen>
 800d248:	4603      	mov	r3, r0
 800d24a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d24c:	8bfa      	ldrh	r2, [r7, #30]
 800d24e:	8a7b      	ldrh	r3, [r7, #18]
 800d250:	4413      	add	r3, r2
 800d252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d256:	db05      	blt.n	800d264 <ip_reass_free_complete_datagram+0xe0>
 800d258:	4b15      	ldr	r3, [pc, #84]	@ (800d2b0 <ip_reass_free_complete_datagram+0x12c>)
 800d25a:	22cc      	movs	r2, #204	@ 0xcc
 800d25c:	4918      	ldr	r1, [pc, #96]	@ (800d2c0 <ip_reass_free_complete_datagram+0x13c>)
 800d25e:	4816      	ldr	r0, [pc, #88]	@ (800d2b8 <ip_reass_free_complete_datagram+0x134>)
 800d260:	f001 fde8 	bl	800ee34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d264:	8bfa      	ldrh	r2, [r7, #30]
 800d266:	8a7b      	ldrh	r3, [r7, #18]
 800d268:	4413      	add	r3, r2
 800d26a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f7f7 fdf3 	bl	8004e58 <pbuf_free>
  while (p != NULL) {
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1dc      	bne.n	800d232 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f8c2 	bl	800d404 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d280:	4b10      	ldr	r3, [pc, #64]	@ (800d2c4 <ip_reass_free_complete_datagram+0x140>)
 800d282:	881b      	ldrh	r3, [r3, #0]
 800d284:	8bfa      	ldrh	r2, [r7, #30]
 800d286:	429a      	cmp	r2, r3
 800d288:	d905      	bls.n	800d296 <ip_reass_free_complete_datagram+0x112>
 800d28a:	4b09      	ldr	r3, [pc, #36]	@ (800d2b0 <ip_reass_free_complete_datagram+0x12c>)
 800d28c:	22d2      	movs	r2, #210	@ 0xd2
 800d28e:	490e      	ldr	r1, [pc, #56]	@ (800d2c8 <ip_reass_free_complete_datagram+0x144>)
 800d290:	4809      	ldr	r0, [pc, #36]	@ (800d2b8 <ip_reass_free_complete_datagram+0x134>)
 800d292:	f001 fdcf 	bl	800ee34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d296:	4b0b      	ldr	r3, [pc, #44]	@ (800d2c4 <ip_reass_free_complete_datagram+0x140>)
 800d298:	881a      	ldrh	r2, [r3, #0]
 800d29a:	8bfb      	ldrh	r3, [r7, #30]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	4b08      	ldr	r3, [pc, #32]	@ (800d2c4 <ip_reass_free_complete_datagram+0x140>)
 800d2a2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d2a4:	8bfb      	ldrh	r3, [r7, #30]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3720      	adds	r7, #32
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	0801258c 	.word	0x0801258c
 800d2b4:	080125c8 	.word	0x080125c8
 800d2b8:	080125d4 	.word	0x080125d4
 800d2bc:	080125fc 	.word	0x080125fc
 800d2c0:	08012610 	.word	0x08012610
 800d2c4:	20003b98 	.word	0x20003b98
 800d2c8:	08012630 	.word	0x08012630

0800d2cc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b08a      	sub	sp, #40	@ 0x28
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d2ea:	4b28      	ldr	r3, [pc, #160]	@ (800d38c <ip_reass_remove_oldest_datagram+0xc0>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d2f0:	e030      	b.n	800d354 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f4:	695a      	ldr	r2, [r3, #20]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d10c      	bne.n	800d318 <ip_reass_remove_oldest_datagram+0x4c>
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d300:	699a      	ldr	r2, [r3, #24]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	429a      	cmp	r2, r3
 800d308:	d106      	bne.n	800d318 <ip_reass_remove_oldest_datagram+0x4c>
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	899a      	ldrh	r2, [r3, #12]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	889b      	ldrh	r3, [r3, #4]
 800d312:	b29b      	uxth	r3, r3
 800d314:	429a      	cmp	r2, r3
 800d316:	d014      	beq.n	800d342 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	3301      	adds	r3, #1
 800d31c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d31e:	6a3b      	ldr	r3, [r7, #32]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d104      	bne.n	800d32e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d326:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	61bb      	str	r3, [r7, #24]
 800d32c:	e009      	b.n	800d342 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d330:	7fda      	ldrb	r2, [r3, #31]
 800d332:	6a3b      	ldr	r3, [r7, #32]
 800d334:	7fdb      	ldrb	r3, [r3, #31]
 800d336:	429a      	cmp	r2, r3
 800d338:	d803      	bhi.n	800d342 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1cb      	bne.n	800d2f2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d35a:	6a3b      	ldr	r3, [r7, #32]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d008      	beq.n	800d372 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d360:	69b9      	ldr	r1, [r7, #24]
 800d362:	6a38      	ldr	r0, [r7, #32]
 800d364:	f7ff ff0e 	bl	800d184 <ip_reass_free_complete_datagram>
 800d368:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	4413      	add	r3, r2
 800d370:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d372:	697a      	ldr	r2, [r7, #20]
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	429a      	cmp	r2, r3
 800d378:	da02      	bge.n	800d380 <ip_reass_remove_oldest_datagram+0xb4>
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	dcac      	bgt.n	800d2da <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d380:	697b      	ldr	r3, [r7, #20]
}
 800d382:	4618      	mov	r0, r3
 800d384:	3728      	adds	r7, #40	@ 0x28
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	20003b94 	.word	0x20003b94

0800d390 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d39a:	2004      	movs	r0, #4
 800d39c:	f7f6 ff0c 	bl	80041b8 <memp_malloc>
 800d3a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d110      	bne.n	800d3ca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7ff ff8e 	bl	800d2cc <ip_reass_remove_oldest_datagram>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	dc03      	bgt.n	800d3c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d3b8:	2004      	movs	r0, #4
 800d3ba:	f7f6 fefd 	bl	80041b8 <memp_malloc>
 800d3be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	e016      	b.n	800d3f8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d3ca:	2220      	movs	r2, #32
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f001 fd95 	bl	800eefe <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	220f      	movs	r2, #15
 800d3d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d3da:	4b09      	ldr	r3, [pc, #36]	@ (800d400 <ip_reass_enqueue_new_datagram+0x70>)
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d3e2:	4a07      	ldr	r2, [pc, #28]	@ (800d400 <ip_reass_enqueue_new_datagram+0x70>)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	3308      	adds	r3, #8
 800d3ec:	2214      	movs	r2, #20
 800d3ee:	6879      	ldr	r1, [r7, #4]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f001 fe18 	bl	800f026 <memcpy>
  return ipr;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	20003b94 	.word	0x20003b94

0800d404 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d40e:	4b10      	ldr	r3, [pc, #64]	@ (800d450 <ip_reass_dequeue_datagram+0x4c>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	429a      	cmp	r2, r3
 800d416:	d104      	bne.n	800d422 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a0c      	ldr	r2, [pc, #48]	@ (800d450 <ip_reass_dequeue_datagram+0x4c>)
 800d41e:	6013      	str	r3, [r2, #0]
 800d420:	e00d      	b.n	800d43e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d106      	bne.n	800d436 <ip_reass_dequeue_datagram+0x32>
 800d428:	4b0a      	ldr	r3, [pc, #40]	@ (800d454 <ip_reass_dequeue_datagram+0x50>)
 800d42a:	f240 1245 	movw	r2, #325	@ 0x145
 800d42e:	490a      	ldr	r1, [pc, #40]	@ (800d458 <ip_reass_dequeue_datagram+0x54>)
 800d430:	480a      	ldr	r0, [pc, #40]	@ (800d45c <ip_reass_dequeue_datagram+0x58>)
 800d432:	f001 fcff 	bl	800ee34 <iprintf>
    prev->next = ipr->next;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	2004      	movs	r0, #4
 800d442:	f7f6 ff29 	bl	8004298 <memp_free>
}
 800d446:	bf00      	nop
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	20003b94 	.word	0x20003b94
 800d454:	0801258c 	.word	0x0801258c
 800d458:	08012654 	.word	0x08012654
 800d45c:	080125d4 	.word	0x080125d4

0800d460 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b08c      	sub	sp, #48	@ 0x30
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d46c:	2300      	movs	r3, #0
 800d46e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d470:	2301      	movs	r3, #1
 800d472:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	885b      	ldrh	r3, [r3, #2]
 800d47e:	b29b      	uxth	r3, r3
 800d480:	4618      	mov	r0, r3
 800d482:	f7f6 f9eb 	bl	800385c <lwip_htons>
 800d486:	4603      	mov	r3, r0
 800d488:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	f003 030f 	and.w	r3, r3, #15
 800d492:	b2db      	uxtb	r3, r3
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d498:	7e7b      	ldrb	r3, [r7, #25]
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	8b7a      	ldrh	r2, [r7, #26]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d202      	bcs.n	800d4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a6:	e135      	b.n	800d714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d4a8:	7e7b      	ldrb	r3, [r7, #25]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	8b7a      	ldrh	r2, [r7, #26]
 800d4ae:	1ad3      	subs	r3, r2, r3
 800d4b0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	88db      	ldrh	r3, [r3, #6]
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7f6 f9cf 	bl	800385c <lwip_htons>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800d4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	701a      	strb	r2, [r3, #0]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	705a      	strb	r2, [r3, #1]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	709a      	strb	r2, [r3, #2]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e4:	8afa      	ldrh	r2, [r7, #22]
 800d4e6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d4e8:	8afa      	ldrh	r2, [r7, #22]
 800d4ea:	8b7b      	ldrh	r3, [r7, #26]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f6:	88db      	ldrh	r3, [r3, #6]
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	8afa      	ldrh	r2, [r7, #22]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d902      	bls.n	800d506 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d500:	f04f 33ff 	mov.w	r3, #4294967295
 800d504:	e106      	b.n	800d714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d50c:	e068      	b.n	800d5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d516:	889b      	ldrh	r3, [r3, #4]
 800d518:	b29a      	uxth	r2, r3
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	889b      	ldrh	r3, [r3, #4]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	429a      	cmp	r2, r3
 800d522:	d235      	bcs.n	800d590 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d528:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d020      	beq.n	800d572 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d532:	889b      	ldrh	r3, [r3, #4]
 800d534:	b29a      	uxth	r2, r3
 800d536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d538:	88db      	ldrh	r3, [r3, #6]
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d307      	bcc.n	800d550 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d542:	88db      	ldrh	r3, [r3, #6]
 800d544:	b29a      	uxth	r2, r3
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	889b      	ldrh	r3, [r3, #4]
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d902      	bls.n	800d556 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d550:	f04f 33ff 	mov.w	r3, #4294967295
 800d554:	e0de      	b.n	800d714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d558:	68ba      	ldr	r2, [r7, #8]
 800d55a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d55e:	88db      	ldrh	r3, [r3, #6]
 800d560:	b29a      	uxth	r2, r3
 800d562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d564:	889b      	ldrh	r3, [r3, #4]
 800d566:	b29b      	uxth	r3, r3
 800d568:	429a      	cmp	r2, r3
 800d56a:	d03d      	beq.n	800d5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d570:	e03a      	b.n	800d5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d574:	88db      	ldrh	r3, [r3, #6]
 800d576:	b29a      	uxth	r2, r3
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	889b      	ldrh	r3, [r3, #4]
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	429a      	cmp	r2, r3
 800d580:	d902      	bls.n	800d588 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d582:	f04f 33ff 	mov.w	r3, #4294967295
 800d586:	e0c5      	b.n	800d714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	605a      	str	r2, [r3, #4]
      break;
 800d58e:	e02b      	b.n	800d5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d592:	889b      	ldrh	r3, [r3, #4]
 800d594:	b29a      	uxth	r2, r3
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	889b      	ldrh	r3, [r3, #4]
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d102      	bne.n	800d5a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a4:	e0b6      	b.n	800d714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d5a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a8:	889b      	ldrh	r3, [r3, #4]
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	88db      	ldrh	r3, [r3, #6]
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d202      	bcs.n	800d5bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ba:	e0ab      	b.n	800d714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d009      	beq.n	800d5d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c4:	88db      	ldrh	r3, [r3, #6]
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	889b      	ldrh	r3, [r3, #4]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d001      	beq.n	800d5d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d193      	bne.n	800d50e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d5e6:	e000      	b.n	800d5ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d5e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d12d      	bne.n	800d64c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d01c      	beq.n	800d630 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f8:	88db      	ldrh	r3, [r3, #6]
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5fe:	889b      	ldrh	r3, [r3, #4]
 800d600:	b29b      	uxth	r3, r3
 800d602:	429a      	cmp	r2, r3
 800d604:	d906      	bls.n	800d614 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d606:	4b45      	ldr	r3, [pc, #276]	@ (800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d608:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800d60c:	4944      	ldr	r1, [pc, #272]	@ (800d720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d60e:	4845      	ldr	r0, [pc, #276]	@ (800d724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d610:	f001 fc10 	bl	800ee34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61c:	88db      	ldrh	r3, [r3, #6]
 800d61e:	b29a      	uxth	r2, r3
 800d620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d622:	889b      	ldrh	r3, [r3, #4]
 800d624:	b29b      	uxth	r3, r3
 800d626:	429a      	cmp	r2, r3
 800d628:	d010      	beq.n	800d64c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	623b      	str	r3, [r7, #32]
 800d62e:	e00d      	b.n	800d64c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	685b      	ldr	r3, [r3, #4]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d006      	beq.n	800d646 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d638:	4b38      	ldr	r3, [pc, #224]	@ (800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d63a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800d63e:	493a      	ldr	r1, [pc, #232]	@ (800d728 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d640:	4838      	ldr	r0, [pc, #224]	@ (800d724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d642:	f001 fbf7 	bl	800ee34 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d105      	bne.n	800d65e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	7f9b      	ldrb	r3, [r3, #30]
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d059      	beq.n	800d712 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d04f      	beq.n	800d704 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d006      	beq.n	800d67a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	889b      	ldrh	r3, [r3, #4]
 800d674:	b29b      	uxth	r3, r3
 800d676:	2b00      	cmp	r3, #0
 800d678:	d002      	beq.n	800d680 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	623b      	str	r3, [r7, #32]
 800d67e:	e041      	b.n	800d704 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d682:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800d684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d68a:	e012      	b.n	800d6b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800d692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d694:	88db      	ldrh	r3, [r3, #6]
 800d696:	b29a      	uxth	r2, r3
 800d698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69a:	889b      	ldrh	r3, [r3, #4]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d002      	beq.n	800d6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	623b      	str	r3, [r7, #32]
            break;
 800d6a6:	e007      	b.n	800d6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6aa:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800d6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1e9      	bne.n	800d68c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d6b8:	6a3b      	ldr	r3, [r7, #32]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d022      	beq.n	800d704 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d106      	bne.n	800d6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d6c6:	4b15      	ldr	r3, [pc, #84]	@ (800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d6c8:	f240 12df 	movw	r2, #479	@ 0x1df
 800d6cc:	4917      	ldr	r1, [pc, #92]	@ (800d72c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d6ce:	4815      	ldr	r0, [pc, #84]	@ (800d724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d6d0:	f001 fbb0 	bl	800ee34 <iprintf>
          LWIP_ASSERT("sanity check",
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d106      	bne.n	800d6ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d6e0:	4b0e      	ldr	r3, [pc, #56]	@ (800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d6e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d6e6:	4911      	ldr	r1, [pc, #68]	@ (800d72c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d6e8:	480e      	ldr	r0, [pc, #56]	@ (800d724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d6ea:	f001 fba3 	bl	800ee34 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d006      	beq.n	800d704 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d6f6:	4b09      	ldr	r3, [pc, #36]	@ (800d71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d6f8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800d6fc:	490c      	ldr	r1, [pc, #48]	@ (800d730 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d6fe:	4809      	ldr	r0, [pc, #36]	@ (800d724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d700:	f001 fb98 	bl	800ee34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	2b00      	cmp	r3, #0
 800d708:	bf14      	ite	ne
 800d70a:	2301      	movne	r3, #1
 800d70c:	2300      	moveq	r3, #0
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	e000      	b.n	800d714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3730      	adds	r7, #48	@ 0x30
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	0801258c 	.word	0x0801258c
 800d720:	08012670 	.word	0x08012670
 800d724:	080125d4 	.word	0x080125d4
 800d728:	08012690 	.word	0x08012690
 800d72c:	080126c8 	.word	0x080126c8
 800d730:	080126d8 	.word	0x080126d8

0800d734 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b08e      	sub	sp, #56	@ 0x38
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	f003 030f 	and.w	r3, r3, #15
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b14      	cmp	r3, #20
 800d752:	f040 8171 	bne.w	800da38 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d758:	88db      	ldrh	r3, [r3, #6]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7f6 f87d 	bl	800385c <lwip_htons>
 800d762:	4603      	mov	r3, r0
 800d764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d768:	b29b      	uxth	r3, r3
 800d76a:	00db      	lsls	r3, r3, #3
 800d76c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d770:	885b      	ldrh	r3, [r3, #2]
 800d772:	b29b      	uxth	r3, r3
 800d774:	4618      	mov	r0, r3
 800d776:	f7f6 f871 	bl	800385c <lwip_htons>
 800d77a:	4603      	mov	r3, r0
 800d77c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	f003 030f 	and.w	r3, r3, #15
 800d786:	b2db      	uxtb	r3, r3
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800d78e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d792:	b29b      	uxth	r3, r3
 800d794:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d796:	429a      	cmp	r2, r3
 800d798:	f0c0 8150 	bcc.w	800da3c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d79c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7f7 fbdd 	bl	8004f68 <pbuf_clen>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d7b2:	4b8c      	ldr	r3, [pc, #560]	@ (800d9e4 <ip4_reass+0x2b0>)
 800d7b4:	881b      	ldrh	r3, [r3, #0]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	8c3b      	ldrh	r3, [r7, #32]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	2b0a      	cmp	r3, #10
 800d7be:	dd10      	ble.n	800d7e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d7c0:	8c3b      	ldrh	r3, [r7, #32]
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7c6:	f7ff fd81 	bl	800d2cc <ip_reass_remove_oldest_datagram>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f000 8137 	beq.w	800da40 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d7d2:	4b84      	ldr	r3, [pc, #528]	@ (800d9e4 <ip4_reass+0x2b0>)
 800d7d4:	881b      	ldrh	r3, [r3, #0]
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	8c3b      	ldrh	r3, [r7, #32]
 800d7da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d7dc:	2b0a      	cmp	r3, #10
 800d7de:	f300 812f 	bgt.w	800da40 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d7e2:	4b81      	ldr	r3, [pc, #516]	@ (800d9e8 <ip4_reass+0x2b4>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7e8:	e015      	b.n	800d816 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ec:	695a      	ldr	r2, [r3, #20]
 800d7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d10c      	bne.n	800d810 <ip4_reass+0xdc>
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f8:	699a      	ldr	r2, [r3, #24]
 800d7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fc:	691b      	ldr	r3, [r3, #16]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d106      	bne.n	800d810 <ip4_reass+0xdc>
 800d802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d804:	899a      	ldrh	r2, [r3, #12]
 800d806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d808:	889b      	ldrh	r3, [r3, #4]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d006      	beq.n	800d81e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	633b      	str	r3, [r7, #48]	@ 0x30
 800d816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d1e6      	bne.n	800d7ea <ip4_reass+0xb6>
 800d81c:	e000      	b.n	800d820 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d81e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d822:	2b00      	cmp	r3, #0
 800d824:	d109      	bne.n	800d83a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d826:	8c3b      	ldrh	r3, [r7, #32]
 800d828:	4619      	mov	r1, r3
 800d82a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d82c:	f7ff fdb0 	bl	800d390 <ip_reass_enqueue_new_datagram>
 800d830:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	2b00      	cmp	r3, #0
 800d836:	d11c      	bne.n	800d872 <ip4_reass+0x13e>
      goto nullreturn;
 800d838:	e105      	b.n	800da46 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83c:	88db      	ldrh	r3, [r3, #6]
 800d83e:	b29b      	uxth	r3, r3
 800d840:	4618      	mov	r0, r3
 800d842:	f7f6 f80b 	bl	800385c <lwip_htons>
 800d846:	4603      	mov	r3, r0
 800d848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d110      	bne.n	800d872 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d852:	89db      	ldrh	r3, [r3, #14]
 800d854:	4618      	mov	r0, r3
 800d856:	f7f6 f801 	bl	800385c <lwip_htons>
 800d85a:	4603      	mov	r3, r0
 800d85c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d860:	2b00      	cmp	r3, #0
 800d862:	d006      	beq.n	800d872 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d866:	3308      	adds	r3, #8
 800d868:	2214      	movs	r2, #20
 800d86a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d86c:	4618      	mov	r0, r3
 800d86e:	f001 fbda 	bl	800f026 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d874:	88db      	ldrh	r3, [r3, #6]
 800d876:	b29b      	uxth	r3, r3
 800d878:	f003 0320 	and.w	r3, r3, #32
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	bf0c      	ite	eq
 800d880:	2301      	moveq	r3, #1
 800d882:	2300      	movne	r3, #0
 800d884:	b2db      	uxtb	r3, r3
 800d886:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00e      	beq.n	800d8ac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d88e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d890:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d892:	4413      	add	r3, r2
 800d894:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d896:	8b7a      	ldrh	r2, [r7, #26]
 800d898:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d89a:	429a      	cmp	r2, r3
 800d89c:	f0c0 80a0 	bcc.w	800d9e0 <ip4_reass+0x2ac>
 800d8a0:	8b7b      	ldrh	r3, [r7, #26]
 800d8a2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	f200 809a 	bhi.w	800d9e0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d8ac:	69fa      	ldr	r2, [r7, #28]
 800d8ae:	6879      	ldr	r1, [r7, #4]
 800d8b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8b2:	f7ff fdd5 	bl	800d460 <ip_reass_chain_frag_into_datagram_and_validate>
 800d8b6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8be:	f000 809b 	beq.w	800d9f8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d8c2:	4b48      	ldr	r3, [pc, #288]	@ (800d9e4 <ip4_reass+0x2b0>)
 800d8c4:	881a      	ldrh	r2, [r3, #0]
 800d8c6:	8c3b      	ldrh	r3, [r7, #32]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	4b45      	ldr	r3, [pc, #276]	@ (800d9e4 <ip4_reass+0x2b0>)
 800d8ce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00d      	beq.n	800d8f2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d8d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d8d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d8da:	4413      	add	r3, r2
 800d8dc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e0:	8a7a      	ldrh	r2, [r7, #18]
 800d8e2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e6:	7f9b      	ldrb	r3, [r3, #30]
 800d8e8:	f043 0301 	orr.w	r3, r3, #1
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d171      	bne.n	800d9dc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8fa:	8b9b      	ldrh	r3, [r3, #28]
 800d8fc:	3314      	adds	r3, #20
 800d8fe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d914:	3308      	adds	r3, #8
 800d916:	2214      	movs	r2, #20
 800d918:	4619      	mov	r1, r3
 800d91a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d91c:	f001 fb83 	bl	800f026 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d920:	8a3b      	ldrh	r3, [r7, #16]
 800d922:	4618      	mov	r0, r3
 800d924:	f7f5 ff9a 	bl	800385c <lwip_htons>
 800d928:	4603      	mov	r3, r0
 800d92a:	461a      	mov	r2, r3
 800d92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d932:	2200      	movs	r2, #0
 800d934:	719a      	strb	r2, [r3, #6]
 800d936:	2200      	movs	r2, #0
 800d938:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93c:	2200      	movs	r2, #0
 800d93e:	729a      	strb	r2, [r3, #10]
 800d940:	2200      	movs	r2, #0
 800d942:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d94a:	e00d      	b.n	800d968 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d952:	2114      	movs	r1, #20
 800d954:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d956:	f7f7 f9f9 	bl	8004d4c <pbuf_remove_header>
      pbuf_cat(p, r);
 800d95a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7f7 fb3d 	bl	8004fdc <pbuf_cat>
      r = iprh->next_pbuf;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1ee      	bne.n	800d94c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d96e:	4b1e      	ldr	r3, [pc, #120]	@ (800d9e8 <ip4_reass+0x2b4>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d974:	429a      	cmp	r2, r3
 800d976:	d102      	bne.n	800d97e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d978:	2300      	movs	r3, #0
 800d97a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d97c:	e010      	b.n	800d9a0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d97e:	4b1a      	ldr	r3, [pc, #104]	@ (800d9e8 <ip4_reass+0x2b4>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d984:	e007      	b.n	800d996 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d006      	beq.n	800d99e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1f4      	bne.n	800d986 <ip4_reass+0x252>
 800d99c:	e000      	b.n	800d9a0 <ip4_reass+0x26c>
          break;
 800d99e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d9a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9a4:	f7ff fd2e 	bl	800d404 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7f7 fadd 	bl	8004f68 <pbuf_clen>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d9b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e4 <ip4_reass+0x2b0>)
 800d9b4:	881b      	ldrh	r3, [r3, #0]
 800d9b6:	8c3a      	ldrh	r2, [r7, #32]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d906      	bls.n	800d9ca <ip4_reass+0x296>
 800d9bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d9ec <ip4_reass+0x2b8>)
 800d9be:	f240 229b 	movw	r2, #667	@ 0x29b
 800d9c2:	490b      	ldr	r1, [pc, #44]	@ (800d9f0 <ip4_reass+0x2bc>)
 800d9c4:	480b      	ldr	r0, [pc, #44]	@ (800d9f4 <ip4_reass+0x2c0>)
 800d9c6:	f001 fa35 	bl	800ee34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d9ca:	4b06      	ldr	r3, [pc, #24]	@ (800d9e4 <ip4_reass+0x2b0>)
 800d9cc:	881a      	ldrh	r2, [r3, #0]
 800d9ce:	8c3b      	ldrh	r3, [r7, #32]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	4b03      	ldr	r3, [pc, #12]	@ (800d9e4 <ip4_reass+0x2b0>)
 800d9d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	e038      	b.n	800da4e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	e036      	b.n	800da4e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800d9e0:	bf00      	nop
 800d9e2:	e00a      	b.n	800d9fa <ip4_reass+0x2c6>
 800d9e4:	20003b98 	.word	0x20003b98
 800d9e8:	20003b94 	.word	0x20003b94
 800d9ec:	0801258c 	.word	0x0801258c
 800d9f0:	080126fc 	.word	0x080126fc
 800d9f4:	080125d4 	.word	0x080125d4
    goto nullreturn_ipr;
 800d9f8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d106      	bne.n	800da0e <ip4_reass+0x2da>
 800da00:	4b15      	ldr	r3, [pc, #84]	@ (800da58 <ip4_reass+0x324>)
 800da02:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800da06:	4915      	ldr	r1, [pc, #84]	@ (800da5c <ip4_reass+0x328>)
 800da08:	4815      	ldr	r0, [pc, #84]	@ (800da60 <ip4_reass+0x32c>)
 800da0a:	f001 fa13 	bl	800ee34 <iprintf>
  if (ipr->p == NULL) {
 800da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d116      	bne.n	800da44 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800da16:	4b13      	ldr	r3, [pc, #76]	@ (800da64 <ip4_reass+0x330>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d006      	beq.n	800da2e <ip4_reass+0x2fa>
 800da20:	4b0d      	ldr	r3, [pc, #52]	@ (800da58 <ip4_reass+0x324>)
 800da22:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800da26:	4910      	ldr	r1, [pc, #64]	@ (800da68 <ip4_reass+0x334>)
 800da28:	480d      	ldr	r0, [pc, #52]	@ (800da60 <ip4_reass+0x32c>)
 800da2a:	f001 fa03 	bl	800ee34 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800da2e:	2100      	movs	r1, #0
 800da30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da32:	f7ff fce7 	bl	800d404 <ip_reass_dequeue_datagram>
 800da36:	e006      	b.n	800da46 <ip4_reass+0x312>
    goto nullreturn;
 800da38:	bf00      	nop
 800da3a:	e004      	b.n	800da46 <ip4_reass+0x312>
    goto nullreturn;
 800da3c:	bf00      	nop
 800da3e:	e002      	b.n	800da46 <ip4_reass+0x312>
      goto nullreturn;
 800da40:	bf00      	nop
 800da42:	e000      	b.n	800da46 <ip4_reass+0x312>
  }

nullreturn:
 800da44:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7f7 fa06 	bl	8004e58 <pbuf_free>
  return NULL;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3738      	adds	r7, #56	@ 0x38
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	0801258c 	.word	0x0801258c
 800da5c:	08012718 	.word	0x08012718
 800da60:	080125d4 	.word	0x080125d4
 800da64:	20003b94 	.word	0x20003b94
 800da68:	08012724 	.word	0x08012724

0800da6c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800da70:	2005      	movs	r0, #5
 800da72:	f7f6 fba1 	bl	80041b8 <memp_malloc>
 800da76:	4603      	mov	r3, r0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d106      	bne.n	800da98 <ip_frag_free_pbuf_custom_ref+0x1c>
 800da8a:	4b07      	ldr	r3, [pc, #28]	@ (800daa8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800da8c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800da90:	4906      	ldr	r1, [pc, #24]	@ (800daac <ip_frag_free_pbuf_custom_ref+0x30>)
 800da92:	4807      	ldr	r0, [pc, #28]	@ (800dab0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800da94:	f001 f9ce 	bl	800ee34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800da98:	6879      	ldr	r1, [r7, #4]
 800da9a:	2005      	movs	r0, #5
 800da9c:	f7f6 fbfc 	bl	8004298 <memp_free>
}
 800daa0:	bf00      	nop
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	0801258c 	.word	0x0801258c
 800daac:	08012744 	.word	0x08012744
 800dab0:	080125d4 	.word	0x080125d4

0800dab4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d106      	bne.n	800dad4 <ipfrag_free_pbuf_custom+0x20>
 800dac6:	4b11      	ldr	r3, [pc, #68]	@ (800db0c <ipfrag_free_pbuf_custom+0x58>)
 800dac8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800dacc:	4910      	ldr	r1, [pc, #64]	@ (800db10 <ipfrag_free_pbuf_custom+0x5c>)
 800dace:	4811      	ldr	r0, [pc, #68]	@ (800db14 <ipfrag_free_pbuf_custom+0x60>)
 800dad0:	f001 f9b0 	bl	800ee34 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d006      	beq.n	800daea <ipfrag_free_pbuf_custom+0x36>
 800dadc:	4b0b      	ldr	r3, [pc, #44]	@ (800db0c <ipfrag_free_pbuf_custom+0x58>)
 800dade:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800dae2:	490d      	ldr	r1, [pc, #52]	@ (800db18 <ipfrag_free_pbuf_custom+0x64>)
 800dae4:	480b      	ldr	r0, [pc, #44]	@ (800db14 <ipfrag_free_pbuf_custom+0x60>)
 800dae6:	f001 f9a5 	bl	800ee34 <iprintf>
  if (pcr->original != NULL) {
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d004      	beq.n	800dafc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	695b      	ldr	r3, [r3, #20]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7f7 f9ae 	bl	8004e58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7ff ffbd 	bl	800da7c <ip_frag_free_pbuf_custom_ref>
}
 800db02:	bf00      	nop
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	0801258c 	.word	0x0801258c
 800db10:	08012750 	.word	0x08012750
 800db14:	080125d4 	.word	0x080125d4
 800db18:	0801275c 	.word	0x0801275c

0800db1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b094      	sub	sp, #80	@ 0x50
 800db20:	af02      	add	r7, sp, #8
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800db28:	2300      	movs	r3, #0
 800db2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800db32:	3b14      	subs	r3, #20
 800db34:	2b00      	cmp	r3, #0
 800db36:	da00      	bge.n	800db3a <ip4_frag+0x1e>
 800db38:	3307      	adds	r3, #7
 800db3a:	10db      	asrs	r3, r3, #3
 800db3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800db3e:	2314      	movs	r3, #20
 800db40:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800db48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db4a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800db4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	f003 030f 	and.w	r3, r3, #15
 800db54:	b2db      	uxtb	r3, r3
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b14      	cmp	r3, #20
 800db5c:	d002      	beq.n	800db64 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800db5e:	f06f 0305 	mvn.w	r3, #5
 800db62:	e110      	b.n	800dd86 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	895b      	ldrh	r3, [r3, #10]
 800db68:	2b13      	cmp	r3, #19
 800db6a:	d809      	bhi.n	800db80 <ip4_frag+0x64>
 800db6c:	4b88      	ldr	r3, [pc, #544]	@ (800dd90 <ip4_frag+0x274>)
 800db6e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800db72:	4988      	ldr	r1, [pc, #544]	@ (800dd94 <ip4_frag+0x278>)
 800db74:	4888      	ldr	r0, [pc, #544]	@ (800dd98 <ip4_frag+0x27c>)
 800db76:	f001 f95d 	bl	800ee34 <iprintf>
 800db7a:	f06f 0305 	mvn.w	r3, #5
 800db7e:	e102      	b.n	800dd86 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800db80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db82:	88db      	ldrh	r3, [r3, #6]
 800db84:	b29b      	uxth	r3, r3
 800db86:	4618      	mov	r0, r3
 800db88:	f7f5 fe68 	bl	800385c <lwip_htons>
 800db8c:	4603      	mov	r3, r0
 800db8e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800db90:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800db92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db96:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800db9a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800db9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dba0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	891b      	ldrh	r3, [r3, #8]
 800dba6:	3b14      	subs	r3, #20
 800dba8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800dbac:	e0e1      	b.n	800dd72 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dbae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dbb0:	00db      	lsls	r3, r3, #3
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	bf28      	it	cs
 800dbbc:	4613      	movcs	r3, r2
 800dbbe:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dbc0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dbc4:	2114      	movs	r1, #20
 800dbc6:	200e      	movs	r0, #14
 800dbc8:	f7f6 fe62 	bl	8004890 <pbuf_alloc>
 800dbcc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800dbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 80d5 	beq.w	800dd80 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd8:	895b      	ldrh	r3, [r3, #10]
 800dbda:	2b13      	cmp	r3, #19
 800dbdc:	d806      	bhi.n	800dbec <ip4_frag+0xd0>
 800dbde:	4b6c      	ldr	r3, [pc, #432]	@ (800dd90 <ip4_frag+0x274>)
 800dbe0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800dbe4:	496d      	ldr	r1, [pc, #436]	@ (800dd9c <ip4_frag+0x280>)
 800dbe6:	486c      	ldr	r0, [pc, #432]	@ (800dd98 <ip4_frag+0x27c>)
 800dbe8:	f001 f924 	bl	800ee34 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	2214      	movs	r2, #20
 800dbf2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f001 fa16 	bl	800f026 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800dc00:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dc02:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800dc06:	e064      	b.n	800dcd2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	895a      	ldrh	r2, [r3, #10]
 800dc0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	895b      	ldrh	r3, [r3, #10]
 800dc16:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d906      	bls.n	800dc2a <ip4_frag+0x10e>
 800dc1c:	4b5c      	ldr	r3, [pc, #368]	@ (800dd90 <ip4_frag+0x274>)
 800dc1e:	f240 322d 	movw	r2, #813	@ 0x32d
 800dc22:	495f      	ldr	r1, [pc, #380]	@ (800dda0 <ip4_frag+0x284>)
 800dc24:	485c      	ldr	r0, [pc, #368]	@ (800dd98 <ip4_frag+0x27c>)
 800dc26:	f001 f905 	bl	800ee34 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dc2a:	8bfa      	ldrh	r2, [r7, #30]
 800dc2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dc30:	4293      	cmp	r3, r2
 800dc32:	bf28      	it	cs
 800dc34:	4613      	movcs	r3, r2
 800dc36:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dc3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d105      	bne.n	800dc4e <ip4_frag+0x132>
        poff = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	60fb      	str	r3, [r7, #12]
        continue;
 800dc4c:	e041      	b.n	800dcd2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800dc4e:	f7ff ff0d 	bl	800da6c <ip_frag_alloc_pbuf_custom_ref>
 800dc52:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800dc54:	69bb      	ldr	r3, [r7, #24]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d103      	bne.n	800dc62 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800dc5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc5c:	f7f7 f8fc 	bl	8004e58 <pbuf_free>
        goto memerr;
 800dc60:	e08f      	b.n	800dd82 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dc62:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dc68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800dc6a:	4413      	add	r3, r2
 800dc6c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800dc70:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800dc74:	9201      	str	r2, [sp, #4]
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2241      	movs	r2, #65	@ 0x41
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	f7f6 ff31 	bl	8004ae4 <pbuf_alloced_custom>
 800dc82:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d106      	bne.n	800dc98 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800dc8a:	69b8      	ldr	r0, [r7, #24]
 800dc8c:	f7ff fef6 	bl	800da7c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800dc90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc92:	f7f7 f8e1 	bl	8004e58 <pbuf_free>
        goto memerr;
 800dc96:	e074      	b.n	800dd82 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f7f7 f97d 	bl	8004f98 <pbuf_ref>
      pcr->original = p;
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	4a3f      	ldr	r2, [pc, #252]	@ (800dda4 <ip4_frag+0x288>)
 800dca8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800dcaa:	6979      	ldr	r1, [r7, #20]
 800dcac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dcae:	f7f7 f995 	bl	8004fdc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800dcb2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800dcb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800dcc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d004      	beq.n	800dcd2 <ip4_frag+0x1b6>
        poff = 0;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800dcd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d196      	bne.n	800dc08 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800dcda:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800dcdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dce0:	4413      	add	r3, r2
 800dce2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dce8:	f1a3 0213 	sub.w	r2, r3, #19
 800dcec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	bfcc      	ite	gt
 800dcf4:	2301      	movgt	r3, #1
 800dcf6:	2300      	movle	r3, #0
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dcfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dd00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd04:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <ip4_frag+0x1f6>
 800dd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d003      	beq.n	800dd1a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800dd12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dd14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800dd18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800dd1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7f5 fd9d 	bl	800385c <lwip_htons>
 800dd22:	4603      	mov	r3, r0
 800dd24:	461a      	mov	r2, r3
 800dd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd28:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800dd2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dd2c:	3314      	adds	r3, #20
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7f5 fd93 	bl	800385c <lwip_htons>
 800dd36:	4603      	mov	r3, r0
 800dd38:	461a      	mov	r2, r3
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800dd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd40:	2200      	movs	r2, #0
 800dd42:	729a      	strb	r2, [r3, #10]
 800dd44:	2200      	movs	r2, #0
 800dd46:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	695b      	ldr	r3, [r3, #20]
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd50:	68b8      	ldr	r0, [r7, #8]
 800dd52:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800dd54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dd56:	f7f7 f87f 	bl	8004e58 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800dd5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dd5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800dd66:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800dd6a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800dd72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f47f af19 	bne.w	800dbae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	e002      	b.n	800dd86 <ip4_frag+0x26a>
      goto memerr;
 800dd80:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dd82:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3748      	adds	r7, #72	@ 0x48
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	0801258c 	.word	0x0801258c
 800dd94:	08012768 	.word	0x08012768
 800dd98:	080125d4 	.word	0x080125d4
 800dd9c:	08012784 	.word	0x08012784
 800dda0:	080127a4 	.word	0x080127a4
 800dda4:	0800dab5 	.word	0x0800dab5

0800dda8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ddb2:	230e      	movs	r3, #14
 800ddb4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	895b      	ldrh	r3, [r3, #10]
 800ddba:	2b0e      	cmp	r3, #14
 800ddbc:	d96e      	bls.n	800de9c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	7bdb      	ldrb	r3, [r3, #15]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d106      	bne.n	800ddd4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ddcc:	3301      	adds	r3, #1
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	7b1a      	ldrb	r2, [r3, #12]
 800ddde:	7b5b      	ldrb	r3, [r3, #13]
 800dde0:	021b      	lsls	r3, r3, #8
 800dde2:	4313      	orrs	r3, r2
 800dde4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	f003 0301 	and.w	r3, r3, #1
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d023      	beq.n	800de3a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d10f      	bne.n	800de1a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	785b      	ldrb	r3, [r3, #1]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d11b      	bne.n	800de3a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800de06:	2b5e      	cmp	r3, #94	@ 0x5e
 800de08:	d117      	bne.n	800de3a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	7b5b      	ldrb	r3, [r3, #13]
 800de0e:	f043 0310 	orr.w	r3, r3, #16
 800de12:	b2da      	uxtb	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	735a      	strb	r2, [r3, #13]
 800de18:	e00f      	b.n	800de3a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	2206      	movs	r2, #6
 800de1e:	4928      	ldr	r1, [pc, #160]	@ (800dec0 <ethernet_input+0x118>)
 800de20:	4618      	mov	r0, r3
 800de22:	f001 f85c 	bl	800eede <memcmp>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d106      	bne.n	800de3a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	7b5b      	ldrb	r3, [r3, #13]
 800de30:	f043 0308 	orr.w	r3, r3, #8
 800de34:	b2da      	uxtb	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800de3a:	89fb      	ldrh	r3, [r7, #14]
 800de3c:	2b08      	cmp	r3, #8
 800de3e:	d003      	beq.n	800de48 <ethernet_input+0xa0>
 800de40:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800de44:	d014      	beq.n	800de70 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800de46:	e032      	b.n	800deae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de4e:	f003 0308 	and.w	r3, r3, #8
 800de52:	2b00      	cmp	r3, #0
 800de54:	d024      	beq.n	800dea0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800de56:	8afb      	ldrh	r3, [r7, #22]
 800de58:	4619      	mov	r1, r3
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7f6 ff76 	bl	8004d4c <pbuf_remove_header>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d11e      	bne.n	800dea4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800de66:	6839      	ldr	r1, [r7, #0]
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7fe ff21 	bl	800ccb0 <ip4_input>
      break;
 800de6e:	e013      	b.n	800de98 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de76:	f003 0308 	and.w	r3, r3, #8
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d014      	beq.n	800dea8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800de7e:	8afb      	ldrh	r3, [r7, #22]
 800de80:	4619      	mov	r1, r3
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f7f6 ff62 	bl	8004d4c <pbuf_remove_header>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d10e      	bne.n	800deac <ethernet_input+0x104>
        etharp_input(p, netif);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7fe f8c1 	bl	800c018 <etharp_input>
      break;
 800de96:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	e00c      	b.n	800deb6 <ethernet_input+0x10e>
    goto free_and_return;
 800de9c:	bf00      	nop
 800de9e:	e006      	b.n	800deae <ethernet_input+0x106>
        goto free_and_return;
 800dea0:	bf00      	nop
 800dea2:	e004      	b.n	800deae <ethernet_input+0x106>
        goto free_and_return;
 800dea4:	bf00      	nop
 800dea6:	e002      	b.n	800deae <ethernet_input+0x106>
        goto free_and_return;
 800dea8:	bf00      	nop
 800deaa:	e000      	b.n	800deae <ethernet_input+0x106>
        goto free_and_return;
 800deac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7f6 ffd2 	bl	8004e58 <pbuf_free>
  return ERR_OK;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	08014484 	.word	0x08014484

0800dec4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ded2:	8c3b      	ldrh	r3, [r7, #32]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7f5 fcc1 	bl	800385c <lwip_htons>
 800deda:	4603      	mov	r3, r0
 800dedc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800dede:	210e      	movs	r1, #14
 800dee0:	68b8      	ldr	r0, [r7, #8]
 800dee2:	f7f6 ff23 	bl	8004d2c <pbuf_add_header>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d125      	bne.n	800df38 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	8afa      	ldrh	r2, [r7, #22]
 800def6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	2206      	movs	r2, #6
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	4618      	mov	r0, r3
 800df00:	f001 f891 	bl	800f026 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	3306      	adds	r3, #6
 800df08:	2206      	movs	r2, #6
 800df0a:	6879      	ldr	r1, [r7, #4]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f001 f88a 	bl	800f026 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800df18:	2b06      	cmp	r3, #6
 800df1a:	d006      	beq.n	800df2a <ethernet_output+0x66>
 800df1c:	4b0a      	ldr	r3, [pc, #40]	@ (800df48 <ethernet_output+0x84>)
 800df1e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800df22:	490a      	ldr	r1, [pc, #40]	@ (800df4c <ethernet_output+0x88>)
 800df24:	480a      	ldr	r0, [pc, #40]	@ (800df50 <ethernet_output+0x8c>)
 800df26:	f000 ff85 	bl	800ee34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	699b      	ldr	r3, [r3, #24]
 800df2e:	68b9      	ldr	r1, [r7, #8]
 800df30:	68f8      	ldr	r0, [r7, #12]
 800df32:	4798      	blx	r3
 800df34:	4603      	mov	r3, r0
 800df36:	e002      	b.n	800df3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800df38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800df3a:	f06f 0301 	mvn.w	r3, #1
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3718      	adds	r7, #24
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	080127b4 	.word	0x080127b4
 800df4c:	080127ec 	.word	0x080127ec
 800df50:	08012820 	.word	0x08012820

0800df54 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800df5c:	2300      	movs	r3, #0
 800df5e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800df60:	4b3c      	ldr	r3, [pc, #240]	@ (800e054 <low_level_init+0x100>)
 800df62:	4a3d      	ldr	r2, [pc, #244]	@ (800e058 <low_level_init+0x104>)
 800df64:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800df66:	2300      	movs	r3, #0
 800df68:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800df6a:	2380      	movs	r3, #128	@ 0x80
 800df6c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800df6e:	23e1      	movs	r3, #225	@ 0xe1
 800df70:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800df72:	2300      	movs	r3, #0
 800df74:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800df76:	2300      	movs	r3, #0
 800df78:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800df7a:	2300      	movs	r3, #0
 800df7c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800df7e:	4a35      	ldr	r2, [pc, #212]	@ (800e054 <low_level_init+0x100>)
 800df80:	f107 0308 	add.w	r3, r7, #8
 800df84:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800df86:	4b33      	ldr	r3, [pc, #204]	@ (800e054 <low_level_init+0x100>)
 800df88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800df8c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800df8e:	4b31      	ldr	r3, [pc, #196]	@ (800e054 <low_level_init+0x100>)
 800df90:	4a32      	ldr	r2, [pc, #200]	@ (800e05c <low_level_init+0x108>)
 800df92:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800df94:	4b2f      	ldr	r3, [pc, #188]	@ (800e054 <low_level_init+0x100>)
 800df96:	4a32      	ldr	r2, [pc, #200]	@ (800e060 <low_level_init+0x10c>)
 800df98:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800df9a:	4b2e      	ldr	r3, [pc, #184]	@ (800e054 <low_level_init+0x100>)
 800df9c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800dfa0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800dfa2:	482c      	ldr	r0, [pc, #176]	@ (800e054 <low_level_init+0x100>)
 800dfa4:	f7f2 fc70 	bl	8000888 <HAL_ETH_Init>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800dfac:	2238      	movs	r2, #56	@ 0x38
 800dfae:	2100      	movs	r1, #0
 800dfb0:	482c      	ldr	r0, [pc, #176]	@ (800e064 <low_level_init+0x110>)
 800dfb2:	f000 ffa4 	bl	800eefe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800dfb6:	4b2b      	ldr	r3, [pc, #172]	@ (800e064 <low_level_init+0x110>)
 800dfb8:	2221      	movs	r2, #33	@ 0x21
 800dfba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800dfbc:	4b29      	ldr	r3, [pc, #164]	@ (800e064 <low_level_init+0x110>)
 800dfbe:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800dfc2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800dfc4:	4b27      	ldr	r3, [pc, #156]	@ (800e064 <low_level_init+0x110>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800dfca:	4827      	ldr	r0, [pc, #156]	@ (800e068 <low_level_init+0x114>)
 800dfcc:	f7f6 f85e 	bl	800408c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2206      	movs	r2, #6
 800dfd4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800dfd8:	4b1e      	ldr	r3, [pc, #120]	@ (800e054 <low_level_init+0x100>)
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800dfe4:	4b1b      	ldr	r3, [pc, #108]	@ (800e054 <low_level_init+0x100>)
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	785a      	ldrb	r2, [r3, #1]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800dff0:	4b18      	ldr	r3, [pc, #96]	@ (800e054 <low_level_init+0x100>)
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	789a      	ldrb	r2, [r3, #2]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800dffc:	4b15      	ldr	r3, [pc, #84]	@ (800e054 <low_level_init+0x100>)
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	78da      	ldrb	r2, [r3, #3]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e008:	4b12      	ldr	r3, [pc, #72]	@ (800e054 <low_level_init+0x100>)
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	791a      	ldrb	r2, [r3, #4]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e014:	4b0f      	ldr	r3, [pc, #60]	@ (800e054 <low_level_init+0x100>)
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	795a      	ldrb	r2, [r3, #5]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800e026:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e02e:	f043 030a 	orr.w	r3, r3, #10
 800e032:	b2da      	uxtb	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d103      	bne.n	800e048 <low_level_init+0xf4>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 f91e 	bl	800e282 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800e046:	e001      	b.n	800e04c <low_level_init+0xf8>
    Error_Handler();
 800e048:	f000 fc26 	bl	800e898 <Error_Handler>
}
 800e04c:	bf00      	nop
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	20008668 	.word	0x20008668
 800e058:	40028000 	.word	0x40028000
 800e05c:	200085c8 	.word	0x200085c8
 800e060:	20008528 	.word	0x20008528
 800e064:	20008718 	.word	0x20008718
 800e068:	08014494 	.word	0x08014494

0800e06c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b092      	sub	sp, #72	@ 0x48
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800e076:	2300      	movs	r3, #0
 800e078:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800e07a:	2300      	movs	r3, #0
 800e07c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800e07e:	2300      	movs	r3, #0
 800e080:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800e084:	f107 030c 	add.w	r3, r7, #12
 800e088:	2230      	movs	r2, #48	@ 0x30
 800e08a:	2100      	movs	r1, #0
 800e08c:	4618      	mov	r0, r3
 800e08e:	f000 ff36 	bl	800eefe <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e092:	f107 030c 	add.w	r3, r7, #12
 800e096:	2230      	movs	r2, #48	@ 0x30
 800e098:	2100      	movs	r1, #0
 800e09a:	4618      	mov	r0, r3
 800e09c:	f000 ff2f 	bl	800eefe <memset>

  for(q = p; q != NULL; q = q->next)
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0a4:	e045      	b.n	800e132 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e0a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0a8:	2b03      	cmp	r3, #3
 800e0aa:	d902      	bls.n	800e0b2 <low_level_output+0x46>
      return ERR_IF;
 800e0ac:	f06f 030b 	mvn.w	r3, #11
 800e0b0:	e055      	b.n	800e15e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800e0b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0b4:	6859      	ldr	r1, [r3, #4]
 800e0b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	005b      	lsls	r3, r3, #1
 800e0bc:	4413      	add	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	3348      	adds	r3, #72	@ 0x48
 800e0c2:	443b      	add	r3, r7
 800e0c4:	3b3c      	subs	r3, #60	@ 0x3c
 800e0c6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e0c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0ca:	895b      	ldrh	r3, [r3, #10]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	3348      	adds	r3, #72	@ 0x48
 800e0da:	443b      	add	r3, r7
 800e0dc:	3b38      	subs	r3, #56	@ 0x38
 800e0de:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e0e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d011      	beq.n	800e10a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e0e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0e8:	1e5a      	subs	r2, r3, #1
 800e0ea:	f107 000c 	add.w	r0, r7, #12
 800e0ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	005b      	lsls	r3, r3, #1
 800e0f4:	440b      	add	r3, r1
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	18c1      	adds	r1, r0, r3
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	005b      	lsls	r3, r3, #1
 800e0fe:	4413      	add	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	3348      	adds	r3, #72	@ 0x48
 800e104:	443b      	add	r3, r7
 800e106:	3b34      	subs	r3, #52	@ 0x34
 800e108:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e10a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d109      	bne.n	800e126 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e114:	4613      	mov	r3, r2
 800e116:	005b      	lsls	r3, r3, #1
 800e118:	4413      	add	r3, r2
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	3348      	adds	r3, #72	@ 0x48
 800e11e:	443b      	add	r3, r7
 800e120:	3b34      	subs	r3, #52	@ 0x34
 800e122:	2200      	movs	r2, #0
 800e124:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e128:	3301      	adds	r3, #1
 800e12a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800e12c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	643b      	str	r3, [r7, #64]	@ 0x40
 800e132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e134:	2b00      	cmp	r3, #0
 800e136:	d1b6      	bne.n	800e0a6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	891b      	ldrh	r3, [r3, #8]
 800e13c:	461a      	mov	r2, r3
 800e13e:	4b0a      	ldr	r3, [pc, #40]	@ (800e168 <low_level_output+0xfc>)
 800e140:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e142:	4a09      	ldr	r2, [pc, #36]	@ (800e168 <low_level_output+0xfc>)
 800e144:	f107 030c 	add.w	r3, r7, #12
 800e148:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e14a:	4a07      	ldr	r2, [pc, #28]	@ (800e168 <low_level_output+0xfc>)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800e150:	2214      	movs	r2, #20
 800e152:	4905      	ldr	r1, [pc, #20]	@ (800e168 <low_level_output+0xfc>)
 800e154:	4805      	ldr	r0, [pc, #20]	@ (800e16c <low_level_output+0x100>)
 800e156:	f7f2 fc1f 	bl	8000998 <HAL_ETH_Transmit>

  return errval;
 800e15a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3748      	adds	r7, #72	@ 0x48
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	20008718 	.word	0x20008718
 800e16c:	20008668 	.word	0x20008668

0800e170 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e178:	2300      	movs	r3, #0
 800e17a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800e17c:	4b07      	ldr	r3, [pc, #28]	@ (800e19c <low_level_input+0x2c>)
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d105      	bne.n	800e190 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800e184:	f107 030c 	add.w	r3, r7, #12
 800e188:	4619      	mov	r1, r3
 800e18a:	4805      	ldr	r0, [pc, #20]	@ (800e1a0 <low_level_input+0x30>)
 800e18c:	f7f2 fc98 	bl	8000ac0 <HAL_ETH_ReadData>
  }

  return p;
 800e190:	68fb      	ldr	r3, [r7, #12]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	20008524 	.word	0x20008524
 800e1a0:	20008668 	.word	0x20008668

0800e1a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7ff ffdd 	bl	800e170 <low_level_input>
 800e1b6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00a      	beq.n	800e1d4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	691b      	ldr	r3, [r3, #16]
 800e1c2:	6879      	ldr	r1, [r7, #4]
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	4798      	blx	r3
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d002      	beq.n	800e1d4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f7f6 fe42 	bl	8004e58 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d1ea      	bne.n	800e1b0 <ethernetif_input+0xc>
}
 800e1da:	bf00      	nop
 800e1dc:	bf00      	nop
 800e1de:	3710      	adds	r7, #16
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d106      	bne.n	800e200 <ethernetif_init+0x1c>
 800e1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800e22c <ethernetif_init+0x48>)
 800e1f4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e1f8:	490d      	ldr	r1, [pc, #52]	@ (800e230 <ethernetif_init+0x4c>)
 800e1fa:	480e      	ldr	r0, [pc, #56]	@ (800e234 <ethernetif_init+0x50>)
 800e1fc:	f000 fe1a 	bl	800ee34 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2273      	movs	r2, #115	@ 0x73
 800e204:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2274      	movs	r2, #116	@ 0x74
 800e20c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4a09      	ldr	r2, [pc, #36]	@ (800e238 <ethernetif_init+0x54>)
 800e214:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4a08      	ldr	r2, [pc, #32]	@ (800e23c <ethernetif_init+0x58>)
 800e21a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f7ff fe99 	bl	800df54 <low_level_init>

  return ERR_OK;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	08012848 	.word	0x08012848
 800e230:	0801285c 	.word	0x0801285c
 800e234:	0801286c 	.word	0x0801286c
 800e238:	0800c261 	.word	0x0800c261
 800e23c:	0800e06d 	.word	0x0800e06d

0800e240 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e24c:	68f9      	ldr	r1, [r7, #12]
 800e24e:	4807      	ldr	r0, [pc, #28]	@ (800e26c <pbuf_free_custom+0x2c>)
 800e250:	f7f5 fffe 	bl	8004250 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e254:	4b06      	ldr	r3, [pc, #24]	@ (800e270 <pbuf_free_custom+0x30>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d102      	bne.n	800e262 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e25c:	4b04      	ldr	r3, [pc, #16]	@ (800e270 <pbuf_free_custom+0x30>)
 800e25e:	2200      	movs	r2, #0
 800e260:	701a      	strb	r2, [r3, #0]
  }
}
 800e262:	bf00      	nop
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	08014494 	.word	0x08014494
 800e270:	20008524 	.word	0x20008524

0800e274 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e278:	f7f2 f9f0 	bl	800065c <HAL_GetTick>
 800e27c:	4603      	mov	r3, r0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	bd80      	pop	{r7, pc}

0800e282 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800e282:	b480      	push	{r7}
 800e284:	b083      	sub	sp, #12
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]

}
 800e28a:	bf00      	nop
 800e28c:	370c      	adds	r7, #12
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr
	...

0800e298 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af02      	add	r7, sp, #8
 800e29e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e2a0:	4812      	ldr	r0, [pc, #72]	@ (800e2ec <HAL_ETH_RxAllocateCallback+0x54>)
 800e2a2:	f7f5 ff67 	bl	8004174 <memp_malloc_pool>
 800e2a6:	60f8      	str	r0, [r7, #12]
  if (p)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d014      	beq.n	800e2d8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f103 0220 	add.w	r2, r3, #32
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	4a0d      	ldr	r2, [pc, #52]	@ (800e2f0 <HAL_ETH_RxAllocateCallback+0x58>)
 800e2bc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800e2c6:	9201      	str	r2, [sp, #4]
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2241      	movs	r2, #65	@ 0x41
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	f7f6 fc07 	bl	8004ae4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e2d6:	e005      	b.n	800e2e4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e2d8:	4b06      	ldr	r3, [pc, #24]	@ (800e2f4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800e2da:	2201      	movs	r2, #1
 800e2dc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	601a      	str	r2, [r3, #0]
}
 800e2e4:	bf00      	nop
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	08014494 	.word	0x08014494
 800e2f0:	0800e241 	.word	0x0800e241
 800e2f4:	20008524 	.word	0x20008524

0800e2f8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b089      	sub	sp, #36	@ 0x24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
 800e304:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e30e:	2300      	movs	r3, #0
 800e310:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	3b20      	subs	r3, #32
 800e316:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	2200      	movs	r2, #0
 800e322:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	887a      	ldrh	r2, [r7, #2]
 800e328:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d103      	bne.n	800e33a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	69fa      	ldr	r2, [r7, #28]
 800e336:	601a      	str	r2, [r3, #0]
 800e338:	e003      	b.n	800e342 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	69fa      	ldr	r2, [r7, #28]
 800e340:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	69fa      	ldr	r2, [r7, #28]
 800e346:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	61fb      	str	r3, [r7, #28]
 800e34e:	e009      	b.n	800e364 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	891a      	ldrh	r2, [r3, #8]
 800e354:	887b      	ldrh	r3, [r7, #2]
 800e356:	4413      	add	r3, r2
 800e358:	b29a      	uxth	r2, r3
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	61fb      	str	r3, [r7, #28]
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1f2      	bne.n	800e350 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800e36a:	bf00      	nop
 800e36c:	bf00      	nop
 800e36e:	3724      	adds	r7, #36	@ 0x24
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 800e37e:	4b87      	ldr	r3, [pc, #540]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e380:	22a9      	movs	r2, #169	@ 0xa9
 800e382:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 800e384:	4b85      	ldr	r3, [pc, #532]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e386:	22fe      	movs	r2, #254	@ 0xfe
 800e388:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 9;
 800e38a:	4b84      	ldr	r3, [pc, #528]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e38c:	2209      	movs	r2, #9
 800e38e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 155;
 800e390:	4b82      	ldr	r3, [pc, #520]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e392:	229b      	movs	r2, #155	@ 0x9b
 800e394:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e396:	4b82      	ldr	r3, [pc, #520]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e398:	22ff      	movs	r2, #255	@ 0xff
 800e39a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e39c:	4b80      	ldr	r3, [pc, #512]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e39e:	22ff      	movs	r2, #255	@ 0xff
 800e3a0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800e3a2:	4b7f      	ldr	r3, [pc, #508]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e3a8:	4b7d      	ldr	r3, [pc, #500]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800e3ae:	4b7d      	ldr	r3, [pc, #500]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800e3b4:	4b7b      	ldr	r3, [pc, #492]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800e3ba:	4b7a      	ldr	r3, [pc, #488]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800e3c0:	4b78      	ldr	r3, [pc, #480]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800e3c6:	f7f5 faad 	bl	8003924 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e3ca:	4b74      	ldr	r3, [pc, #464]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	061a      	lsls	r2, r3, #24
 800e3d0:	4b72      	ldr	r3, [pc, #456]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e3d2:	785b      	ldrb	r3, [r3, #1]
 800e3d4:	041b      	lsls	r3, r3, #16
 800e3d6:	431a      	orrs	r2, r3
 800e3d8:	4b70      	ldr	r3, [pc, #448]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e3da:	789b      	ldrb	r3, [r3, #2]
 800e3dc:	021b      	lsls	r3, r3, #8
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	4a6e      	ldr	r2, [pc, #440]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e3e2:	78d2      	ldrb	r2, [r2, #3]
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	061a      	lsls	r2, r3, #24
 800e3e8:	4b6c      	ldr	r3, [pc, #432]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	0619      	lsls	r1, r3, #24
 800e3ee:	4b6b      	ldr	r3, [pc, #428]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e3f0:	785b      	ldrb	r3, [r3, #1]
 800e3f2:	041b      	lsls	r3, r3, #16
 800e3f4:	4319      	orrs	r1, r3
 800e3f6:	4b69      	ldr	r3, [pc, #420]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e3f8:	789b      	ldrb	r3, [r3, #2]
 800e3fa:	021b      	lsls	r3, r3, #8
 800e3fc:	430b      	orrs	r3, r1
 800e3fe:	4967      	ldr	r1, [pc, #412]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e400:	78c9      	ldrb	r1, [r1, #3]
 800e402:	430b      	orrs	r3, r1
 800e404:	021b      	lsls	r3, r3, #8
 800e406:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e40a:	431a      	orrs	r2, r3
 800e40c:	4b63      	ldr	r3, [pc, #396]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	0619      	lsls	r1, r3, #24
 800e412:	4b62      	ldr	r3, [pc, #392]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e414:	785b      	ldrb	r3, [r3, #1]
 800e416:	041b      	lsls	r3, r3, #16
 800e418:	4319      	orrs	r1, r3
 800e41a:	4b60      	ldr	r3, [pc, #384]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e41c:	789b      	ldrb	r3, [r3, #2]
 800e41e:	021b      	lsls	r3, r3, #8
 800e420:	430b      	orrs	r3, r1
 800e422:	495e      	ldr	r1, [pc, #376]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e424:	78c9      	ldrb	r1, [r1, #3]
 800e426:	430b      	orrs	r3, r1
 800e428:	0a1b      	lsrs	r3, r3, #8
 800e42a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e42e:	431a      	orrs	r2, r3
 800e430:	4b5a      	ldr	r3, [pc, #360]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	0619      	lsls	r1, r3, #24
 800e436:	4b59      	ldr	r3, [pc, #356]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e438:	785b      	ldrb	r3, [r3, #1]
 800e43a:	041b      	lsls	r3, r3, #16
 800e43c:	4319      	orrs	r1, r3
 800e43e:	4b57      	ldr	r3, [pc, #348]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e440:	789b      	ldrb	r3, [r3, #2]
 800e442:	021b      	lsls	r3, r3, #8
 800e444:	430b      	orrs	r3, r1
 800e446:	4955      	ldr	r1, [pc, #340]	@ (800e59c <MX_LWIP_Init+0x224>)
 800e448:	78c9      	ldrb	r1, [r1, #3]
 800e44a:	430b      	orrs	r3, r1
 800e44c:	0e1b      	lsrs	r3, r3, #24
 800e44e:	4313      	orrs	r3, r2
 800e450:	4a55      	ldr	r2, [pc, #340]	@ (800e5a8 <MX_LWIP_Init+0x230>)
 800e452:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e454:	4b52      	ldr	r3, [pc, #328]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	061a      	lsls	r2, r3, #24
 800e45a:	4b51      	ldr	r3, [pc, #324]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e45c:	785b      	ldrb	r3, [r3, #1]
 800e45e:	041b      	lsls	r3, r3, #16
 800e460:	431a      	orrs	r2, r3
 800e462:	4b4f      	ldr	r3, [pc, #316]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e464:	789b      	ldrb	r3, [r3, #2]
 800e466:	021b      	lsls	r3, r3, #8
 800e468:	4313      	orrs	r3, r2
 800e46a:	4a4d      	ldr	r2, [pc, #308]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e46c:	78d2      	ldrb	r2, [r2, #3]
 800e46e:	4313      	orrs	r3, r2
 800e470:	061a      	lsls	r2, r3, #24
 800e472:	4b4b      	ldr	r3, [pc, #300]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	0619      	lsls	r1, r3, #24
 800e478:	4b49      	ldr	r3, [pc, #292]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e47a:	785b      	ldrb	r3, [r3, #1]
 800e47c:	041b      	lsls	r3, r3, #16
 800e47e:	4319      	orrs	r1, r3
 800e480:	4b47      	ldr	r3, [pc, #284]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e482:	789b      	ldrb	r3, [r3, #2]
 800e484:	021b      	lsls	r3, r3, #8
 800e486:	430b      	orrs	r3, r1
 800e488:	4945      	ldr	r1, [pc, #276]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e48a:	78c9      	ldrb	r1, [r1, #3]
 800e48c:	430b      	orrs	r3, r1
 800e48e:	021b      	lsls	r3, r3, #8
 800e490:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e494:	431a      	orrs	r2, r3
 800e496:	4b42      	ldr	r3, [pc, #264]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	0619      	lsls	r1, r3, #24
 800e49c:	4b40      	ldr	r3, [pc, #256]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e49e:	785b      	ldrb	r3, [r3, #1]
 800e4a0:	041b      	lsls	r3, r3, #16
 800e4a2:	4319      	orrs	r1, r3
 800e4a4:	4b3e      	ldr	r3, [pc, #248]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e4a6:	789b      	ldrb	r3, [r3, #2]
 800e4a8:	021b      	lsls	r3, r3, #8
 800e4aa:	430b      	orrs	r3, r1
 800e4ac:	493c      	ldr	r1, [pc, #240]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e4ae:	78c9      	ldrb	r1, [r1, #3]
 800e4b0:	430b      	orrs	r3, r1
 800e4b2:	0a1b      	lsrs	r3, r3, #8
 800e4b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e4b8:	431a      	orrs	r2, r3
 800e4ba:	4b39      	ldr	r3, [pc, #228]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	0619      	lsls	r1, r3, #24
 800e4c0:	4b37      	ldr	r3, [pc, #220]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e4c2:	785b      	ldrb	r3, [r3, #1]
 800e4c4:	041b      	lsls	r3, r3, #16
 800e4c6:	4319      	orrs	r1, r3
 800e4c8:	4b35      	ldr	r3, [pc, #212]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e4ca:	789b      	ldrb	r3, [r3, #2]
 800e4cc:	021b      	lsls	r3, r3, #8
 800e4ce:	430b      	orrs	r3, r1
 800e4d0:	4933      	ldr	r1, [pc, #204]	@ (800e5a0 <MX_LWIP_Init+0x228>)
 800e4d2:	78c9      	ldrb	r1, [r1, #3]
 800e4d4:	430b      	orrs	r3, r1
 800e4d6:	0e1b      	lsrs	r3, r3, #24
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	4a34      	ldr	r2, [pc, #208]	@ (800e5ac <MX_LWIP_Init+0x234>)
 800e4dc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e4de:	4b31      	ldr	r3, [pc, #196]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	061a      	lsls	r2, r3, #24
 800e4e4:	4b2f      	ldr	r3, [pc, #188]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e4e6:	785b      	ldrb	r3, [r3, #1]
 800e4e8:	041b      	lsls	r3, r3, #16
 800e4ea:	431a      	orrs	r2, r3
 800e4ec:	4b2d      	ldr	r3, [pc, #180]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e4ee:	789b      	ldrb	r3, [r3, #2]
 800e4f0:	021b      	lsls	r3, r3, #8
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	4a2b      	ldr	r2, [pc, #172]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e4f6:	78d2      	ldrb	r2, [r2, #3]
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	061a      	lsls	r2, r3, #24
 800e4fc:	4b29      	ldr	r3, [pc, #164]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	0619      	lsls	r1, r3, #24
 800e502:	4b28      	ldr	r3, [pc, #160]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e504:	785b      	ldrb	r3, [r3, #1]
 800e506:	041b      	lsls	r3, r3, #16
 800e508:	4319      	orrs	r1, r3
 800e50a:	4b26      	ldr	r3, [pc, #152]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e50c:	789b      	ldrb	r3, [r3, #2]
 800e50e:	021b      	lsls	r3, r3, #8
 800e510:	430b      	orrs	r3, r1
 800e512:	4924      	ldr	r1, [pc, #144]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e514:	78c9      	ldrb	r1, [r1, #3]
 800e516:	430b      	orrs	r3, r1
 800e518:	021b      	lsls	r3, r3, #8
 800e51a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e51e:	431a      	orrs	r2, r3
 800e520:	4b20      	ldr	r3, [pc, #128]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	0619      	lsls	r1, r3, #24
 800e526:	4b1f      	ldr	r3, [pc, #124]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e528:	785b      	ldrb	r3, [r3, #1]
 800e52a:	041b      	lsls	r3, r3, #16
 800e52c:	4319      	orrs	r1, r3
 800e52e:	4b1d      	ldr	r3, [pc, #116]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e530:	789b      	ldrb	r3, [r3, #2]
 800e532:	021b      	lsls	r3, r3, #8
 800e534:	430b      	orrs	r3, r1
 800e536:	491b      	ldr	r1, [pc, #108]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e538:	78c9      	ldrb	r1, [r1, #3]
 800e53a:	430b      	orrs	r3, r1
 800e53c:	0a1b      	lsrs	r3, r3, #8
 800e53e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e542:	431a      	orrs	r2, r3
 800e544:	4b17      	ldr	r3, [pc, #92]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	0619      	lsls	r1, r3, #24
 800e54a:	4b16      	ldr	r3, [pc, #88]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e54c:	785b      	ldrb	r3, [r3, #1]
 800e54e:	041b      	lsls	r3, r3, #16
 800e550:	4319      	orrs	r1, r3
 800e552:	4b14      	ldr	r3, [pc, #80]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e554:	789b      	ldrb	r3, [r3, #2]
 800e556:	021b      	lsls	r3, r3, #8
 800e558:	430b      	orrs	r3, r1
 800e55a:	4912      	ldr	r1, [pc, #72]	@ (800e5a4 <MX_LWIP_Init+0x22c>)
 800e55c:	78c9      	ldrb	r1, [r1, #3]
 800e55e:	430b      	orrs	r3, r1
 800e560:	0e1b      	lsrs	r3, r3, #24
 800e562:	4313      	orrs	r3, r2
 800e564:	4a12      	ldr	r2, [pc, #72]	@ (800e5b0 <MX_LWIP_Init+0x238>)
 800e566:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e568:	4b12      	ldr	r3, [pc, #72]	@ (800e5b4 <MX_LWIP_Init+0x23c>)
 800e56a:	9302      	str	r3, [sp, #8]
 800e56c:	4b12      	ldr	r3, [pc, #72]	@ (800e5b8 <MX_LWIP_Init+0x240>)
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	2300      	movs	r3, #0
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	4b0e      	ldr	r3, [pc, #56]	@ (800e5b0 <MX_LWIP_Init+0x238>)
 800e576:	4a0d      	ldr	r2, [pc, #52]	@ (800e5ac <MX_LWIP_Init+0x234>)
 800e578:	490b      	ldr	r1, [pc, #44]	@ (800e5a8 <MX_LWIP_Init+0x230>)
 800e57a:	4810      	ldr	r0, [pc, #64]	@ (800e5bc <MX_LWIP_Init+0x244>)
 800e57c:	f7f5 febe 	bl	80042fc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e580:	480e      	ldr	r0, [pc, #56]	@ (800e5bc <MX_LWIP_Init+0x244>)
 800e582:	f7f6 f86d 	bl	8004660 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800e586:	480d      	ldr	r0, [pc, #52]	@ (800e5bc <MX_LWIP_Init+0x244>)
 800e588:	f7f6 f87a 	bl	8004680 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e58c:	490c      	ldr	r1, [pc, #48]	@ (800e5c0 <MX_LWIP_Init+0x248>)
 800e58e:	480b      	ldr	r0, [pc, #44]	@ (800e5bc <MX_LWIP_Init+0x244>)
 800e590:	f7f6 f8e2 	bl	8004758 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e594:	bf00      	nop
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	20008794 	.word	0x20008794
 800e5a0:	20008798 	.word	0x20008798
 800e5a4:	2000879c 	.word	0x2000879c
 800e5a8:	20008788 	.word	0x20008788
 800e5ac:	2000878c 	.word	0x2000878c
 800e5b0:	20008790 	.word	0x20008790
 800e5b4:	0800dda9 	.word	0x0800dda9
 800e5b8:	0800e1e5 	.word	0x0800e1e5
 800e5bc:	20008754 	.word	0x20008754
 800e5c0:	0800e615 	.word	0x0800e615

0800e5c4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800e5cc:	f7f2 f846 	bl	800065c <HAL_GetTick>
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	4b08      	ldr	r3, [pc, #32]	@ (800e5f4 <Ethernet_Link_Periodic_Handle+0x30>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	2b63      	cmp	r3, #99	@ 0x63
 800e5da:	d907      	bls.n	800e5ec <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800e5dc:	f7f2 f83e 	bl	800065c <HAL_GetTick>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	4a04      	ldr	r2, [pc, #16]	@ (800e5f4 <Ethernet_Link_Periodic_Handle+0x30>)
 800e5e4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7ff fe4b 	bl	800e282 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	20008750 	.word	0x20008750

0800e5f8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800e5fc:	4804      	ldr	r0, [pc, #16]	@ (800e610 <MX_LWIP_Process+0x18>)
 800e5fe:	f7ff fdd1 	bl	800e1a4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800e602:	f7fd f815 	bl	800b630 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800e606:	4802      	ldr	r0, [pc, #8]	@ (800e610 <MX_LWIP_Process+0x18>)
 800e608:	f7ff ffdc 	bl	800e5c4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800e60c:	bf00      	nop
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	20008754 	.word	0x20008754

0800e614 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e62c:	f7f1 ffb0 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e630:	f000 f80e 	bl	800e650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e634:	f000 f8ec 	bl	800e810 <MX_GPIO_Init>
  MX_TIM3_Init();
 800e638:	f000 f874 	bl	800e724 <MX_TIM3_Init>
  MX_UART4_Init();
 800e63c:	f000 f8be 	bl	800e7bc <MX_UART4_Init>
  MX_LWIP_Init();
 800e640:	f7ff fe9a 	bl	800e378 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
httpd_init();
 800e644:	f7f5 f8ea 	bl	800381c <httpd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 800e648:	f7ff ffd6 	bl	800e5f8 <MX_LWIP_Process>
 800e64c:	e7fc      	b.n	800e648 <main+0x20>
	...

0800e650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b094      	sub	sp, #80	@ 0x50
 800e654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e656:	f107 0320 	add.w	r3, r7, #32
 800e65a:	2230      	movs	r2, #48	@ 0x30
 800e65c:	2100      	movs	r1, #0
 800e65e:	4618      	mov	r0, r3
 800e660:	f000 fc4d 	bl	800eefe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e664:	f107 030c 	add.w	r3, r7, #12
 800e668:	2200      	movs	r2, #0
 800e66a:	601a      	str	r2, [r3, #0]
 800e66c:	605a      	str	r2, [r3, #4]
 800e66e:	609a      	str	r2, [r3, #8]
 800e670:	60da      	str	r2, [r3, #12]
 800e672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e674:	2300      	movs	r3, #0
 800e676:	60bb      	str	r3, [r7, #8]
 800e678:	4b28      	ldr	r3, [pc, #160]	@ (800e71c <SystemClock_Config+0xcc>)
 800e67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e67c:	4a27      	ldr	r2, [pc, #156]	@ (800e71c <SystemClock_Config+0xcc>)
 800e67e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e682:	6413      	str	r3, [r2, #64]	@ 0x40
 800e684:	4b25      	ldr	r3, [pc, #148]	@ (800e71c <SystemClock_Config+0xcc>)
 800e686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e68c:	60bb      	str	r3, [r7, #8]
 800e68e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e690:	2300      	movs	r3, #0
 800e692:	607b      	str	r3, [r7, #4]
 800e694:	4b22      	ldr	r3, [pc, #136]	@ (800e720 <SystemClock_Config+0xd0>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a21      	ldr	r2, [pc, #132]	@ (800e720 <SystemClock_Config+0xd0>)
 800e69a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e69e:	6013      	str	r3, [r2, #0]
 800e6a0:	4b1f      	ldr	r3, [pc, #124]	@ (800e720 <SystemClock_Config+0xd0>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e6a8:	607b      	str	r3, [r7, #4]
 800e6aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e6b4:	2310      	movs	r3, #16
 800e6b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e6c0:	2308      	movs	r3, #8
 800e6c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800e6c4:	23a8      	movs	r3, #168	@ 0xa8
 800e6c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e6cc:	2304      	movs	r3, #4
 800e6ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e6d0:	f107 0320 	add.w	r3, r7, #32
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7f3 f8b3 	bl	8001840 <HAL_RCC_OscConfig>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d001      	beq.n	800e6e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e6e0:	f000 f8da 	bl	800e898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e6e4:	230f      	movs	r3, #15
 800e6e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e6f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800e6f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e6f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e6fc:	f107 030c 	add.w	r3, r7, #12
 800e700:	2105      	movs	r1, #5
 800e702:	4618      	mov	r0, r3
 800e704:	f7f3 fb14 	bl	8001d30 <HAL_RCC_ClockConfig>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800e70e:	f000 f8c3 	bl	800e898 <Error_Handler>
  }
}
 800e712:	bf00      	nop
 800e714:	3750      	adds	r7, #80	@ 0x50
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	40023800 	.word	0x40023800
 800e720:	40007000 	.word	0x40007000

0800e724 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e72a:	f107 0308 	add.w	r3, r7, #8
 800e72e:	2200      	movs	r2, #0
 800e730:	601a      	str	r2, [r3, #0]
 800e732:	605a      	str	r2, [r3, #4]
 800e734:	609a      	str	r2, [r3, #8]
 800e736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e738:	463b      	mov	r3, r7
 800e73a:	2200      	movs	r2, #0
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e740:	4b1c      	ldr	r3, [pc, #112]	@ (800e7b4 <MX_TIM3_Init+0x90>)
 800e742:	4a1d      	ldr	r2, [pc, #116]	@ (800e7b8 <MX_TIM3_Init+0x94>)
 800e744:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 800e746:	4b1b      	ldr	r3, [pc, #108]	@ (800e7b4 <MX_TIM3_Init+0x90>)
 800e748:	2202      	movs	r2, #2
 800e74a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e74c:	4b19      	ldr	r3, [pc, #100]	@ (800e7b4 <MX_TIM3_Init+0x90>)
 800e74e:	2200      	movs	r2, #0
 800e750:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41;
 800e752:	4b18      	ldr	r3, [pc, #96]	@ (800e7b4 <MX_TIM3_Init+0x90>)
 800e754:	2229      	movs	r2, #41	@ 0x29
 800e756:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e758:	4b16      	ldr	r3, [pc, #88]	@ (800e7b4 <MX_TIM3_Init+0x90>)
 800e75a:	2200      	movs	r2, #0
 800e75c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e75e:	4b15      	ldr	r3, [pc, #84]	@ (800e7b4 <MX_TIM3_Init+0x90>)
 800e760:	2200      	movs	r2, #0
 800e762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e764:	4813      	ldr	r0, [pc, #76]	@ (800e7b4 <MX_TIM3_Init+0x90>)
 800e766:	f7f3 fcc3 	bl	80020f0 <HAL_TIM_Base_Init>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d001      	beq.n	800e774 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800e770:	f000 f892 	bl	800e898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e77a:	f107 0308 	add.w	r3, r7, #8
 800e77e:	4619      	mov	r1, r3
 800e780:	480c      	ldr	r0, [pc, #48]	@ (800e7b4 <MX_TIM3_Init+0x90>)
 800e782:	f7f3 fd04 	bl	800218e <HAL_TIM_ConfigClockSource>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d001      	beq.n	800e790 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800e78c:	f000 f884 	bl	800e898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e790:	2300      	movs	r3, #0
 800e792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e794:	2300      	movs	r3, #0
 800e796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e798:	463b      	mov	r3, r7
 800e79a:	4619      	mov	r1, r3
 800e79c:	4805      	ldr	r0, [pc, #20]	@ (800e7b4 <MX_TIM3_Init+0x90>)
 800e79e:	f7f3 ff03 	bl	80025a8 <HAL_TIMEx_MasterConfigSynchronization>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800e7a8:	f000 f876 	bl	800e898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800e7ac:	bf00      	nop
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	200087a0 	.word	0x200087a0
 800e7b8:	40000400 	.word	0x40000400

0800e7bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800e7c0:	4b11      	ldr	r3, [pc, #68]	@ (800e808 <MX_UART4_Init+0x4c>)
 800e7c2:	4a12      	ldr	r2, [pc, #72]	@ (800e80c <MX_UART4_Init+0x50>)
 800e7c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e7c6:	4b10      	ldr	r3, [pc, #64]	@ (800e808 <MX_UART4_Init+0x4c>)
 800e7c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800e7cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e7ce:	4b0e      	ldr	r3, [pc, #56]	@ (800e808 <MX_UART4_Init+0x4c>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e7d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e808 <MX_UART4_Init+0x4c>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e7da:	4b0b      	ldr	r3, [pc, #44]	@ (800e808 <MX_UART4_Init+0x4c>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e7e0:	4b09      	ldr	r3, [pc, #36]	@ (800e808 <MX_UART4_Init+0x4c>)
 800e7e2:	220c      	movs	r2, #12
 800e7e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e7e6:	4b08      	ldr	r3, [pc, #32]	@ (800e808 <MX_UART4_Init+0x4c>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e7ec:	4b06      	ldr	r3, [pc, #24]	@ (800e808 <MX_UART4_Init+0x4c>)
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e7f2:	4805      	ldr	r0, [pc, #20]	@ (800e808 <MX_UART4_Init+0x4c>)
 800e7f4:	f7f3 ff54 	bl	80026a0 <HAL_UART_Init>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d001      	beq.n	800e802 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800e7fe:	f000 f84b 	bl	800e898 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800e802:	bf00      	nop
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	200087e8 	.word	0x200087e8
 800e80c:	40004c00 	.word	0x40004c00

0800e810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e816:	2300      	movs	r3, #0
 800e818:	60fb      	str	r3, [r7, #12]
 800e81a:	4b1e      	ldr	r3, [pc, #120]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e81c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e81e:	4a1d      	ldr	r2, [pc, #116]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e824:	6313      	str	r3, [r2, #48]	@ 0x30
 800e826:	4b1b      	ldr	r3, [pc, #108]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e82a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e82e:	60fb      	str	r3, [r7, #12]
 800e830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e832:	2300      	movs	r3, #0
 800e834:	60bb      	str	r3, [r7, #8]
 800e836:	4b17      	ldr	r3, [pc, #92]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e83a:	4a16      	ldr	r2, [pc, #88]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e83c:	f043 0304 	orr.w	r3, r3, #4
 800e840:	6313      	str	r3, [r2, #48]	@ 0x30
 800e842:	4b14      	ldr	r3, [pc, #80]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e846:	f003 0304 	and.w	r3, r3, #4
 800e84a:	60bb      	str	r3, [r7, #8]
 800e84c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e84e:	2300      	movs	r3, #0
 800e850:	607b      	str	r3, [r7, #4]
 800e852:	4b10      	ldr	r3, [pc, #64]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e856:	4a0f      	ldr	r2, [pc, #60]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e858:	f043 0301 	orr.w	r3, r3, #1
 800e85c:	6313      	str	r3, [r2, #48]	@ 0x30
 800e85e:	4b0d      	ldr	r3, [pc, #52]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e862:	f003 0301 	and.w	r3, r3, #1
 800e866:	607b      	str	r3, [r7, #4]
 800e868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e86a:	2300      	movs	r3, #0
 800e86c:	603b      	str	r3, [r7, #0]
 800e86e:	4b09      	ldr	r3, [pc, #36]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e872:	4a08      	ldr	r2, [pc, #32]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e874:	f043 0302 	orr.w	r3, r3, #2
 800e878:	6313      	str	r3, [r2, #48]	@ 0x30
 800e87a:	4b06      	ldr	r3, [pc, #24]	@ (800e894 <MX_GPIO_Init+0x84>)
 800e87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e87e:	f003 0302 	and.w	r3, r3, #2
 800e882:	603b      	str	r3, [r7, #0]
 800e884:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800e886:	bf00      	nop
 800e888:	3714      	adds	r7, #20
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	40023800 	.word	0x40023800

0800e898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e898:	b480      	push	{r7}
 800e89a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e89c:	b672      	cpsid	i
}
 800e89e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e8a0:	bf00      	nop
 800e8a2:	e7fd      	b.n	800e8a0 <Error_Handler+0x8>

0800e8a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	607b      	str	r3, [r7, #4]
 800e8ae:	4b10      	ldr	r3, [pc, #64]	@ (800e8f0 <HAL_MspInit+0x4c>)
 800e8b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8b2:	4a0f      	ldr	r2, [pc, #60]	@ (800e8f0 <HAL_MspInit+0x4c>)
 800e8b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e8b8:	6453      	str	r3, [r2, #68]	@ 0x44
 800e8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f0 <HAL_MspInit+0x4c>)
 800e8bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e8c2:	607b      	str	r3, [r7, #4]
 800e8c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	603b      	str	r3, [r7, #0]
 800e8ca:	4b09      	ldr	r3, [pc, #36]	@ (800e8f0 <HAL_MspInit+0x4c>)
 800e8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8ce:	4a08      	ldr	r2, [pc, #32]	@ (800e8f0 <HAL_MspInit+0x4c>)
 800e8d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8d4:	6413      	str	r3, [r2, #64]	@ 0x40
 800e8d6:	4b06      	ldr	r3, [pc, #24]	@ (800e8f0 <HAL_MspInit+0x4c>)
 800e8d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e8de:	603b      	str	r3, [r7, #0]
 800e8e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e8e2:	bf00      	nop
 800e8e4:	370c      	adds	r7, #12
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	40023800 	.word	0x40023800

0800e8f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a0b      	ldr	r2, [pc, #44]	@ (800e930 <HAL_TIM_Base_MspInit+0x3c>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d10d      	bne.n	800e922 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e906:	2300      	movs	r3, #0
 800e908:	60fb      	str	r3, [r7, #12]
 800e90a:	4b0a      	ldr	r3, [pc, #40]	@ (800e934 <HAL_TIM_Base_MspInit+0x40>)
 800e90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e90e:	4a09      	ldr	r2, [pc, #36]	@ (800e934 <HAL_TIM_Base_MspInit+0x40>)
 800e910:	f043 0302 	orr.w	r3, r3, #2
 800e914:	6413      	str	r3, [r2, #64]	@ 0x40
 800e916:	4b07      	ldr	r3, [pc, #28]	@ (800e934 <HAL_TIM_Base_MspInit+0x40>)
 800e918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e91a:	f003 0302 	and.w	r3, r3, #2
 800e91e:	60fb      	str	r3, [r7, #12]
 800e920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800e922:	bf00      	nop
 800e924:	3714      	adds	r7, #20
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop
 800e930:	40000400 	.word	0x40000400
 800e934:	40023800 	.word	0x40023800

0800e938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b08a      	sub	sp, #40	@ 0x28
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e940:	f107 0314 	add.w	r3, r7, #20
 800e944:	2200      	movs	r2, #0
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	605a      	str	r2, [r3, #4]
 800e94a:	609a      	str	r2, [r3, #8]
 800e94c:	60da      	str	r2, [r3, #12]
 800e94e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a19      	ldr	r2, [pc, #100]	@ (800e9bc <HAL_UART_MspInit+0x84>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d12c      	bne.n	800e9b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800e95a:	2300      	movs	r3, #0
 800e95c:	613b      	str	r3, [r7, #16]
 800e95e:	4b18      	ldr	r3, [pc, #96]	@ (800e9c0 <HAL_UART_MspInit+0x88>)
 800e960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e962:	4a17      	ldr	r2, [pc, #92]	@ (800e9c0 <HAL_UART_MspInit+0x88>)
 800e964:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e968:	6413      	str	r3, [r2, #64]	@ 0x40
 800e96a:	4b15      	ldr	r3, [pc, #84]	@ (800e9c0 <HAL_UART_MspInit+0x88>)
 800e96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e96e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e972:	613b      	str	r3, [r7, #16]
 800e974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e976:	2300      	movs	r3, #0
 800e978:	60fb      	str	r3, [r7, #12]
 800e97a:	4b11      	ldr	r3, [pc, #68]	@ (800e9c0 <HAL_UART_MspInit+0x88>)
 800e97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e97e:	4a10      	ldr	r2, [pc, #64]	@ (800e9c0 <HAL_UART_MspInit+0x88>)
 800e980:	f043 0304 	orr.w	r3, r3, #4
 800e984:	6313      	str	r3, [r2, #48]	@ 0x30
 800e986:	4b0e      	ldr	r3, [pc, #56]	@ (800e9c0 <HAL_UART_MspInit+0x88>)
 800e988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e98a:	f003 0304 	and.w	r3, r3, #4
 800e98e:	60fb      	str	r3, [r7, #12]
 800e990:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800e992:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800e996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e998:	2302      	movs	r3, #2
 800e99a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e99c:	2300      	movs	r3, #0
 800e99e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9a0:	2303      	movs	r3, #3
 800e9a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800e9a4:	2308      	movs	r3, #8
 800e9a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e9a8:	f107 0314 	add.w	r3, r7, #20
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	4805      	ldr	r0, [pc, #20]	@ (800e9c4 <HAL_UART_MspInit+0x8c>)
 800e9b0:	f7f2 fdaa 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800e9b4:	bf00      	nop
 800e9b6:	3728      	adds	r7, #40	@ 0x28
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	40004c00 	.word	0x40004c00
 800e9c0:	40023800 	.word	0x40023800
 800e9c4:	40020800 	.word	0x40020800

0800e9c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800e9cc:	bf00      	nop
 800e9ce:	e7fd      	b.n	800e9cc <NMI_Handler+0x4>

0800e9d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e9d4:	bf00      	nop
 800e9d6:	e7fd      	b.n	800e9d4 <HardFault_Handler+0x4>

0800e9d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e9dc:	bf00      	nop
 800e9de:	e7fd      	b.n	800e9dc <MemManage_Handler+0x4>

0800e9e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e9e4:	bf00      	nop
 800e9e6:	e7fd      	b.n	800e9e4 <BusFault_Handler+0x4>

0800e9e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e9ec:	bf00      	nop
 800e9ee:	e7fd      	b.n	800e9ec <UsageFault_Handler+0x4>

0800e9f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e9f4:	bf00      	nop
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr

0800e9fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e9fe:	b480      	push	{r7}
 800ea00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ea02:	bf00      	nop
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ea10:	bf00      	nop
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ea1e:	f7f1 fe09 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ea22:	bf00      	nop
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ea26:	b480      	push	{r7}
 800ea28:	af00      	add	r7, sp, #0
  return 1;
 800ea2a:	2301      	movs	r3, #1
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
	...

0800ea38 <_kill>:

int _kill(int pid, int sig)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800ea42:	4b05      	ldr	r3, [pc, #20]	@ (800ea58 <_kill+0x20>)
 800ea44:	2216      	movs	r2, #22
 800ea46:	601a      	str	r2, [r3, #0]
  return -1;
 800ea48:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	20008970 	.word	0x20008970

0800ea5c <_exit>:

void _exit (int status)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ea64:	f04f 31ff 	mov.w	r1, #4294967295
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff ffe5 	bl	800ea38 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ea6e:	bf00      	nop
 800ea70:	e7fd      	b.n	800ea6e <_exit+0x12>

0800ea72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b086      	sub	sp, #24
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	60f8      	str	r0, [r7, #12]
 800ea7a:	60b9      	str	r1, [r7, #8]
 800ea7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea7e:	2300      	movs	r3, #0
 800ea80:	617b      	str	r3, [r7, #20]
 800ea82:	e00a      	b.n	800ea9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ea84:	f3af 8000 	nop.w
 800ea88:	4601      	mov	r1, r0
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	1c5a      	adds	r2, r3, #1
 800ea8e:	60ba      	str	r2, [r7, #8]
 800ea90:	b2ca      	uxtb	r2, r1
 800ea92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	3301      	adds	r3, #1
 800ea98:	617b      	str	r3, [r7, #20]
 800ea9a:	697a      	ldr	r2, [r7, #20]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	dbf0      	blt.n	800ea84 <_read+0x12>
  }

  return len;
 800eaa2:	687b      	ldr	r3, [r7, #4]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3718      	adds	r7, #24
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eab8:	2300      	movs	r3, #0
 800eaba:	617b      	str	r3, [r7, #20]
 800eabc:	e009      	b.n	800ead2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	1c5a      	adds	r2, r3, #1
 800eac2:	60ba      	str	r2, [r7, #8]
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	3301      	adds	r3, #1
 800ead0:	617b      	str	r3, [r7, #20]
 800ead2:	697a      	ldr	r2, [r7, #20]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	dbf1      	blt.n	800eabe <_write+0x12>
  }
  return len;
 800eada:	687b      	ldr	r3, [r7, #4]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3718      	adds	r7, #24
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <_close>:

int _close(int file)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800eaec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800eb0c:	605a      	str	r2, [r3, #4]
  return 0;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <_isatty>:

int _isatty(int file)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800eb24:	2301      	movs	r3, #1
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	370c      	adds	r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr

0800eb32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800eb32:	b480      	push	{r7}
 800eb34:	b085      	sub	sp, #20
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	60f8      	str	r0, [r7, #12]
 800eb3a:	60b9      	str	r1, [r7, #8]
 800eb3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3714      	adds	r7, #20
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr

0800eb4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b087      	sub	sp, #28
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800eb54:	4a14      	ldr	r2, [pc, #80]	@ (800eba8 <_sbrk+0x5c>)
 800eb56:	4b15      	ldr	r3, [pc, #84]	@ (800ebac <_sbrk+0x60>)
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800eb60:	4b13      	ldr	r3, [pc, #76]	@ (800ebb0 <_sbrk+0x64>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d102      	bne.n	800eb6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800eb68:	4b11      	ldr	r3, [pc, #68]	@ (800ebb0 <_sbrk+0x64>)
 800eb6a:	4a12      	ldr	r2, [pc, #72]	@ (800ebb4 <_sbrk+0x68>)
 800eb6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800eb6e:	4b10      	ldr	r3, [pc, #64]	@ (800ebb0 <_sbrk+0x64>)
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4413      	add	r3, r2
 800eb76:	693a      	ldr	r2, [r7, #16]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d205      	bcs.n	800eb88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800eb7c:	4b0e      	ldr	r3, [pc, #56]	@ (800ebb8 <_sbrk+0x6c>)
 800eb7e:	220c      	movs	r2, #12
 800eb80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800eb82:	f04f 33ff 	mov.w	r3, #4294967295
 800eb86:	e009      	b.n	800eb9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800eb88:	4b09      	ldr	r3, [pc, #36]	@ (800ebb0 <_sbrk+0x64>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800eb8e:	4b08      	ldr	r3, [pc, #32]	@ (800ebb0 <_sbrk+0x64>)
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4413      	add	r3, r2
 800eb96:	4a06      	ldr	r2, [pc, #24]	@ (800ebb0 <_sbrk+0x64>)
 800eb98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	371c      	adds	r7, #28
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr
 800eba8:	20020000 	.word	0x20020000
 800ebac:	00000400 	.word	0x00000400
 800ebb0:	20008830 	.word	0x20008830
 800ebb4:	20008980 	.word	0x20008980
 800ebb8:	20008970 	.word	0x20008970

0800ebbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ebc0:	4b06      	ldr	r3, [pc, #24]	@ (800ebdc <SystemInit+0x20>)
 800ebc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ebc6:	4a05      	ldr	r2, [pc, #20]	@ (800ebdc <SystemInit+0x20>)
 800ebc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ebcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ebd0:	bf00      	nop
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	e000ed00 	.word	0xe000ed00

0800ebe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ebe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ec18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800ebe4:	f7ff ffea 	bl	800ebbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ebe8:	480c      	ldr	r0, [pc, #48]	@ (800ec1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ebea:	490d      	ldr	r1, [pc, #52]	@ (800ec20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ebec:	4a0d      	ldr	r2, [pc, #52]	@ (800ec24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ebee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ebf0:	e002      	b.n	800ebf8 <LoopCopyDataInit>

0800ebf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ebf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ebf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ebf6:	3304      	adds	r3, #4

0800ebf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ebf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ebfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ebfc:	d3f9      	bcc.n	800ebf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ebfe:	4a0a      	ldr	r2, [pc, #40]	@ (800ec28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ec00:	4c0a      	ldr	r4, [pc, #40]	@ (800ec2c <LoopFillZerobss+0x22>)
  movs r3, #0
 800ec02:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ec04:	e001      	b.n	800ec0a <LoopFillZerobss>

0800ec06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ec06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ec08:	3204      	adds	r2, #4

0800ec0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ec0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ec0c:	d3fb      	bcc.n	800ec06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ec0e:	f000 f9e3 	bl	800efd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec12:	f7ff fd09 	bl	800e628 <main>
  bx  lr    
 800ec16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ec18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ec1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ec20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800ec24:	080145a8 	.word	0x080145a8
  ldr r2, =_sbss
 800ec28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800ec2c:	20008980 	.word	0x20008980

0800ec30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ec30:	e7fe      	b.n	800ec30 <ADC_IRQHandler>
	...

0800ec34 <rand>:
 800ec34:	4b16      	ldr	r3, [pc, #88]	@ (800ec90 <rand+0x5c>)
 800ec36:	b510      	push	{r4, lr}
 800ec38:	681c      	ldr	r4, [r3, #0]
 800ec3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ec3c:	b9b3      	cbnz	r3, 800ec6c <rand+0x38>
 800ec3e:	2018      	movs	r0, #24
 800ec40:	f000 fa68 	bl	800f114 <malloc>
 800ec44:	4602      	mov	r2, r0
 800ec46:	6320      	str	r0, [r4, #48]	@ 0x30
 800ec48:	b920      	cbnz	r0, 800ec54 <rand+0x20>
 800ec4a:	4b12      	ldr	r3, [pc, #72]	@ (800ec94 <rand+0x60>)
 800ec4c:	4812      	ldr	r0, [pc, #72]	@ (800ec98 <rand+0x64>)
 800ec4e:	2152      	movs	r1, #82	@ 0x52
 800ec50:	f000 f9f8 	bl	800f044 <__assert_func>
 800ec54:	4911      	ldr	r1, [pc, #68]	@ (800ec9c <rand+0x68>)
 800ec56:	4b12      	ldr	r3, [pc, #72]	@ (800eca0 <rand+0x6c>)
 800ec58:	e9c0 1300 	strd	r1, r3, [r0]
 800ec5c:	4b11      	ldr	r3, [pc, #68]	@ (800eca4 <rand+0x70>)
 800ec5e:	6083      	str	r3, [r0, #8]
 800ec60:	230b      	movs	r3, #11
 800ec62:	8183      	strh	r3, [r0, #12]
 800ec64:	2100      	movs	r1, #0
 800ec66:	2001      	movs	r0, #1
 800ec68:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ec6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ec6e:	480e      	ldr	r0, [pc, #56]	@ (800eca8 <rand+0x74>)
 800ec70:	690b      	ldr	r3, [r1, #16]
 800ec72:	694c      	ldr	r4, [r1, #20]
 800ec74:	4a0d      	ldr	r2, [pc, #52]	@ (800ecac <rand+0x78>)
 800ec76:	4358      	muls	r0, r3
 800ec78:	fb02 0004 	mla	r0, r2, r4, r0
 800ec7c:	fba3 3202 	umull	r3, r2, r3, r2
 800ec80:	3301      	adds	r3, #1
 800ec82:	eb40 0002 	adc.w	r0, r0, r2
 800ec86:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ec8a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ec8e:	bd10      	pop	{r4, pc}
 800ec90:	20000020 	.word	0x20000020
 800ec94:	080144b8 	.word	0x080144b8
 800ec98:	080144cf 	.word	0x080144cf
 800ec9c:	abcd330e 	.word	0xabcd330e
 800eca0:	e66d1234 	.word	0xe66d1234
 800eca4:	0005deec 	.word	0x0005deec
 800eca8:	5851f42d 	.word	0x5851f42d
 800ecac:	4c957f2d 	.word	0x4c957f2d

0800ecb0 <std>:
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	b510      	push	{r4, lr}
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	e9c0 3300 	strd	r3, r3, [r0]
 800ecba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecbe:	6083      	str	r3, [r0, #8]
 800ecc0:	8181      	strh	r1, [r0, #12]
 800ecc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ecc4:	81c2      	strh	r2, [r0, #14]
 800ecc6:	6183      	str	r3, [r0, #24]
 800ecc8:	4619      	mov	r1, r3
 800ecca:	2208      	movs	r2, #8
 800eccc:	305c      	adds	r0, #92	@ 0x5c
 800ecce:	f000 f916 	bl	800eefe <memset>
 800ecd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed08 <std+0x58>)
 800ecd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ecd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed0c <std+0x5c>)
 800ecd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecda:	4b0d      	ldr	r3, [pc, #52]	@ (800ed10 <std+0x60>)
 800ecdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecde:	4b0d      	ldr	r3, [pc, #52]	@ (800ed14 <std+0x64>)
 800ece0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ece2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed18 <std+0x68>)
 800ece4:	6224      	str	r4, [r4, #32]
 800ece6:	429c      	cmp	r4, r3
 800ece8:	d006      	beq.n	800ecf8 <std+0x48>
 800ecea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ecee:	4294      	cmp	r4, r2
 800ecf0:	d002      	beq.n	800ecf8 <std+0x48>
 800ecf2:	33d0      	adds	r3, #208	@ 0xd0
 800ecf4:	429c      	cmp	r4, r3
 800ecf6:	d105      	bne.n	800ed04 <std+0x54>
 800ecf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ecfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed00:	f000 b98e 	b.w	800f020 <__retarget_lock_init_recursive>
 800ed04:	bd10      	pop	{r4, pc}
 800ed06:	bf00      	nop
 800ed08:	0800ee59 	.word	0x0800ee59
 800ed0c:	0800ee7b 	.word	0x0800ee7b
 800ed10:	0800eeb3 	.word	0x0800eeb3
 800ed14:	0800eed7 	.word	0x0800eed7
 800ed18:	20008834 	.word	0x20008834

0800ed1c <stdio_exit_handler>:
 800ed1c:	4a02      	ldr	r2, [pc, #8]	@ (800ed28 <stdio_exit_handler+0xc>)
 800ed1e:	4903      	ldr	r1, [pc, #12]	@ (800ed2c <stdio_exit_handler+0x10>)
 800ed20:	4803      	ldr	r0, [pc, #12]	@ (800ed30 <stdio_exit_handler+0x14>)
 800ed22:	f000 b869 	b.w	800edf8 <_fwalk_sglue>
 800ed26:	bf00      	nop
 800ed28:	20000014 	.word	0x20000014
 800ed2c:	0800f929 	.word	0x0800f929
 800ed30:	20000024 	.word	0x20000024

0800ed34 <cleanup_stdio>:
 800ed34:	6841      	ldr	r1, [r0, #4]
 800ed36:	4b0c      	ldr	r3, [pc, #48]	@ (800ed68 <cleanup_stdio+0x34>)
 800ed38:	4299      	cmp	r1, r3
 800ed3a:	b510      	push	{r4, lr}
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	d001      	beq.n	800ed44 <cleanup_stdio+0x10>
 800ed40:	f000 fdf2 	bl	800f928 <_fflush_r>
 800ed44:	68a1      	ldr	r1, [r4, #8]
 800ed46:	4b09      	ldr	r3, [pc, #36]	@ (800ed6c <cleanup_stdio+0x38>)
 800ed48:	4299      	cmp	r1, r3
 800ed4a:	d002      	beq.n	800ed52 <cleanup_stdio+0x1e>
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	f000 fdeb 	bl	800f928 <_fflush_r>
 800ed52:	68e1      	ldr	r1, [r4, #12]
 800ed54:	4b06      	ldr	r3, [pc, #24]	@ (800ed70 <cleanup_stdio+0x3c>)
 800ed56:	4299      	cmp	r1, r3
 800ed58:	d004      	beq.n	800ed64 <cleanup_stdio+0x30>
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed60:	f000 bde2 	b.w	800f928 <_fflush_r>
 800ed64:	bd10      	pop	{r4, pc}
 800ed66:	bf00      	nop
 800ed68:	20008834 	.word	0x20008834
 800ed6c:	2000889c 	.word	0x2000889c
 800ed70:	20008904 	.word	0x20008904

0800ed74 <global_stdio_init.part.0>:
 800ed74:	b510      	push	{r4, lr}
 800ed76:	4b0b      	ldr	r3, [pc, #44]	@ (800eda4 <global_stdio_init.part.0+0x30>)
 800ed78:	4c0b      	ldr	r4, [pc, #44]	@ (800eda8 <global_stdio_init.part.0+0x34>)
 800ed7a:	4a0c      	ldr	r2, [pc, #48]	@ (800edac <global_stdio_init.part.0+0x38>)
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	4620      	mov	r0, r4
 800ed80:	2200      	movs	r2, #0
 800ed82:	2104      	movs	r1, #4
 800ed84:	f7ff ff94 	bl	800ecb0 <std>
 800ed88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	2109      	movs	r1, #9
 800ed90:	f7ff ff8e 	bl	800ecb0 <std>
 800ed94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed98:	2202      	movs	r2, #2
 800ed9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed9e:	2112      	movs	r1, #18
 800eda0:	f7ff bf86 	b.w	800ecb0 <std>
 800eda4:	2000896c 	.word	0x2000896c
 800eda8:	20008834 	.word	0x20008834
 800edac:	0800ed1d 	.word	0x0800ed1d

0800edb0 <__sfp_lock_acquire>:
 800edb0:	4801      	ldr	r0, [pc, #4]	@ (800edb8 <__sfp_lock_acquire+0x8>)
 800edb2:	f000 b936 	b.w	800f022 <__retarget_lock_acquire_recursive>
 800edb6:	bf00      	nop
 800edb8:	20008975 	.word	0x20008975

0800edbc <__sfp_lock_release>:
 800edbc:	4801      	ldr	r0, [pc, #4]	@ (800edc4 <__sfp_lock_release+0x8>)
 800edbe:	f000 b931 	b.w	800f024 <__retarget_lock_release_recursive>
 800edc2:	bf00      	nop
 800edc4:	20008975 	.word	0x20008975

0800edc8 <__sinit>:
 800edc8:	b510      	push	{r4, lr}
 800edca:	4604      	mov	r4, r0
 800edcc:	f7ff fff0 	bl	800edb0 <__sfp_lock_acquire>
 800edd0:	6a23      	ldr	r3, [r4, #32]
 800edd2:	b11b      	cbz	r3, 800eddc <__sinit+0x14>
 800edd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd8:	f7ff bff0 	b.w	800edbc <__sfp_lock_release>
 800eddc:	4b04      	ldr	r3, [pc, #16]	@ (800edf0 <__sinit+0x28>)
 800edde:	6223      	str	r3, [r4, #32]
 800ede0:	4b04      	ldr	r3, [pc, #16]	@ (800edf4 <__sinit+0x2c>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1f5      	bne.n	800edd4 <__sinit+0xc>
 800ede8:	f7ff ffc4 	bl	800ed74 <global_stdio_init.part.0>
 800edec:	e7f2      	b.n	800edd4 <__sinit+0xc>
 800edee:	bf00      	nop
 800edf0:	0800ed35 	.word	0x0800ed35
 800edf4:	2000896c 	.word	0x2000896c

0800edf8 <_fwalk_sglue>:
 800edf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edfc:	4607      	mov	r7, r0
 800edfe:	4688      	mov	r8, r1
 800ee00:	4614      	mov	r4, r2
 800ee02:	2600      	movs	r6, #0
 800ee04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee08:	f1b9 0901 	subs.w	r9, r9, #1
 800ee0c:	d505      	bpl.n	800ee1a <_fwalk_sglue+0x22>
 800ee0e:	6824      	ldr	r4, [r4, #0]
 800ee10:	2c00      	cmp	r4, #0
 800ee12:	d1f7      	bne.n	800ee04 <_fwalk_sglue+0xc>
 800ee14:	4630      	mov	r0, r6
 800ee16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee1a:	89ab      	ldrh	r3, [r5, #12]
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d907      	bls.n	800ee30 <_fwalk_sglue+0x38>
 800ee20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee24:	3301      	adds	r3, #1
 800ee26:	d003      	beq.n	800ee30 <_fwalk_sglue+0x38>
 800ee28:	4629      	mov	r1, r5
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	47c0      	blx	r8
 800ee2e:	4306      	orrs	r6, r0
 800ee30:	3568      	adds	r5, #104	@ 0x68
 800ee32:	e7e9      	b.n	800ee08 <_fwalk_sglue+0x10>

0800ee34 <iprintf>:
 800ee34:	b40f      	push	{r0, r1, r2, r3}
 800ee36:	b507      	push	{r0, r1, r2, lr}
 800ee38:	4906      	ldr	r1, [pc, #24]	@ (800ee54 <iprintf+0x20>)
 800ee3a:	ab04      	add	r3, sp, #16
 800ee3c:	6808      	ldr	r0, [r1, #0]
 800ee3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee42:	6881      	ldr	r1, [r0, #8]
 800ee44:	9301      	str	r3, [sp, #4]
 800ee46:	f000 fa45 	bl	800f2d4 <_vfiprintf_r>
 800ee4a:	b003      	add	sp, #12
 800ee4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee50:	b004      	add	sp, #16
 800ee52:	4770      	bx	lr
 800ee54:	20000020 	.word	0x20000020

0800ee58 <__sread>:
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee60:	f000 f896 	bl	800ef90 <_read_r>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	bfab      	itete	ge
 800ee68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee6c:	181b      	addge	r3, r3, r0
 800ee6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee72:	bfac      	ite	ge
 800ee74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee76:	81a3      	strhlt	r3, [r4, #12]
 800ee78:	bd10      	pop	{r4, pc}

0800ee7a <__swrite>:
 800ee7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7e:	461f      	mov	r7, r3
 800ee80:	898b      	ldrh	r3, [r1, #12]
 800ee82:	05db      	lsls	r3, r3, #23
 800ee84:	4605      	mov	r5, r0
 800ee86:	460c      	mov	r4, r1
 800ee88:	4616      	mov	r6, r2
 800ee8a:	d505      	bpl.n	800ee98 <__swrite+0x1e>
 800ee8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee90:	2302      	movs	r3, #2
 800ee92:	2200      	movs	r2, #0
 800ee94:	f000 f86a 	bl	800ef6c <_lseek_r>
 800ee98:	89a3      	ldrh	r3, [r4, #12]
 800ee9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eea2:	81a3      	strh	r3, [r4, #12]
 800eea4:	4632      	mov	r2, r6
 800eea6:	463b      	mov	r3, r7
 800eea8:	4628      	mov	r0, r5
 800eeaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeae:	f000 b881 	b.w	800efb4 <_write_r>

0800eeb2 <__sseek>:
 800eeb2:	b510      	push	{r4, lr}
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeba:	f000 f857 	bl	800ef6c <_lseek_r>
 800eebe:	1c43      	adds	r3, r0, #1
 800eec0:	89a3      	ldrh	r3, [r4, #12]
 800eec2:	bf15      	itete	ne
 800eec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eeca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eece:	81a3      	strheq	r3, [r4, #12]
 800eed0:	bf18      	it	ne
 800eed2:	81a3      	strhne	r3, [r4, #12]
 800eed4:	bd10      	pop	{r4, pc}

0800eed6 <__sclose>:
 800eed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeda:	f000 b837 	b.w	800ef4c <_close_r>

0800eede <memcmp>:
 800eede:	b510      	push	{r4, lr}
 800eee0:	3901      	subs	r1, #1
 800eee2:	4402      	add	r2, r0
 800eee4:	4290      	cmp	r0, r2
 800eee6:	d101      	bne.n	800eeec <memcmp+0xe>
 800eee8:	2000      	movs	r0, #0
 800eeea:	e005      	b.n	800eef8 <memcmp+0x1a>
 800eeec:	7803      	ldrb	r3, [r0, #0]
 800eeee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eef2:	42a3      	cmp	r3, r4
 800eef4:	d001      	beq.n	800eefa <memcmp+0x1c>
 800eef6:	1b18      	subs	r0, r3, r4
 800eef8:	bd10      	pop	{r4, pc}
 800eefa:	3001      	adds	r0, #1
 800eefc:	e7f2      	b.n	800eee4 <memcmp+0x6>

0800eefe <memset>:
 800eefe:	4402      	add	r2, r0
 800ef00:	4603      	mov	r3, r0
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d100      	bne.n	800ef08 <memset+0xa>
 800ef06:	4770      	bx	lr
 800ef08:	f803 1b01 	strb.w	r1, [r3], #1
 800ef0c:	e7f9      	b.n	800ef02 <memset+0x4>

0800ef0e <strchr>:
 800ef0e:	b2c9      	uxtb	r1, r1
 800ef10:	4603      	mov	r3, r0
 800ef12:	4618      	mov	r0, r3
 800ef14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef18:	b112      	cbz	r2, 800ef20 <strchr+0x12>
 800ef1a:	428a      	cmp	r2, r1
 800ef1c:	d1f9      	bne.n	800ef12 <strchr+0x4>
 800ef1e:	4770      	bx	lr
 800ef20:	2900      	cmp	r1, #0
 800ef22:	bf18      	it	ne
 800ef24:	2000      	movne	r0, #0
 800ef26:	4770      	bx	lr

0800ef28 <strncmp>:
 800ef28:	b510      	push	{r4, lr}
 800ef2a:	b16a      	cbz	r2, 800ef48 <strncmp+0x20>
 800ef2c:	3901      	subs	r1, #1
 800ef2e:	1884      	adds	r4, r0, r2
 800ef30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d103      	bne.n	800ef44 <strncmp+0x1c>
 800ef3c:	42a0      	cmp	r0, r4
 800ef3e:	d001      	beq.n	800ef44 <strncmp+0x1c>
 800ef40:	2a00      	cmp	r2, #0
 800ef42:	d1f5      	bne.n	800ef30 <strncmp+0x8>
 800ef44:	1ad0      	subs	r0, r2, r3
 800ef46:	bd10      	pop	{r4, pc}
 800ef48:	4610      	mov	r0, r2
 800ef4a:	e7fc      	b.n	800ef46 <strncmp+0x1e>

0800ef4c <_close_r>:
 800ef4c:	b538      	push	{r3, r4, r5, lr}
 800ef4e:	4d06      	ldr	r5, [pc, #24]	@ (800ef68 <_close_r+0x1c>)
 800ef50:	2300      	movs	r3, #0
 800ef52:	4604      	mov	r4, r0
 800ef54:	4608      	mov	r0, r1
 800ef56:	602b      	str	r3, [r5, #0]
 800ef58:	f7ff fdc4 	bl	800eae4 <_close>
 800ef5c:	1c43      	adds	r3, r0, #1
 800ef5e:	d102      	bne.n	800ef66 <_close_r+0x1a>
 800ef60:	682b      	ldr	r3, [r5, #0]
 800ef62:	b103      	cbz	r3, 800ef66 <_close_r+0x1a>
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	bd38      	pop	{r3, r4, r5, pc}
 800ef68:	20008970 	.word	0x20008970

0800ef6c <_lseek_r>:
 800ef6c:	b538      	push	{r3, r4, r5, lr}
 800ef6e:	4d07      	ldr	r5, [pc, #28]	@ (800ef8c <_lseek_r+0x20>)
 800ef70:	4604      	mov	r4, r0
 800ef72:	4608      	mov	r0, r1
 800ef74:	4611      	mov	r1, r2
 800ef76:	2200      	movs	r2, #0
 800ef78:	602a      	str	r2, [r5, #0]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	f7ff fdd9 	bl	800eb32 <_lseek>
 800ef80:	1c43      	adds	r3, r0, #1
 800ef82:	d102      	bne.n	800ef8a <_lseek_r+0x1e>
 800ef84:	682b      	ldr	r3, [r5, #0]
 800ef86:	b103      	cbz	r3, 800ef8a <_lseek_r+0x1e>
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	bd38      	pop	{r3, r4, r5, pc}
 800ef8c:	20008970 	.word	0x20008970

0800ef90 <_read_r>:
 800ef90:	b538      	push	{r3, r4, r5, lr}
 800ef92:	4d07      	ldr	r5, [pc, #28]	@ (800efb0 <_read_r+0x20>)
 800ef94:	4604      	mov	r4, r0
 800ef96:	4608      	mov	r0, r1
 800ef98:	4611      	mov	r1, r2
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	602a      	str	r2, [r5, #0]
 800ef9e:	461a      	mov	r2, r3
 800efa0:	f7ff fd67 	bl	800ea72 <_read>
 800efa4:	1c43      	adds	r3, r0, #1
 800efa6:	d102      	bne.n	800efae <_read_r+0x1e>
 800efa8:	682b      	ldr	r3, [r5, #0]
 800efaa:	b103      	cbz	r3, 800efae <_read_r+0x1e>
 800efac:	6023      	str	r3, [r4, #0]
 800efae:	bd38      	pop	{r3, r4, r5, pc}
 800efb0:	20008970 	.word	0x20008970

0800efb4 <_write_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4d07      	ldr	r5, [pc, #28]	@ (800efd4 <_write_r+0x20>)
 800efb8:	4604      	mov	r4, r0
 800efba:	4608      	mov	r0, r1
 800efbc:	4611      	mov	r1, r2
 800efbe:	2200      	movs	r2, #0
 800efc0:	602a      	str	r2, [r5, #0]
 800efc2:	461a      	mov	r2, r3
 800efc4:	f7ff fd72 	bl	800eaac <_write>
 800efc8:	1c43      	adds	r3, r0, #1
 800efca:	d102      	bne.n	800efd2 <_write_r+0x1e>
 800efcc:	682b      	ldr	r3, [r5, #0]
 800efce:	b103      	cbz	r3, 800efd2 <_write_r+0x1e>
 800efd0:	6023      	str	r3, [r4, #0]
 800efd2:	bd38      	pop	{r3, r4, r5, pc}
 800efd4:	20008970 	.word	0x20008970

0800efd8 <__libc_init_array>:
 800efd8:	b570      	push	{r4, r5, r6, lr}
 800efda:	4d0d      	ldr	r5, [pc, #52]	@ (800f010 <__libc_init_array+0x38>)
 800efdc:	4c0d      	ldr	r4, [pc, #52]	@ (800f014 <__libc_init_array+0x3c>)
 800efde:	1b64      	subs	r4, r4, r5
 800efe0:	10a4      	asrs	r4, r4, #2
 800efe2:	2600      	movs	r6, #0
 800efe4:	42a6      	cmp	r6, r4
 800efe6:	d109      	bne.n	800effc <__libc_init_array+0x24>
 800efe8:	4d0b      	ldr	r5, [pc, #44]	@ (800f018 <__libc_init_array+0x40>)
 800efea:	4c0c      	ldr	r4, [pc, #48]	@ (800f01c <__libc_init_array+0x44>)
 800efec:	f000 fe4a 	bl	800fc84 <_init>
 800eff0:	1b64      	subs	r4, r4, r5
 800eff2:	10a4      	asrs	r4, r4, #2
 800eff4:	2600      	movs	r6, #0
 800eff6:	42a6      	cmp	r6, r4
 800eff8:	d105      	bne.n	800f006 <__libc_init_array+0x2e>
 800effa:	bd70      	pop	{r4, r5, r6, pc}
 800effc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f000:	4798      	blx	r3
 800f002:	3601      	adds	r6, #1
 800f004:	e7ee      	b.n	800efe4 <__libc_init_array+0xc>
 800f006:	f855 3b04 	ldr.w	r3, [r5], #4
 800f00a:	4798      	blx	r3
 800f00c:	3601      	adds	r6, #1
 800f00e:	e7f2      	b.n	800eff6 <__libc_init_array+0x1e>
 800f010:	080145a0 	.word	0x080145a0
 800f014:	080145a0 	.word	0x080145a0
 800f018:	080145a0 	.word	0x080145a0
 800f01c:	080145a4 	.word	0x080145a4

0800f020 <__retarget_lock_init_recursive>:
 800f020:	4770      	bx	lr

0800f022 <__retarget_lock_acquire_recursive>:
 800f022:	4770      	bx	lr

0800f024 <__retarget_lock_release_recursive>:
 800f024:	4770      	bx	lr

0800f026 <memcpy>:
 800f026:	440a      	add	r2, r1
 800f028:	4291      	cmp	r1, r2
 800f02a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f02e:	d100      	bne.n	800f032 <memcpy+0xc>
 800f030:	4770      	bx	lr
 800f032:	b510      	push	{r4, lr}
 800f034:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f038:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f03c:	4291      	cmp	r1, r2
 800f03e:	d1f9      	bne.n	800f034 <memcpy+0xe>
 800f040:	bd10      	pop	{r4, pc}
	...

0800f044 <__assert_func>:
 800f044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f046:	4614      	mov	r4, r2
 800f048:	461a      	mov	r2, r3
 800f04a:	4b09      	ldr	r3, [pc, #36]	@ (800f070 <__assert_func+0x2c>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4605      	mov	r5, r0
 800f050:	68d8      	ldr	r0, [r3, #12]
 800f052:	b954      	cbnz	r4, 800f06a <__assert_func+0x26>
 800f054:	4b07      	ldr	r3, [pc, #28]	@ (800f074 <__assert_func+0x30>)
 800f056:	461c      	mov	r4, r3
 800f058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f05c:	9100      	str	r1, [sp, #0]
 800f05e:	462b      	mov	r3, r5
 800f060:	4905      	ldr	r1, [pc, #20]	@ (800f078 <__assert_func+0x34>)
 800f062:	f000 fc89 	bl	800f978 <fiprintf>
 800f066:	f000 fd3d 	bl	800fae4 <abort>
 800f06a:	4b04      	ldr	r3, [pc, #16]	@ (800f07c <__assert_func+0x38>)
 800f06c:	e7f4      	b.n	800f058 <__assert_func+0x14>
 800f06e:	bf00      	nop
 800f070:	20000020 	.word	0x20000020
 800f074:	08014562 	.word	0x08014562
 800f078:	08014534 	.word	0x08014534
 800f07c:	08014527 	.word	0x08014527

0800f080 <_free_r>:
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	4605      	mov	r5, r0
 800f084:	2900      	cmp	r1, #0
 800f086:	d041      	beq.n	800f10c <_free_r+0x8c>
 800f088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f08c:	1f0c      	subs	r4, r1, #4
 800f08e:	2b00      	cmp	r3, #0
 800f090:	bfb8      	it	lt
 800f092:	18e4      	addlt	r4, r4, r3
 800f094:	f000 f8e8 	bl	800f268 <__malloc_lock>
 800f098:	4a1d      	ldr	r2, [pc, #116]	@ (800f110 <_free_r+0x90>)
 800f09a:	6813      	ldr	r3, [r2, #0]
 800f09c:	b933      	cbnz	r3, 800f0ac <_free_r+0x2c>
 800f09e:	6063      	str	r3, [r4, #4]
 800f0a0:	6014      	str	r4, [r2, #0]
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0a8:	f000 b8e4 	b.w	800f274 <__malloc_unlock>
 800f0ac:	42a3      	cmp	r3, r4
 800f0ae:	d908      	bls.n	800f0c2 <_free_r+0x42>
 800f0b0:	6820      	ldr	r0, [r4, #0]
 800f0b2:	1821      	adds	r1, r4, r0
 800f0b4:	428b      	cmp	r3, r1
 800f0b6:	bf01      	itttt	eq
 800f0b8:	6819      	ldreq	r1, [r3, #0]
 800f0ba:	685b      	ldreq	r3, [r3, #4]
 800f0bc:	1809      	addeq	r1, r1, r0
 800f0be:	6021      	streq	r1, [r4, #0]
 800f0c0:	e7ed      	b.n	800f09e <_free_r+0x1e>
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	b10b      	cbz	r3, 800f0cc <_free_r+0x4c>
 800f0c8:	42a3      	cmp	r3, r4
 800f0ca:	d9fa      	bls.n	800f0c2 <_free_r+0x42>
 800f0cc:	6811      	ldr	r1, [r2, #0]
 800f0ce:	1850      	adds	r0, r2, r1
 800f0d0:	42a0      	cmp	r0, r4
 800f0d2:	d10b      	bne.n	800f0ec <_free_r+0x6c>
 800f0d4:	6820      	ldr	r0, [r4, #0]
 800f0d6:	4401      	add	r1, r0
 800f0d8:	1850      	adds	r0, r2, r1
 800f0da:	4283      	cmp	r3, r0
 800f0dc:	6011      	str	r1, [r2, #0]
 800f0de:	d1e0      	bne.n	800f0a2 <_free_r+0x22>
 800f0e0:	6818      	ldr	r0, [r3, #0]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	6053      	str	r3, [r2, #4]
 800f0e6:	4408      	add	r0, r1
 800f0e8:	6010      	str	r0, [r2, #0]
 800f0ea:	e7da      	b.n	800f0a2 <_free_r+0x22>
 800f0ec:	d902      	bls.n	800f0f4 <_free_r+0x74>
 800f0ee:	230c      	movs	r3, #12
 800f0f0:	602b      	str	r3, [r5, #0]
 800f0f2:	e7d6      	b.n	800f0a2 <_free_r+0x22>
 800f0f4:	6820      	ldr	r0, [r4, #0]
 800f0f6:	1821      	adds	r1, r4, r0
 800f0f8:	428b      	cmp	r3, r1
 800f0fa:	bf04      	itt	eq
 800f0fc:	6819      	ldreq	r1, [r3, #0]
 800f0fe:	685b      	ldreq	r3, [r3, #4]
 800f100:	6063      	str	r3, [r4, #4]
 800f102:	bf04      	itt	eq
 800f104:	1809      	addeq	r1, r1, r0
 800f106:	6021      	streq	r1, [r4, #0]
 800f108:	6054      	str	r4, [r2, #4]
 800f10a:	e7ca      	b.n	800f0a2 <_free_r+0x22>
 800f10c:	bd38      	pop	{r3, r4, r5, pc}
 800f10e:	bf00      	nop
 800f110:	2000897c 	.word	0x2000897c

0800f114 <malloc>:
 800f114:	4b02      	ldr	r3, [pc, #8]	@ (800f120 <malloc+0xc>)
 800f116:	4601      	mov	r1, r0
 800f118:	6818      	ldr	r0, [r3, #0]
 800f11a:	f000 b825 	b.w	800f168 <_malloc_r>
 800f11e:	bf00      	nop
 800f120:	20000020 	.word	0x20000020

0800f124 <sbrk_aligned>:
 800f124:	b570      	push	{r4, r5, r6, lr}
 800f126:	4e0f      	ldr	r6, [pc, #60]	@ (800f164 <sbrk_aligned+0x40>)
 800f128:	460c      	mov	r4, r1
 800f12a:	6831      	ldr	r1, [r6, #0]
 800f12c:	4605      	mov	r5, r0
 800f12e:	b911      	cbnz	r1, 800f136 <sbrk_aligned+0x12>
 800f130:	f000 fcc8 	bl	800fac4 <_sbrk_r>
 800f134:	6030      	str	r0, [r6, #0]
 800f136:	4621      	mov	r1, r4
 800f138:	4628      	mov	r0, r5
 800f13a:	f000 fcc3 	bl	800fac4 <_sbrk_r>
 800f13e:	1c43      	adds	r3, r0, #1
 800f140:	d103      	bne.n	800f14a <sbrk_aligned+0x26>
 800f142:	f04f 34ff 	mov.w	r4, #4294967295
 800f146:	4620      	mov	r0, r4
 800f148:	bd70      	pop	{r4, r5, r6, pc}
 800f14a:	1cc4      	adds	r4, r0, #3
 800f14c:	f024 0403 	bic.w	r4, r4, #3
 800f150:	42a0      	cmp	r0, r4
 800f152:	d0f8      	beq.n	800f146 <sbrk_aligned+0x22>
 800f154:	1a21      	subs	r1, r4, r0
 800f156:	4628      	mov	r0, r5
 800f158:	f000 fcb4 	bl	800fac4 <_sbrk_r>
 800f15c:	3001      	adds	r0, #1
 800f15e:	d1f2      	bne.n	800f146 <sbrk_aligned+0x22>
 800f160:	e7ef      	b.n	800f142 <sbrk_aligned+0x1e>
 800f162:	bf00      	nop
 800f164:	20008978 	.word	0x20008978

0800f168 <_malloc_r>:
 800f168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f16c:	1ccd      	adds	r5, r1, #3
 800f16e:	f025 0503 	bic.w	r5, r5, #3
 800f172:	3508      	adds	r5, #8
 800f174:	2d0c      	cmp	r5, #12
 800f176:	bf38      	it	cc
 800f178:	250c      	movcc	r5, #12
 800f17a:	2d00      	cmp	r5, #0
 800f17c:	4606      	mov	r6, r0
 800f17e:	db01      	blt.n	800f184 <_malloc_r+0x1c>
 800f180:	42a9      	cmp	r1, r5
 800f182:	d904      	bls.n	800f18e <_malloc_r+0x26>
 800f184:	230c      	movs	r3, #12
 800f186:	6033      	str	r3, [r6, #0]
 800f188:	2000      	movs	r0, #0
 800f18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f18e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f264 <_malloc_r+0xfc>
 800f192:	f000 f869 	bl	800f268 <__malloc_lock>
 800f196:	f8d8 3000 	ldr.w	r3, [r8]
 800f19a:	461c      	mov	r4, r3
 800f19c:	bb44      	cbnz	r4, 800f1f0 <_malloc_r+0x88>
 800f19e:	4629      	mov	r1, r5
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	f7ff ffbf 	bl	800f124 <sbrk_aligned>
 800f1a6:	1c43      	adds	r3, r0, #1
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	d158      	bne.n	800f25e <_malloc_r+0xf6>
 800f1ac:	f8d8 4000 	ldr.w	r4, [r8]
 800f1b0:	4627      	mov	r7, r4
 800f1b2:	2f00      	cmp	r7, #0
 800f1b4:	d143      	bne.n	800f23e <_malloc_r+0xd6>
 800f1b6:	2c00      	cmp	r4, #0
 800f1b8:	d04b      	beq.n	800f252 <_malloc_r+0xea>
 800f1ba:	6823      	ldr	r3, [r4, #0]
 800f1bc:	4639      	mov	r1, r7
 800f1be:	4630      	mov	r0, r6
 800f1c0:	eb04 0903 	add.w	r9, r4, r3
 800f1c4:	f000 fc7e 	bl	800fac4 <_sbrk_r>
 800f1c8:	4581      	cmp	r9, r0
 800f1ca:	d142      	bne.n	800f252 <_malloc_r+0xea>
 800f1cc:	6821      	ldr	r1, [r4, #0]
 800f1ce:	1a6d      	subs	r5, r5, r1
 800f1d0:	4629      	mov	r1, r5
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f7ff ffa6 	bl	800f124 <sbrk_aligned>
 800f1d8:	3001      	adds	r0, #1
 800f1da:	d03a      	beq.n	800f252 <_malloc_r+0xea>
 800f1dc:	6823      	ldr	r3, [r4, #0]
 800f1de:	442b      	add	r3, r5
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	f8d8 3000 	ldr.w	r3, [r8]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	bb62      	cbnz	r2, 800f244 <_malloc_r+0xdc>
 800f1ea:	f8c8 7000 	str.w	r7, [r8]
 800f1ee:	e00f      	b.n	800f210 <_malloc_r+0xa8>
 800f1f0:	6822      	ldr	r2, [r4, #0]
 800f1f2:	1b52      	subs	r2, r2, r5
 800f1f4:	d420      	bmi.n	800f238 <_malloc_r+0xd0>
 800f1f6:	2a0b      	cmp	r2, #11
 800f1f8:	d917      	bls.n	800f22a <_malloc_r+0xc2>
 800f1fa:	1961      	adds	r1, r4, r5
 800f1fc:	42a3      	cmp	r3, r4
 800f1fe:	6025      	str	r5, [r4, #0]
 800f200:	bf18      	it	ne
 800f202:	6059      	strne	r1, [r3, #4]
 800f204:	6863      	ldr	r3, [r4, #4]
 800f206:	bf08      	it	eq
 800f208:	f8c8 1000 	streq.w	r1, [r8]
 800f20c:	5162      	str	r2, [r4, r5]
 800f20e:	604b      	str	r3, [r1, #4]
 800f210:	4630      	mov	r0, r6
 800f212:	f000 f82f 	bl	800f274 <__malloc_unlock>
 800f216:	f104 000b 	add.w	r0, r4, #11
 800f21a:	1d23      	adds	r3, r4, #4
 800f21c:	f020 0007 	bic.w	r0, r0, #7
 800f220:	1ac2      	subs	r2, r0, r3
 800f222:	bf1c      	itt	ne
 800f224:	1a1b      	subne	r3, r3, r0
 800f226:	50a3      	strne	r3, [r4, r2]
 800f228:	e7af      	b.n	800f18a <_malloc_r+0x22>
 800f22a:	6862      	ldr	r2, [r4, #4]
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	bf0c      	ite	eq
 800f230:	f8c8 2000 	streq.w	r2, [r8]
 800f234:	605a      	strne	r2, [r3, #4]
 800f236:	e7eb      	b.n	800f210 <_malloc_r+0xa8>
 800f238:	4623      	mov	r3, r4
 800f23a:	6864      	ldr	r4, [r4, #4]
 800f23c:	e7ae      	b.n	800f19c <_malloc_r+0x34>
 800f23e:	463c      	mov	r4, r7
 800f240:	687f      	ldr	r7, [r7, #4]
 800f242:	e7b6      	b.n	800f1b2 <_malloc_r+0x4a>
 800f244:	461a      	mov	r2, r3
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	42a3      	cmp	r3, r4
 800f24a:	d1fb      	bne.n	800f244 <_malloc_r+0xdc>
 800f24c:	2300      	movs	r3, #0
 800f24e:	6053      	str	r3, [r2, #4]
 800f250:	e7de      	b.n	800f210 <_malloc_r+0xa8>
 800f252:	230c      	movs	r3, #12
 800f254:	6033      	str	r3, [r6, #0]
 800f256:	4630      	mov	r0, r6
 800f258:	f000 f80c 	bl	800f274 <__malloc_unlock>
 800f25c:	e794      	b.n	800f188 <_malloc_r+0x20>
 800f25e:	6005      	str	r5, [r0, #0]
 800f260:	e7d6      	b.n	800f210 <_malloc_r+0xa8>
 800f262:	bf00      	nop
 800f264:	2000897c 	.word	0x2000897c

0800f268 <__malloc_lock>:
 800f268:	4801      	ldr	r0, [pc, #4]	@ (800f270 <__malloc_lock+0x8>)
 800f26a:	f7ff beda 	b.w	800f022 <__retarget_lock_acquire_recursive>
 800f26e:	bf00      	nop
 800f270:	20008974 	.word	0x20008974

0800f274 <__malloc_unlock>:
 800f274:	4801      	ldr	r0, [pc, #4]	@ (800f27c <__malloc_unlock+0x8>)
 800f276:	f7ff bed5 	b.w	800f024 <__retarget_lock_release_recursive>
 800f27a:	bf00      	nop
 800f27c:	20008974 	.word	0x20008974

0800f280 <__sfputc_r>:
 800f280:	6893      	ldr	r3, [r2, #8]
 800f282:	3b01      	subs	r3, #1
 800f284:	2b00      	cmp	r3, #0
 800f286:	b410      	push	{r4}
 800f288:	6093      	str	r3, [r2, #8]
 800f28a:	da08      	bge.n	800f29e <__sfputc_r+0x1e>
 800f28c:	6994      	ldr	r4, [r2, #24]
 800f28e:	42a3      	cmp	r3, r4
 800f290:	db01      	blt.n	800f296 <__sfputc_r+0x16>
 800f292:	290a      	cmp	r1, #10
 800f294:	d103      	bne.n	800f29e <__sfputc_r+0x1e>
 800f296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f29a:	f000 bb7f 	b.w	800f99c <__swbuf_r>
 800f29e:	6813      	ldr	r3, [r2, #0]
 800f2a0:	1c58      	adds	r0, r3, #1
 800f2a2:	6010      	str	r0, [r2, #0]
 800f2a4:	7019      	strb	r1, [r3, #0]
 800f2a6:	4608      	mov	r0, r1
 800f2a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <__sfputs_r>:
 800f2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b0:	4606      	mov	r6, r0
 800f2b2:	460f      	mov	r7, r1
 800f2b4:	4614      	mov	r4, r2
 800f2b6:	18d5      	adds	r5, r2, r3
 800f2b8:	42ac      	cmp	r4, r5
 800f2ba:	d101      	bne.n	800f2c0 <__sfputs_r+0x12>
 800f2bc:	2000      	movs	r0, #0
 800f2be:	e007      	b.n	800f2d0 <__sfputs_r+0x22>
 800f2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2c4:	463a      	mov	r2, r7
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f7ff ffda 	bl	800f280 <__sfputc_r>
 800f2cc:	1c43      	adds	r3, r0, #1
 800f2ce:	d1f3      	bne.n	800f2b8 <__sfputs_r+0xa>
 800f2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2d4 <_vfiprintf_r>:
 800f2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d8:	460d      	mov	r5, r1
 800f2da:	b09d      	sub	sp, #116	@ 0x74
 800f2dc:	4614      	mov	r4, r2
 800f2de:	4698      	mov	r8, r3
 800f2e0:	4606      	mov	r6, r0
 800f2e2:	b118      	cbz	r0, 800f2ec <_vfiprintf_r+0x18>
 800f2e4:	6a03      	ldr	r3, [r0, #32]
 800f2e6:	b90b      	cbnz	r3, 800f2ec <_vfiprintf_r+0x18>
 800f2e8:	f7ff fd6e 	bl	800edc8 <__sinit>
 800f2ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2ee:	07d9      	lsls	r1, r3, #31
 800f2f0:	d405      	bmi.n	800f2fe <_vfiprintf_r+0x2a>
 800f2f2:	89ab      	ldrh	r3, [r5, #12]
 800f2f4:	059a      	lsls	r2, r3, #22
 800f2f6:	d402      	bmi.n	800f2fe <_vfiprintf_r+0x2a>
 800f2f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2fa:	f7ff fe92 	bl	800f022 <__retarget_lock_acquire_recursive>
 800f2fe:	89ab      	ldrh	r3, [r5, #12]
 800f300:	071b      	lsls	r3, r3, #28
 800f302:	d501      	bpl.n	800f308 <_vfiprintf_r+0x34>
 800f304:	692b      	ldr	r3, [r5, #16]
 800f306:	b99b      	cbnz	r3, 800f330 <_vfiprintf_r+0x5c>
 800f308:	4629      	mov	r1, r5
 800f30a:	4630      	mov	r0, r6
 800f30c:	f000 fb84 	bl	800fa18 <__swsetup_r>
 800f310:	b170      	cbz	r0, 800f330 <_vfiprintf_r+0x5c>
 800f312:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f314:	07dc      	lsls	r4, r3, #31
 800f316:	d504      	bpl.n	800f322 <_vfiprintf_r+0x4e>
 800f318:	f04f 30ff 	mov.w	r0, #4294967295
 800f31c:	b01d      	add	sp, #116	@ 0x74
 800f31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f322:	89ab      	ldrh	r3, [r5, #12]
 800f324:	0598      	lsls	r0, r3, #22
 800f326:	d4f7      	bmi.n	800f318 <_vfiprintf_r+0x44>
 800f328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f32a:	f7ff fe7b 	bl	800f024 <__retarget_lock_release_recursive>
 800f32e:	e7f3      	b.n	800f318 <_vfiprintf_r+0x44>
 800f330:	2300      	movs	r3, #0
 800f332:	9309      	str	r3, [sp, #36]	@ 0x24
 800f334:	2320      	movs	r3, #32
 800f336:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f33a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f33e:	2330      	movs	r3, #48	@ 0x30
 800f340:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f4f0 <_vfiprintf_r+0x21c>
 800f344:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f348:	f04f 0901 	mov.w	r9, #1
 800f34c:	4623      	mov	r3, r4
 800f34e:	469a      	mov	sl, r3
 800f350:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f354:	b10a      	cbz	r2, 800f35a <_vfiprintf_r+0x86>
 800f356:	2a25      	cmp	r2, #37	@ 0x25
 800f358:	d1f9      	bne.n	800f34e <_vfiprintf_r+0x7a>
 800f35a:	ebba 0b04 	subs.w	fp, sl, r4
 800f35e:	d00b      	beq.n	800f378 <_vfiprintf_r+0xa4>
 800f360:	465b      	mov	r3, fp
 800f362:	4622      	mov	r2, r4
 800f364:	4629      	mov	r1, r5
 800f366:	4630      	mov	r0, r6
 800f368:	f7ff ffa1 	bl	800f2ae <__sfputs_r>
 800f36c:	3001      	adds	r0, #1
 800f36e:	f000 80a7 	beq.w	800f4c0 <_vfiprintf_r+0x1ec>
 800f372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f374:	445a      	add	r2, fp
 800f376:	9209      	str	r2, [sp, #36]	@ 0x24
 800f378:	f89a 3000 	ldrb.w	r3, [sl]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	f000 809f 	beq.w	800f4c0 <_vfiprintf_r+0x1ec>
 800f382:	2300      	movs	r3, #0
 800f384:	f04f 32ff 	mov.w	r2, #4294967295
 800f388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f38c:	f10a 0a01 	add.w	sl, sl, #1
 800f390:	9304      	str	r3, [sp, #16]
 800f392:	9307      	str	r3, [sp, #28]
 800f394:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f398:	931a      	str	r3, [sp, #104]	@ 0x68
 800f39a:	4654      	mov	r4, sl
 800f39c:	2205      	movs	r2, #5
 800f39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3a2:	4853      	ldr	r0, [pc, #332]	@ (800f4f0 <_vfiprintf_r+0x21c>)
 800f3a4:	f7f0 ff2c 	bl	8000200 <memchr>
 800f3a8:	9a04      	ldr	r2, [sp, #16]
 800f3aa:	b9d8      	cbnz	r0, 800f3e4 <_vfiprintf_r+0x110>
 800f3ac:	06d1      	lsls	r1, r2, #27
 800f3ae:	bf44      	itt	mi
 800f3b0:	2320      	movmi	r3, #32
 800f3b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3b6:	0713      	lsls	r3, r2, #28
 800f3b8:	bf44      	itt	mi
 800f3ba:	232b      	movmi	r3, #43	@ 0x2b
 800f3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800f3c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3c6:	d015      	beq.n	800f3f4 <_vfiprintf_r+0x120>
 800f3c8:	9a07      	ldr	r2, [sp, #28]
 800f3ca:	4654      	mov	r4, sl
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	f04f 0c0a 	mov.w	ip, #10
 800f3d2:	4621      	mov	r1, r4
 800f3d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3d8:	3b30      	subs	r3, #48	@ 0x30
 800f3da:	2b09      	cmp	r3, #9
 800f3dc:	d94b      	bls.n	800f476 <_vfiprintf_r+0x1a2>
 800f3de:	b1b0      	cbz	r0, 800f40e <_vfiprintf_r+0x13a>
 800f3e0:	9207      	str	r2, [sp, #28]
 800f3e2:	e014      	b.n	800f40e <_vfiprintf_r+0x13a>
 800f3e4:	eba0 0308 	sub.w	r3, r0, r8
 800f3e8:	fa09 f303 	lsl.w	r3, r9, r3
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	9304      	str	r3, [sp, #16]
 800f3f0:	46a2      	mov	sl, r4
 800f3f2:	e7d2      	b.n	800f39a <_vfiprintf_r+0xc6>
 800f3f4:	9b03      	ldr	r3, [sp, #12]
 800f3f6:	1d19      	adds	r1, r3, #4
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	9103      	str	r1, [sp, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	bfbb      	ittet	lt
 800f400:	425b      	neglt	r3, r3
 800f402:	f042 0202 	orrlt.w	r2, r2, #2
 800f406:	9307      	strge	r3, [sp, #28]
 800f408:	9307      	strlt	r3, [sp, #28]
 800f40a:	bfb8      	it	lt
 800f40c:	9204      	strlt	r2, [sp, #16]
 800f40e:	7823      	ldrb	r3, [r4, #0]
 800f410:	2b2e      	cmp	r3, #46	@ 0x2e
 800f412:	d10a      	bne.n	800f42a <_vfiprintf_r+0x156>
 800f414:	7863      	ldrb	r3, [r4, #1]
 800f416:	2b2a      	cmp	r3, #42	@ 0x2a
 800f418:	d132      	bne.n	800f480 <_vfiprintf_r+0x1ac>
 800f41a:	9b03      	ldr	r3, [sp, #12]
 800f41c:	1d1a      	adds	r2, r3, #4
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	9203      	str	r2, [sp, #12]
 800f422:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f426:	3402      	adds	r4, #2
 800f428:	9305      	str	r3, [sp, #20]
 800f42a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f500 <_vfiprintf_r+0x22c>
 800f42e:	7821      	ldrb	r1, [r4, #0]
 800f430:	2203      	movs	r2, #3
 800f432:	4650      	mov	r0, sl
 800f434:	f7f0 fee4 	bl	8000200 <memchr>
 800f438:	b138      	cbz	r0, 800f44a <_vfiprintf_r+0x176>
 800f43a:	9b04      	ldr	r3, [sp, #16]
 800f43c:	eba0 000a 	sub.w	r0, r0, sl
 800f440:	2240      	movs	r2, #64	@ 0x40
 800f442:	4082      	lsls	r2, r0
 800f444:	4313      	orrs	r3, r2
 800f446:	3401      	adds	r4, #1
 800f448:	9304      	str	r3, [sp, #16]
 800f44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f44e:	4829      	ldr	r0, [pc, #164]	@ (800f4f4 <_vfiprintf_r+0x220>)
 800f450:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f454:	2206      	movs	r2, #6
 800f456:	f7f0 fed3 	bl	8000200 <memchr>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d03f      	beq.n	800f4de <_vfiprintf_r+0x20a>
 800f45e:	4b26      	ldr	r3, [pc, #152]	@ (800f4f8 <_vfiprintf_r+0x224>)
 800f460:	bb1b      	cbnz	r3, 800f4aa <_vfiprintf_r+0x1d6>
 800f462:	9b03      	ldr	r3, [sp, #12]
 800f464:	3307      	adds	r3, #7
 800f466:	f023 0307 	bic.w	r3, r3, #7
 800f46a:	3308      	adds	r3, #8
 800f46c:	9303      	str	r3, [sp, #12]
 800f46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f470:	443b      	add	r3, r7
 800f472:	9309      	str	r3, [sp, #36]	@ 0x24
 800f474:	e76a      	b.n	800f34c <_vfiprintf_r+0x78>
 800f476:	fb0c 3202 	mla	r2, ip, r2, r3
 800f47a:	460c      	mov	r4, r1
 800f47c:	2001      	movs	r0, #1
 800f47e:	e7a8      	b.n	800f3d2 <_vfiprintf_r+0xfe>
 800f480:	2300      	movs	r3, #0
 800f482:	3401      	adds	r4, #1
 800f484:	9305      	str	r3, [sp, #20]
 800f486:	4619      	mov	r1, r3
 800f488:	f04f 0c0a 	mov.w	ip, #10
 800f48c:	4620      	mov	r0, r4
 800f48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f492:	3a30      	subs	r2, #48	@ 0x30
 800f494:	2a09      	cmp	r2, #9
 800f496:	d903      	bls.n	800f4a0 <_vfiprintf_r+0x1cc>
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d0c6      	beq.n	800f42a <_vfiprintf_r+0x156>
 800f49c:	9105      	str	r1, [sp, #20]
 800f49e:	e7c4      	b.n	800f42a <_vfiprintf_r+0x156>
 800f4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e7f0      	b.n	800f48c <_vfiprintf_r+0x1b8>
 800f4aa:	ab03      	add	r3, sp, #12
 800f4ac:	9300      	str	r3, [sp, #0]
 800f4ae:	462a      	mov	r2, r5
 800f4b0:	4b12      	ldr	r3, [pc, #72]	@ (800f4fc <_vfiprintf_r+0x228>)
 800f4b2:	a904      	add	r1, sp, #16
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	f3af 8000 	nop.w
 800f4ba:	4607      	mov	r7, r0
 800f4bc:	1c78      	adds	r0, r7, #1
 800f4be:	d1d6      	bne.n	800f46e <_vfiprintf_r+0x19a>
 800f4c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4c2:	07d9      	lsls	r1, r3, #31
 800f4c4:	d405      	bmi.n	800f4d2 <_vfiprintf_r+0x1fe>
 800f4c6:	89ab      	ldrh	r3, [r5, #12]
 800f4c8:	059a      	lsls	r2, r3, #22
 800f4ca:	d402      	bmi.n	800f4d2 <_vfiprintf_r+0x1fe>
 800f4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4ce:	f7ff fda9 	bl	800f024 <__retarget_lock_release_recursive>
 800f4d2:	89ab      	ldrh	r3, [r5, #12]
 800f4d4:	065b      	lsls	r3, r3, #25
 800f4d6:	f53f af1f 	bmi.w	800f318 <_vfiprintf_r+0x44>
 800f4da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4dc:	e71e      	b.n	800f31c <_vfiprintf_r+0x48>
 800f4de:	ab03      	add	r3, sp, #12
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	462a      	mov	r2, r5
 800f4e4:	4b05      	ldr	r3, [pc, #20]	@ (800f4fc <_vfiprintf_r+0x228>)
 800f4e6:	a904      	add	r1, sp, #16
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	f000 f879 	bl	800f5e0 <_printf_i>
 800f4ee:	e7e4      	b.n	800f4ba <_vfiprintf_r+0x1e6>
 800f4f0:	08014563 	.word	0x08014563
 800f4f4:	0801456d 	.word	0x0801456d
 800f4f8:	00000000 	.word	0x00000000
 800f4fc:	0800f2af 	.word	0x0800f2af
 800f500:	08014569 	.word	0x08014569

0800f504 <_printf_common>:
 800f504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f508:	4616      	mov	r6, r2
 800f50a:	4698      	mov	r8, r3
 800f50c:	688a      	ldr	r2, [r1, #8]
 800f50e:	690b      	ldr	r3, [r1, #16]
 800f510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f514:	4293      	cmp	r3, r2
 800f516:	bfb8      	it	lt
 800f518:	4613      	movlt	r3, r2
 800f51a:	6033      	str	r3, [r6, #0]
 800f51c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f520:	4607      	mov	r7, r0
 800f522:	460c      	mov	r4, r1
 800f524:	b10a      	cbz	r2, 800f52a <_printf_common+0x26>
 800f526:	3301      	adds	r3, #1
 800f528:	6033      	str	r3, [r6, #0]
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	0699      	lsls	r1, r3, #26
 800f52e:	bf42      	ittt	mi
 800f530:	6833      	ldrmi	r3, [r6, #0]
 800f532:	3302      	addmi	r3, #2
 800f534:	6033      	strmi	r3, [r6, #0]
 800f536:	6825      	ldr	r5, [r4, #0]
 800f538:	f015 0506 	ands.w	r5, r5, #6
 800f53c:	d106      	bne.n	800f54c <_printf_common+0x48>
 800f53e:	f104 0a19 	add.w	sl, r4, #25
 800f542:	68e3      	ldr	r3, [r4, #12]
 800f544:	6832      	ldr	r2, [r6, #0]
 800f546:	1a9b      	subs	r3, r3, r2
 800f548:	42ab      	cmp	r3, r5
 800f54a:	dc26      	bgt.n	800f59a <_printf_common+0x96>
 800f54c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f550:	6822      	ldr	r2, [r4, #0]
 800f552:	3b00      	subs	r3, #0
 800f554:	bf18      	it	ne
 800f556:	2301      	movne	r3, #1
 800f558:	0692      	lsls	r2, r2, #26
 800f55a:	d42b      	bmi.n	800f5b4 <_printf_common+0xb0>
 800f55c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f560:	4641      	mov	r1, r8
 800f562:	4638      	mov	r0, r7
 800f564:	47c8      	blx	r9
 800f566:	3001      	adds	r0, #1
 800f568:	d01e      	beq.n	800f5a8 <_printf_common+0xa4>
 800f56a:	6823      	ldr	r3, [r4, #0]
 800f56c:	6922      	ldr	r2, [r4, #16]
 800f56e:	f003 0306 	and.w	r3, r3, #6
 800f572:	2b04      	cmp	r3, #4
 800f574:	bf02      	ittt	eq
 800f576:	68e5      	ldreq	r5, [r4, #12]
 800f578:	6833      	ldreq	r3, [r6, #0]
 800f57a:	1aed      	subeq	r5, r5, r3
 800f57c:	68a3      	ldr	r3, [r4, #8]
 800f57e:	bf0c      	ite	eq
 800f580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f584:	2500      	movne	r5, #0
 800f586:	4293      	cmp	r3, r2
 800f588:	bfc4      	itt	gt
 800f58a:	1a9b      	subgt	r3, r3, r2
 800f58c:	18ed      	addgt	r5, r5, r3
 800f58e:	2600      	movs	r6, #0
 800f590:	341a      	adds	r4, #26
 800f592:	42b5      	cmp	r5, r6
 800f594:	d11a      	bne.n	800f5cc <_printf_common+0xc8>
 800f596:	2000      	movs	r0, #0
 800f598:	e008      	b.n	800f5ac <_printf_common+0xa8>
 800f59a:	2301      	movs	r3, #1
 800f59c:	4652      	mov	r2, sl
 800f59e:	4641      	mov	r1, r8
 800f5a0:	4638      	mov	r0, r7
 800f5a2:	47c8      	blx	r9
 800f5a4:	3001      	adds	r0, #1
 800f5a6:	d103      	bne.n	800f5b0 <_printf_common+0xac>
 800f5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5b0:	3501      	adds	r5, #1
 800f5b2:	e7c6      	b.n	800f542 <_printf_common+0x3e>
 800f5b4:	18e1      	adds	r1, r4, r3
 800f5b6:	1c5a      	adds	r2, r3, #1
 800f5b8:	2030      	movs	r0, #48	@ 0x30
 800f5ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f5be:	4422      	add	r2, r4
 800f5c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f5c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f5c8:	3302      	adds	r3, #2
 800f5ca:	e7c7      	b.n	800f55c <_printf_common+0x58>
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	4622      	mov	r2, r4
 800f5d0:	4641      	mov	r1, r8
 800f5d2:	4638      	mov	r0, r7
 800f5d4:	47c8      	blx	r9
 800f5d6:	3001      	adds	r0, #1
 800f5d8:	d0e6      	beq.n	800f5a8 <_printf_common+0xa4>
 800f5da:	3601      	adds	r6, #1
 800f5dc:	e7d9      	b.n	800f592 <_printf_common+0x8e>
	...

0800f5e0 <_printf_i>:
 800f5e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5e4:	7e0f      	ldrb	r7, [r1, #24]
 800f5e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f5e8:	2f78      	cmp	r7, #120	@ 0x78
 800f5ea:	4691      	mov	r9, r2
 800f5ec:	4680      	mov	r8, r0
 800f5ee:	460c      	mov	r4, r1
 800f5f0:	469a      	mov	sl, r3
 800f5f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f5f6:	d807      	bhi.n	800f608 <_printf_i+0x28>
 800f5f8:	2f62      	cmp	r7, #98	@ 0x62
 800f5fa:	d80a      	bhi.n	800f612 <_printf_i+0x32>
 800f5fc:	2f00      	cmp	r7, #0
 800f5fe:	f000 80d2 	beq.w	800f7a6 <_printf_i+0x1c6>
 800f602:	2f58      	cmp	r7, #88	@ 0x58
 800f604:	f000 80b9 	beq.w	800f77a <_printf_i+0x19a>
 800f608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f60c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f610:	e03a      	b.n	800f688 <_printf_i+0xa8>
 800f612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f616:	2b15      	cmp	r3, #21
 800f618:	d8f6      	bhi.n	800f608 <_printf_i+0x28>
 800f61a:	a101      	add	r1, pc, #4	@ (adr r1, 800f620 <_printf_i+0x40>)
 800f61c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f620:	0800f679 	.word	0x0800f679
 800f624:	0800f68d 	.word	0x0800f68d
 800f628:	0800f609 	.word	0x0800f609
 800f62c:	0800f609 	.word	0x0800f609
 800f630:	0800f609 	.word	0x0800f609
 800f634:	0800f609 	.word	0x0800f609
 800f638:	0800f68d 	.word	0x0800f68d
 800f63c:	0800f609 	.word	0x0800f609
 800f640:	0800f609 	.word	0x0800f609
 800f644:	0800f609 	.word	0x0800f609
 800f648:	0800f609 	.word	0x0800f609
 800f64c:	0800f78d 	.word	0x0800f78d
 800f650:	0800f6b7 	.word	0x0800f6b7
 800f654:	0800f747 	.word	0x0800f747
 800f658:	0800f609 	.word	0x0800f609
 800f65c:	0800f609 	.word	0x0800f609
 800f660:	0800f7af 	.word	0x0800f7af
 800f664:	0800f609 	.word	0x0800f609
 800f668:	0800f6b7 	.word	0x0800f6b7
 800f66c:	0800f609 	.word	0x0800f609
 800f670:	0800f609 	.word	0x0800f609
 800f674:	0800f74f 	.word	0x0800f74f
 800f678:	6833      	ldr	r3, [r6, #0]
 800f67a:	1d1a      	adds	r2, r3, #4
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	6032      	str	r2, [r6, #0]
 800f680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f688:	2301      	movs	r3, #1
 800f68a:	e09d      	b.n	800f7c8 <_printf_i+0x1e8>
 800f68c:	6833      	ldr	r3, [r6, #0]
 800f68e:	6820      	ldr	r0, [r4, #0]
 800f690:	1d19      	adds	r1, r3, #4
 800f692:	6031      	str	r1, [r6, #0]
 800f694:	0606      	lsls	r6, r0, #24
 800f696:	d501      	bpl.n	800f69c <_printf_i+0xbc>
 800f698:	681d      	ldr	r5, [r3, #0]
 800f69a:	e003      	b.n	800f6a4 <_printf_i+0xc4>
 800f69c:	0645      	lsls	r5, r0, #25
 800f69e:	d5fb      	bpl.n	800f698 <_printf_i+0xb8>
 800f6a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f6a4:	2d00      	cmp	r5, #0
 800f6a6:	da03      	bge.n	800f6b0 <_printf_i+0xd0>
 800f6a8:	232d      	movs	r3, #45	@ 0x2d
 800f6aa:	426d      	negs	r5, r5
 800f6ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6b0:	4859      	ldr	r0, [pc, #356]	@ (800f818 <_printf_i+0x238>)
 800f6b2:	230a      	movs	r3, #10
 800f6b4:	e011      	b.n	800f6da <_printf_i+0xfa>
 800f6b6:	6821      	ldr	r1, [r4, #0]
 800f6b8:	6833      	ldr	r3, [r6, #0]
 800f6ba:	0608      	lsls	r0, r1, #24
 800f6bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f6c0:	d402      	bmi.n	800f6c8 <_printf_i+0xe8>
 800f6c2:	0649      	lsls	r1, r1, #25
 800f6c4:	bf48      	it	mi
 800f6c6:	b2ad      	uxthmi	r5, r5
 800f6c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f6ca:	4853      	ldr	r0, [pc, #332]	@ (800f818 <_printf_i+0x238>)
 800f6cc:	6033      	str	r3, [r6, #0]
 800f6ce:	bf14      	ite	ne
 800f6d0:	230a      	movne	r3, #10
 800f6d2:	2308      	moveq	r3, #8
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f6da:	6866      	ldr	r6, [r4, #4]
 800f6dc:	60a6      	str	r6, [r4, #8]
 800f6de:	2e00      	cmp	r6, #0
 800f6e0:	bfa2      	ittt	ge
 800f6e2:	6821      	ldrge	r1, [r4, #0]
 800f6e4:	f021 0104 	bicge.w	r1, r1, #4
 800f6e8:	6021      	strge	r1, [r4, #0]
 800f6ea:	b90d      	cbnz	r5, 800f6f0 <_printf_i+0x110>
 800f6ec:	2e00      	cmp	r6, #0
 800f6ee:	d04b      	beq.n	800f788 <_printf_i+0x1a8>
 800f6f0:	4616      	mov	r6, r2
 800f6f2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f6f6:	fb03 5711 	mls	r7, r3, r1, r5
 800f6fa:	5dc7      	ldrb	r7, [r0, r7]
 800f6fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f700:	462f      	mov	r7, r5
 800f702:	42bb      	cmp	r3, r7
 800f704:	460d      	mov	r5, r1
 800f706:	d9f4      	bls.n	800f6f2 <_printf_i+0x112>
 800f708:	2b08      	cmp	r3, #8
 800f70a:	d10b      	bne.n	800f724 <_printf_i+0x144>
 800f70c:	6823      	ldr	r3, [r4, #0]
 800f70e:	07df      	lsls	r7, r3, #31
 800f710:	d508      	bpl.n	800f724 <_printf_i+0x144>
 800f712:	6923      	ldr	r3, [r4, #16]
 800f714:	6861      	ldr	r1, [r4, #4]
 800f716:	4299      	cmp	r1, r3
 800f718:	bfde      	ittt	le
 800f71a:	2330      	movle	r3, #48	@ 0x30
 800f71c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f720:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f724:	1b92      	subs	r2, r2, r6
 800f726:	6122      	str	r2, [r4, #16]
 800f728:	f8cd a000 	str.w	sl, [sp]
 800f72c:	464b      	mov	r3, r9
 800f72e:	aa03      	add	r2, sp, #12
 800f730:	4621      	mov	r1, r4
 800f732:	4640      	mov	r0, r8
 800f734:	f7ff fee6 	bl	800f504 <_printf_common>
 800f738:	3001      	adds	r0, #1
 800f73a:	d14a      	bne.n	800f7d2 <_printf_i+0x1f2>
 800f73c:	f04f 30ff 	mov.w	r0, #4294967295
 800f740:	b004      	add	sp, #16
 800f742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	f043 0320 	orr.w	r3, r3, #32
 800f74c:	6023      	str	r3, [r4, #0]
 800f74e:	4833      	ldr	r0, [pc, #204]	@ (800f81c <_printf_i+0x23c>)
 800f750:	2778      	movs	r7, #120	@ 0x78
 800f752:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f756:	6823      	ldr	r3, [r4, #0]
 800f758:	6831      	ldr	r1, [r6, #0]
 800f75a:	061f      	lsls	r7, r3, #24
 800f75c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f760:	d402      	bmi.n	800f768 <_printf_i+0x188>
 800f762:	065f      	lsls	r7, r3, #25
 800f764:	bf48      	it	mi
 800f766:	b2ad      	uxthmi	r5, r5
 800f768:	6031      	str	r1, [r6, #0]
 800f76a:	07d9      	lsls	r1, r3, #31
 800f76c:	bf44      	itt	mi
 800f76e:	f043 0320 	orrmi.w	r3, r3, #32
 800f772:	6023      	strmi	r3, [r4, #0]
 800f774:	b11d      	cbz	r5, 800f77e <_printf_i+0x19e>
 800f776:	2310      	movs	r3, #16
 800f778:	e7ac      	b.n	800f6d4 <_printf_i+0xf4>
 800f77a:	4827      	ldr	r0, [pc, #156]	@ (800f818 <_printf_i+0x238>)
 800f77c:	e7e9      	b.n	800f752 <_printf_i+0x172>
 800f77e:	6823      	ldr	r3, [r4, #0]
 800f780:	f023 0320 	bic.w	r3, r3, #32
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	e7f6      	b.n	800f776 <_printf_i+0x196>
 800f788:	4616      	mov	r6, r2
 800f78a:	e7bd      	b.n	800f708 <_printf_i+0x128>
 800f78c:	6833      	ldr	r3, [r6, #0]
 800f78e:	6825      	ldr	r5, [r4, #0]
 800f790:	6961      	ldr	r1, [r4, #20]
 800f792:	1d18      	adds	r0, r3, #4
 800f794:	6030      	str	r0, [r6, #0]
 800f796:	062e      	lsls	r6, r5, #24
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	d501      	bpl.n	800f7a0 <_printf_i+0x1c0>
 800f79c:	6019      	str	r1, [r3, #0]
 800f79e:	e002      	b.n	800f7a6 <_printf_i+0x1c6>
 800f7a0:	0668      	lsls	r0, r5, #25
 800f7a2:	d5fb      	bpl.n	800f79c <_printf_i+0x1bc>
 800f7a4:	8019      	strh	r1, [r3, #0]
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	6123      	str	r3, [r4, #16]
 800f7aa:	4616      	mov	r6, r2
 800f7ac:	e7bc      	b.n	800f728 <_printf_i+0x148>
 800f7ae:	6833      	ldr	r3, [r6, #0]
 800f7b0:	1d1a      	adds	r2, r3, #4
 800f7b2:	6032      	str	r2, [r6, #0]
 800f7b4:	681e      	ldr	r6, [r3, #0]
 800f7b6:	6862      	ldr	r2, [r4, #4]
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	4630      	mov	r0, r6
 800f7bc:	f7f0 fd20 	bl	8000200 <memchr>
 800f7c0:	b108      	cbz	r0, 800f7c6 <_printf_i+0x1e6>
 800f7c2:	1b80      	subs	r0, r0, r6
 800f7c4:	6060      	str	r0, [r4, #4]
 800f7c6:	6863      	ldr	r3, [r4, #4]
 800f7c8:	6123      	str	r3, [r4, #16]
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7d0:	e7aa      	b.n	800f728 <_printf_i+0x148>
 800f7d2:	6923      	ldr	r3, [r4, #16]
 800f7d4:	4632      	mov	r2, r6
 800f7d6:	4649      	mov	r1, r9
 800f7d8:	4640      	mov	r0, r8
 800f7da:	47d0      	blx	sl
 800f7dc:	3001      	adds	r0, #1
 800f7de:	d0ad      	beq.n	800f73c <_printf_i+0x15c>
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	079b      	lsls	r3, r3, #30
 800f7e4:	d413      	bmi.n	800f80e <_printf_i+0x22e>
 800f7e6:	68e0      	ldr	r0, [r4, #12]
 800f7e8:	9b03      	ldr	r3, [sp, #12]
 800f7ea:	4298      	cmp	r0, r3
 800f7ec:	bfb8      	it	lt
 800f7ee:	4618      	movlt	r0, r3
 800f7f0:	e7a6      	b.n	800f740 <_printf_i+0x160>
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	4632      	mov	r2, r6
 800f7f6:	4649      	mov	r1, r9
 800f7f8:	4640      	mov	r0, r8
 800f7fa:	47d0      	blx	sl
 800f7fc:	3001      	adds	r0, #1
 800f7fe:	d09d      	beq.n	800f73c <_printf_i+0x15c>
 800f800:	3501      	adds	r5, #1
 800f802:	68e3      	ldr	r3, [r4, #12]
 800f804:	9903      	ldr	r1, [sp, #12]
 800f806:	1a5b      	subs	r3, r3, r1
 800f808:	42ab      	cmp	r3, r5
 800f80a:	dcf2      	bgt.n	800f7f2 <_printf_i+0x212>
 800f80c:	e7eb      	b.n	800f7e6 <_printf_i+0x206>
 800f80e:	2500      	movs	r5, #0
 800f810:	f104 0619 	add.w	r6, r4, #25
 800f814:	e7f5      	b.n	800f802 <_printf_i+0x222>
 800f816:	bf00      	nop
 800f818:	08014574 	.word	0x08014574
 800f81c:	08014585 	.word	0x08014585

0800f820 <__sflush_r>:
 800f820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f828:	0716      	lsls	r6, r2, #28
 800f82a:	4605      	mov	r5, r0
 800f82c:	460c      	mov	r4, r1
 800f82e:	d454      	bmi.n	800f8da <__sflush_r+0xba>
 800f830:	684b      	ldr	r3, [r1, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	dc02      	bgt.n	800f83c <__sflush_r+0x1c>
 800f836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f838:	2b00      	cmp	r3, #0
 800f83a:	dd48      	ble.n	800f8ce <__sflush_r+0xae>
 800f83c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f83e:	2e00      	cmp	r6, #0
 800f840:	d045      	beq.n	800f8ce <__sflush_r+0xae>
 800f842:	2300      	movs	r3, #0
 800f844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f848:	682f      	ldr	r7, [r5, #0]
 800f84a:	6a21      	ldr	r1, [r4, #32]
 800f84c:	602b      	str	r3, [r5, #0]
 800f84e:	d030      	beq.n	800f8b2 <__sflush_r+0x92>
 800f850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f852:	89a3      	ldrh	r3, [r4, #12]
 800f854:	0759      	lsls	r1, r3, #29
 800f856:	d505      	bpl.n	800f864 <__sflush_r+0x44>
 800f858:	6863      	ldr	r3, [r4, #4]
 800f85a:	1ad2      	subs	r2, r2, r3
 800f85c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f85e:	b10b      	cbz	r3, 800f864 <__sflush_r+0x44>
 800f860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f862:	1ad2      	subs	r2, r2, r3
 800f864:	2300      	movs	r3, #0
 800f866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f868:	6a21      	ldr	r1, [r4, #32]
 800f86a:	4628      	mov	r0, r5
 800f86c:	47b0      	blx	r6
 800f86e:	1c43      	adds	r3, r0, #1
 800f870:	89a3      	ldrh	r3, [r4, #12]
 800f872:	d106      	bne.n	800f882 <__sflush_r+0x62>
 800f874:	6829      	ldr	r1, [r5, #0]
 800f876:	291d      	cmp	r1, #29
 800f878:	d82b      	bhi.n	800f8d2 <__sflush_r+0xb2>
 800f87a:	4a2a      	ldr	r2, [pc, #168]	@ (800f924 <__sflush_r+0x104>)
 800f87c:	410a      	asrs	r2, r1
 800f87e:	07d6      	lsls	r6, r2, #31
 800f880:	d427      	bmi.n	800f8d2 <__sflush_r+0xb2>
 800f882:	2200      	movs	r2, #0
 800f884:	6062      	str	r2, [r4, #4]
 800f886:	04d9      	lsls	r1, r3, #19
 800f888:	6922      	ldr	r2, [r4, #16]
 800f88a:	6022      	str	r2, [r4, #0]
 800f88c:	d504      	bpl.n	800f898 <__sflush_r+0x78>
 800f88e:	1c42      	adds	r2, r0, #1
 800f890:	d101      	bne.n	800f896 <__sflush_r+0x76>
 800f892:	682b      	ldr	r3, [r5, #0]
 800f894:	b903      	cbnz	r3, 800f898 <__sflush_r+0x78>
 800f896:	6560      	str	r0, [r4, #84]	@ 0x54
 800f898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f89a:	602f      	str	r7, [r5, #0]
 800f89c:	b1b9      	cbz	r1, 800f8ce <__sflush_r+0xae>
 800f89e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8a2:	4299      	cmp	r1, r3
 800f8a4:	d002      	beq.n	800f8ac <__sflush_r+0x8c>
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f7ff fbea 	bl	800f080 <_free_r>
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8b0:	e00d      	b.n	800f8ce <__sflush_r+0xae>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	47b0      	blx	r6
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	1c50      	adds	r0, r2, #1
 800f8bc:	d1c9      	bne.n	800f852 <__sflush_r+0x32>
 800f8be:	682b      	ldr	r3, [r5, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d0c6      	beq.n	800f852 <__sflush_r+0x32>
 800f8c4:	2b1d      	cmp	r3, #29
 800f8c6:	d001      	beq.n	800f8cc <__sflush_r+0xac>
 800f8c8:	2b16      	cmp	r3, #22
 800f8ca:	d11e      	bne.n	800f90a <__sflush_r+0xea>
 800f8cc:	602f      	str	r7, [r5, #0]
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	e022      	b.n	800f918 <__sflush_r+0xf8>
 800f8d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8d6:	b21b      	sxth	r3, r3
 800f8d8:	e01b      	b.n	800f912 <__sflush_r+0xf2>
 800f8da:	690f      	ldr	r7, [r1, #16]
 800f8dc:	2f00      	cmp	r7, #0
 800f8de:	d0f6      	beq.n	800f8ce <__sflush_r+0xae>
 800f8e0:	0793      	lsls	r3, r2, #30
 800f8e2:	680e      	ldr	r6, [r1, #0]
 800f8e4:	bf08      	it	eq
 800f8e6:	694b      	ldreq	r3, [r1, #20]
 800f8e8:	600f      	str	r7, [r1, #0]
 800f8ea:	bf18      	it	ne
 800f8ec:	2300      	movne	r3, #0
 800f8ee:	eba6 0807 	sub.w	r8, r6, r7
 800f8f2:	608b      	str	r3, [r1, #8]
 800f8f4:	f1b8 0f00 	cmp.w	r8, #0
 800f8f8:	dde9      	ble.n	800f8ce <__sflush_r+0xae>
 800f8fa:	6a21      	ldr	r1, [r4, #32]
 800f8fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f8fe:	4643      	mov	r3, r8
 800f900:	463a      	mov	r2, r7
 800f902:	4628      	mov	r0, r5
 800f904:	47b0      	blx	r6
 800f906:	2800      	cmp	r0, #0
 800f908:	dc08      	bgt.n	800f91c <__sflush_r+0xfc>
 800f90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f90e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f912:	81a3      	strh	r3, [r4, #12]
 800f914:	f04f 30ff 	mov.w	r0, #4294967295
 800f918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f91c:	4407      	add	r7, r0
 800f91e:	eba8 0800 	sub.w	r8, r8, r0
 800f922:	e7e7      	b.n	800f8f4 <__sflush_r+0xd4>
 800f924:	dfbffffe 	.word	0xdfbffffe

0800f928 <_fflush_r>:
 800f928:	b538      	push	{r3, r4, r5, lr}
 800f92a:	690b      	ldr	r3, [r1, #16]
 800f92c:	4605      	mov	r5, r0
 800f92e:	460c      	mov	r4, r1
 800f930:	b913      	cbnz	r3, 800f938 <_fflush_r+0x10>
 800f932:	2500      	movs	r5, #0
 800f934:	4628      	mov	r0, r5
 800f936:	bd38      	pop	{r3, r4, r5, pc}
 800f938:	b118      	cbz	r0, 800f942 <_fflush_r+0x1a>
 800f93a:	6a03      	ldr	r3, [r0, #32]
 800f93c:	b90b      	cbnz	r3, 800f942 <_fflush_r+0x1a>
 800f93e:	f7ff fa43 	bl	800edc8 <__sinit>
 800f942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d0f3      	beq.n	800f932 <_fflush_r+0xa>
 800f94a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f94c:	07d0      	lsls	r0, r2, #31
 800f94e:	d404      	bmi.n	800f95a <_fflush_r+0x32>
 800f950:	0599      	lsls	r1, r3, #22
 800f952:	d402      	bmi.n	800f95a <_fflush_r+0x32>
 800f954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f956:	f7ff fb64 	bl	800f022 <__retarget_lock_acquire_recursive>
 800f95a:	4628      	mov	r0, r5
 800f95c:	4621      	mov	r1, r4
 800f95e:	f7ff ff5f 	bl	800f820 <__sflush_r>
 800f962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f964:	07da      	lsls	r2, r3, #31
 800f966:	4605      	mov	r5, r0
 800f968:	d4e4      	bmi.n	800f934 <_fflush_r+0xc>
 800f96a:	89a3      	ldrh	r3, [r4, #12]
 800f96c:	059b      	lsls	r3, r3, #22
 800f96e:	d4e1      	bmi.n	800f934 <_fflush_r+0xc>
 800f970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f972:	f7ff fb57 	bl	800f024 <__retarget_lock_release_recursive>
 800f976:	e7dd      	b.n	800f934 <_fflush_r+0xc>

0800f978 <fiprintf>:
 800f978:	b40e      	push	{r1, r2, r3}
 800f97a:	b503      	push	{r0, r1, lr}
 800f97c:	4601      	mov	r1, r0
 800f97e:	ab03      	add	r3, sp, #12
 800f980:	4805      	ldr	r0, [pc, #20]	@ (800f998 <fiprintf+0x20>)
 800f982:	f853 2b04 	ldr.w	r2, [r3], #4
 800f986:	6800      	ldr	r0, [r0, #0]
 800f988:	9301      	str	r3, [sp, #4]
 800f98a:	f7ff fca3 	bl	800f2d4 <_vfiprintf_r>
 800f98e:	b002      	add	sp, #8
 800f990:	f85d eb04 	ldr.w	lr, [sp], #4
 800f994:	b003      	add	sp, #12
 800f996:	4770      	bx	lr
 800f998:	20000020 	.word	0x20000020

0800f99c <__swbuf_r>:
 800f99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99e:	460e      	mov	r6, r1
 800f9a0:	4614      	mov	r4, r2
 800f9a2:	4605      	mov	r5, r0
 800f9a4:	b118      	cbz	r0, 800f9ae <__swbuf_r+0x12>
 800f9a6:	6a03      	ldr	r3, [r0, #32]
 800f9a8:	b90b      	cbnz	r3, 800f9ae <__swbuf_r+0x12>
 800f9aa:	f7ff fa0d 	bl	800edc8 <__sinit>
 800f9ae:	69a3      	ldr	r3, [r4, #24]
 800f9b0:	60a3      	str	r3, [r4, #8]
 800f9b2:	89a3      	ldrh	r3, [r4, #12]
 800f9b4:	071a      	lsls	r2, r3, #28
 800f9b6:	d501      	bpl.n	800f9bc <__swbuf_r+0x20>
 800f9b8:	6923      	ldr	r3, [r4, #16]
 800f9ba:	b943      	cbnz	r3, 800f9ce <__swbuf_r+0x32>
 800f9bc:	4621      	mov	r1, r4
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f000 f82a 	bl	800fa18 <__swsetup_r>
 800f9c4:	b118      	cbz	r0, 800f9ce <__swbuf_r+0x32>
 800f9c6:	f04f 37ff 	mov.w	r7, #4294967295
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	6922      	ldr	r2, [r4, #16]
 800f9d2:	1a98      	subs	r0, r3, r2
 800f9d4:	6963      	ldr	r3, [r4, #20]
 800f9d6:	b2f6      	uxtb	r6, r6
 800f9d8:	4283      	cmp	r3, r0
 800f9da:	4637      	mov	r7, r6
 800f9dc:	dc05      	bgt.n	800f9ea <__swbuf_r+0x4e>
 800f9de:	4621      	mov	r1, r4
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	f7ff ffa1 	bl	800f928 <_fflush_r>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d1ed      	bne.n	800f9c6 <__swbuf_r+0x2a>
 800f9ea:	68a3      	ldr	r3, [r4, #8]
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	60a3      	str	r3, [r4, #8]
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	1c5a      	adds	r2, r3, #1
 800f9f4:	6022      	str	r2, [r4, #0]
 800f9f6:	701e      	strb	r6, [r3, #0]
 800f9f8:	6962      	ldr	r2, [r4, #20]
 800f9fa:	1c43      	adds	r3, r0, #1
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d004      	beq.n	800fa0a <__swbuf_r+0x6e>
 800fa00:	89a3      	ldrh	r3, [r4, #12]
 800fa02:	07db      	lsls	r3, r3, #31
 800fa04:	d5e1      	bpl.n	800f9ca <__swbuf_r+0x2e>
 800fa06:	2e0a      	cmp	r6, #10
 800fa08:	d1df      	bne.n	800f9ca <__swbuf_r+0x2e>
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f7ff ff8b 	bl	800f928 <_fflush_r>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	d0d9      	beq.n	800f9ca <__swbuf_r+0x2e>
 800fa16:	e7d6      	b.n	800f9c6 <__swbuf_r+0x2a>

0800fa18 <__swsetup_r>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4b29      	ldr	r3, [pc, #164]	@ (800fac0 <__swsetup_r+0xa8>)
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	6818      	ldr	r0, [r3, #0]
 800fa20:	460c      	mov	r4, r1
 800fa22:	b118      	cbz	r0, 800fa2c <__swsetup_r+0x14>
 800fa24:	6a03      	ldr	r3, [r0, #32]
 800fa26:	b90b      	cbnz	r3, 800fa2c <__swsetup_r+0x14>
 800fa28:	f7ff f9ce 	bl	800edc8 <__sinit>
 800fa2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa30:	0719      	lsls	r1, r3, #28
 800fa32:	d422      	bmi.n	800fa7a <__swsetup_r+0x62>
 800fa34:	06da      	lsls	r2, r3, #27
 800fa36:	d407      	bmi.n	800fa48 <__swsetup_r+0x30>
 800fa38:	2209      	movs	r2, #9
 800fa3a:	602a      	str	r2, [r5, #0]
 800fa3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa40:	81a3      	strh	r3, [r4, #12]
 800fa42:	f04f 30ff 	mov.w	r0, #4294967295
 800fa46:	e033      	b.n	800fab0 <__swsetup_r+0x98>
 800fa48:	0758      	lsls	r0, r3, #29
 800fa4a:	d512      	bpl.n	800fa72 <__swsetup_r+0x5a>
 800fa4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa4e:	b141      	cbz	r1, 800fa62 <__swsetup_r+0x4a>
 800fa50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa54:	4299      	cmp	r1, r3
 800fa56:	d002      	beq.n	800fa5e <__swsetup_r+0x46>
 800fa58:	4628      	mov	r0, r5
 800fa5a:	f7ff fb11 	bl	800f080 <_free_r>
 800fa5e:	2300      	movs	r3, #0
 800fa60:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa62:	89a3      	ldrh	r3, [r4, #12]
 800fa64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa68:	81a3      	strh	r3, [r4, #12]
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	6063      	str	r3, [r4, #4]
 800fa6e:	6923      	ldr	r3, [r4, #16]
 800fa70:	6023      	str	r3, [r4, #0]
 800fa72:	89a3      	ldrh	r3, [r4, #12]
 800fa74:	f043 0308 	orr.w	r3, r3, #8
 800fa78:	81a3      	strh	r3, [r4, #12]
 800fa7a:	6923      	ldr	r3, [r4, #16]
 800fa7c:	b94b      	cbnz	r3, 800fa92 <__swsetup_r+0x7a>
 800fa7e:	89a3      	ldrh	r3, [r4, #12]
 800fa80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fa84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa88:	d003      	beq.n	800fa92 <__swsetup_r+0x7a>
 800fa8a:	4621      	mov	r1, r4
 800fa8c:	4628      	mov	r0, r5
 800fa8e:	f000 f856 	bl	800fb3e <__smakebuf_r>
 800fa92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa96:	f013 0201 	ands.w	r2, r3, #1
 800fa9a:	d00a      	beq.n	800fab2 <__swsetup_r+0x9a>
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	60a2      	str	r2, [r4, #8]
 800faa0:	6962      	ldr	r2, [r4, #20]
 800faa2:	4252      	negs	r2, r2
 800faa4:	61a2      	str	r2, [r4, #24]
 800faa6:	6922      	ldr	r2, [r4, #16]
 800faa8:	b942      	cbnz	r2, 800fabc <__swsetup_r+0xa4>
 800faaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800faae:	d1c5      	bne.n	800fa3c <__swsetup_r+0x24>
 800fab0:	bd38      	pop	{r3, r4, r5, pc}
 800fab2:	0799      	lsls	r1, r3, #30
 800fab4:	bf58      	it	pl
 800fab6:	6962      	ldrpl	r2, [r4, #20]
 800fab8:	60a2      	str	r2, [r4, #8]
 800faba:	e7f4      	b.n	800faa6 <__swsetup_r+0x8e>
 800fabc:	2000      	movs	r0, #0
 800fabe:	e7f7      	b.n	800fab0 <__swsetup_r+0x98>
 800fac0:	20000020 	.word	0x20000020

0800fac4 <_sbrk_r>:
 800fac4:	b538      	push	{r3, r4, r5, lr}
 800fac6:	4d06      	ldr	r5, [pc, #24]	@ (800fae0 <_sbrk_r+0x1c>)
 800fac8:	2300      	movs	r3, #0
 800faca:	4604      	mov	r4, r0
 800facc:	4608      	mov	r0, r1
 800face:	602b      	str	r3, [r5, #0]
 800fad0:	f7ff f83c 	bl	800eb4c <_sbrk>
 800fad4:	1c43      	adds	r3, r0, #1
 800fad6:	d102      	bne.n	800fade <_sbrk_r+0x1a>
 800fad8:	682b      	ldr	r3, [r5, #0]
 800fada:	b103      	cbz	r3, 800fade <_sbrk_r+0x1a>
 800fadc:	6023      	str	r3, [r4, #0]
 800fade:	bd38      	pop	{r3, r4, r5, pc}
 800fae0:	20008970 	.word	0x20008970

0800fae4 <abort>:
 800fae4:	b508      	push	{r3, lr}
 800fae6:	2006      	movs	r0, #6
 800fae8:	f000 f88e 	bl	800fc08 <raise>
 800faec:	2001      	movs	r0, #1
 800faee:	f7fe ffb5 	bl	800ea5c <_exit>

0800faf2 <__swhatbuf_r>:
 800faf2:	b570      	push	{r4, r5, r6, lr}
 800faf4:	460c      	mov	r4, r1
 800faf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fafa:	2900      	cmp	r1, #0
 800fafc:	b096      	sub	sp, #88	@ 0x58
 800fafe:	4615      	mov	r5, r2
 800fb00:	461e      	mov	r6, r3
 800fb02:	da0d      	bge.n	800fb20 <__swhatbuf_r+0x2e>
 800fb04:	89a3      	ldrh	r3, [r4, #12]
 800fb06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb0a:	f04f 0100 	mov.w	r1, #0
 800fb0e:	bf14      	ite	ne
 800fb10:	2340      	movne	r3, #64	@ 0x40
 800fb12:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb16:	2000      	movs	r0, #0
 800fb18:	6031      	str	r1, [r6, #0]
 800fb1a:	602b      	str	r3, [r5, #0]
 800fb1c:	b016      	add	sp, #88	@ 0x58
 800fb1e:	bd70      	pop	{r4, r5, r6, pc}
 800fb20:	466a      	mov	r2, sp
 800fb22:	f000 f879 	bl	800fc18 <_fstat_r>
 800fb26:	2800      	cmp	r0, #0
 800fb28:	dbec      	blt.n	800fb04 <__swhatbuf_r+0x12>
 800fb2a:	9901      	ldr	r1, [sp, #4]
 800fb2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb34:	4259      	negs	r1, r3
 800fb36:	4159      	adcs	r1, r3
 800fb38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb3c:	e7eb      	b.n	800fb16 <__swhatbuf_r+0x24>

0800fb3e <__smakebuf_r>:
 800fb3e:	898b      	ldrh	r3, [r1, #12]
 800fb40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb42:	079d      	lsls	r5, r3, #30
 800fb44:	4606      	mov	r6, r0
 800fb46:	460c      	mov	r4, r1
 800fb48:	d507      	bpl.n	800fb5a <__smakebuf_r+0x1c>
 800fb4a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb4e:	6023      	str	r3, [r4, #0]
 800fb50:	6123      	str	r3, [r4, #16]
 800fb52:	2301      	movs	r3, #1
 800fb54:	6163      	str	r3, [r4, #20]
 800fb56:	b003      	add	sp, #12
 800fb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb5a:	ab01      	add	r3, sp, #4
 800fb5c:	466a      	mov	r2, sp
 800fb5e:	f7ff ffc8 	bl	800faf2 <__swhatbuf_r>
 800fb62:	9f00      	ldr	r7, [sp, #0]
 800fb64:	4605      	mov	r5, r0
 800fb66:	4639      	mov	r1, r7
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f7ff fafd 	bl	800f168 <_malloc_r>
 800fb6e:	b948      	cbnz	r0, 800fb84 <__smakebuf_r+0x46>
 800fb70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb74:	059a      	lsls	r2, r3, #22
 800fb76:	d4ee      	bmi.n	800fb56 <__smakebuf_r+0x18>
 800fb78:	f023 0303 	bic.w	r3, r3, #3
 800fb7c:	f043 0302 	orr.w	r3, r3, #2
 800fb80:	81a3      	strh	r3, [r4, #12]
 800fb82:	e7e2      	b.n	800fb4a <__smakebuf_r+0xc>
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	6020      	str	r0, [r4, #0]
 800fb88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb8c:	81a3      	strh	r3, [r4, #12]
 800fb8e:	9b01      	ldr	r3, [sp, #4]
 800fb90:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb94:	b15b      	cbz	r3, 800fbae <__smakebuf_r+0x70>
 800fb96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	f000 f84e 	bl	800fc3c <_isatty_r>
 800fba0:	b128      	cbz	r0, 800fbae <__smakebuf_r+0x70>
 800fba2:	89a3      	ldrh	r3, [r4, #12]
 800fba4:	f023 0303 	bic.w	r3, r3, #3
 800fba8:	f043 0301 	orr.w	r3, r3, #1
 800fbac:	81a3      	strh	r3, [r4, #12]
 800fbae:	89a3      	ldrh	r3, [r4, #12]
 800fbb0:	431d      	orrs	r5, r3
 800fbb2:	81a5      	strh	r5, [r4, #12]
 800fbb4:	e7cf      	b.n	800fb56 <__smakebuf_r+0x18>

0800fbb6 <_raise_r>:
 800fbb6:	291f      	cmp	r1, #31
 800fbb8:	b538      	push	{r3, r4, r5, lr}
 800fbba:	4605      	mov	r5, r0
 800fbbc:	460c      	mov	r4, r1
 800fbbe:	d904      	bls.n	800fbca <_raise_r+0x14>
 800fbc0:	2316      	movs	r3, #22
 800fbc2:	6003      	str	r3, [r0, #0]
 800fbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc8:	bd38      	pop	{r3, r4, r5, pc}
 800fbca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fbcc:	b112      	cbz	r2, 800fbd4 <_raise_r+0x1e>
 800fbce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbd2:	b94b      	cbnz	r3, 800fbe8 <_raise_r+0x32>
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	f000 f853 	bl	800fc80 <_getpid_r>
 800fbda:	4622      	mov	r2, r4
 800fbdc:	4601      	mov	r1, r0
 800fbde:	4628      	mov	r0, r5
 800fbe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbe4:	f000 b83a 	b.w	800fc5c <_kill_r>
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d00a      	beq.n	800fc02 <_raise_r+0x4c>
 800fbec:	1c59      	adds	r1, r3, #1
 800fbee:	d103      	bne.n	800fbf8 <_raise_r+0x42>
 800fbf0:	2316      	movs	r3, #22
 800fbf2:	6003      	str	r3, [r0, #0]
 800fbf4:	2001      	movs	r0, #1
 800fbf6:	e7e7      	b.n	800fbc8 <_raise_r+0x12>
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fbfe:	4620      	mov	r0, r4
 800fc00:	4798      	blx	r3
 800fc02:	2000      	movs	r0, #0
 800fc04:	e7e0      	b.n	800fbc8 <_raise_r+0x12>
	...

0800fc08 <raise>:
 800fc08:	4b02      	ldr	r3, [pc, #8]	@ (800fc14 <raise+0xc>)
 800fc0a:	4601      	mov	r1, r0
 800fc0c:	6818      	ldr	r0, [r3, #0]
 800fc0e:	f7ff bfd2 	b.w	800fbb6 <_raise_r>
 800fc12:	bf00      	nop
 800fc14:	20000020 	.word	0x20000020

0800fc18 <_fstat_r>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	4d07      	ldr	r5, [pc, #28]	@ (800fc38 <_fstat_r+0x20>)
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	4604      	mov	r4, r0
 800fc20:	4608      	mov	r0, r1
 800fc22:	4611      	mov	r1, r2
 800fc24:	602b      	str	r3, [r5, #0]
 800fc26:	f7fe ff69 	bl	800eafc <_fstat>
 800fc2a:	1c43      	adds	r3, r0, #1
 800fc2c:	d102      	bne.n	800fc34 <_fstat_r+0x1c>
 800fc2e:	682b      	ldr	r3, [r5, #0]
 800fc30:	b103      	cbz	r3, 800fc34 <_fstat_r+0x1c>
 800fc32:	6023      	str	r3, [r4, #0]
 800fc34:	bd38      	pop	{r3, r4, r5, pc}
 800fc36:	bf00      	nop
 800fc38:	20008970 	.word	0x20008970

0800fc3c <_isatty_r>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	4d06      	ldr	r5, [pc, #24]	@ (800fc58 <_isatty_r+0x1c>)
 800fc40:	2300      	movs	r3, #0
 800fc42:	4604      	mov	r4, r0
 800fc44:	4608      	mov	r0, r1
 800fc46:	602b      	str	r3, [r5, #0]
 800fc48:	f7fe ff68 	bl	800eb1c <_isatty>
 800fc4c:	1c43      	adds	r3, r0, #1
 800fc4e:	d102      	bne.n	800fc56 <_isatty_r+0x1a>
 800fc50:	682b      	ldr	r3, [r5, #0]
 800fc52:	b103      	cbz	r3, 800fc56 <_isatty_r+0x1a>
 800fc54:	6023      	str	r3, [r4, #0]
 800fc56:	bd38      	pop	{r3, r4, r5, pc}
 800fc58:	20008970 	.word	0x20008970

0800fc5c <_kill_r>:
 800fc5c:	b538      	push	{r3, r4, r5, lr}
 800fc5e:	4d07      	ldr	r5, [pc, #28]	@ (800fc7c <_kill_r+0x20>)
 800fc60:	2300      	movs	r3, #0
 800fc62:	4604      	mov	r4, r0
 800fc64:	4608      	mov	r0, r1
 800fc66:	4611      	mov	r1, r2
 800fc68:	602b      	str	r3, [r5, #0]
 800fc6a:	f7fe fee5 	bl	800ea38 <_kill>
 800fc6e:	1c43      	adds	r3, r0, #1
 800fc70:	d102      	bne.n	800fc78 <_kill_r+0x1c>
 800fc72:	682b      	ldr	r3, [r5, #0]
 800fc74:	b103      	cbz	r3, 800fc78 <_kill_r+0x1c>
 800fc76:	6023      	str	r3, [r4, #0]
 800fc78:	bd38      	pop	{r3, r4, r5, pc}
 800fc7a:	bf00      	nop
 800fc7c:	20008970 	.word	0x20008970

0800fc80 <_getpid_r>:
 800fc80:	f7fe bed1 	b.w	800ea26 <_getpid>

0800fc84 <_init>:
 800fc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc86:	bf00      	nop
 800fc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc8a:	bc08      	pop	{r3}
 800fc8c:	469e      	mov	lr, r3
 800fc8e:	4770      	bx	lr

0800fc90 <_fini>:
 800fc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc92:	bf00      	nop
 800fc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc96:	bc08      	pop	{r3}
 800fc98:	469e      	mov	lr, r3
 800fc9a:	4770      	bx	lr
